<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>PyGIS Blog</title>
<link>https://pygisblog.massimilianomoraca.me/index.html</link>
<atom:link href="https://pygisblog.massimilianomoraca.me/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.2.269</generator>
<lastBuildDate>Sat, 19 Nov 2022 23:00:00 GMT</lastBuildDate>
<item>
  <title>Trovare la linea meno lunga in una lista di linee</title>
  <link>https://pygisblog.massimilianomoraca.me/posts/2022-11-20/linea-meno-lunga-in-una-lista.html</link>
  <description><![CDATA[ 




<p>Mettiamo il caso che abbiamo una lista di linee: come troviamo quella meno lunga?</p>
<section id="prima-di-iniziare" class="level2">
<h2 class="anchored" data-anchor-id="prima-di-iniziare">Prima di iniziare</h2>
<section id="librerie" class="level3">
<h3 class="anchored" data-anchor-id="librerie">Librerie</h3>
<p>Per raggiungere l’obiettivo userò <code>shapely</code>, <code>matplotlib</code> e <code>random</code>; queste ultime due le ho usate solo per motivi di rappresentazione grafica dei dati.</p>
<div class="cell" data-execution_count="1">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">from</span> shapely <span class="im" style="color: #00769E;">import</span> wkt</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">from</span> matplotlib <span class="im" style="color: #00769E;">import</span> pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> random</span></code></pre></div>
</details>
</div>
</section>
<section id="fonti-dati" class="level3">
<h3 class="anchored" data-anchor-id="fonti-dati">Fonti dati</h3>
<p>Userò in questo piccolo esercizio quattro linee, ma dobbiamo immaginarci di essere di fronte alla generica situazione in cui abbiamo una lista di <em>N</em> linee e non possiamo di certo metterci a misurarle tutte.</p>
<div class="cell" data-execution_count="2">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">line_0 <span class="op" style="color: #5E5E5E;">=</span> wkt.loads(<span class="st" style="color: #20794D;">'LINESTRING (461179.6655721677 4507148.788223281, 461217.56786209624 4507181.537033379, 461236.3280996226 4507194.537878151, 461241.7247760045 4507197.640095252, 461258.8379542616 4507210.660701941, 461261.9432857035 4507219.791508417, 461270.90091201715 4507254.590010401, 461271.56385885156 4507303.918307676, 461273.67536588735 4507318.460376316, 461286.2322009634 4507358.346460313, 461302.55653224624 4507403.197152592, 461365.2492823085 4507485.060388609, 461480.4983426857 4507548.512415529, 461580.7367309019 4507618.493483591)'</span>)</span>
<span id="cb2-2">line_1 <span class="op" style="color: #5E5E5E;">=</span> wkt.loads(<span class="st" style="color: #20794D;">'LINESTRING (461179.6655721677 4507148.788223281, 461217.56786209624 4507181.537033379, 461236.3280996226 4507194.537878151, 461241.7247760045 4507197.640095252, 461258.8379542616 4507210.660701941, 461261.9432857035 4507219.791508417, 461270.90091201715 4507254.590010401, 461271.56385885156 4507303.918307676, 461273.67536588735 4507318.460376316, 461286.2322009634 4507358.346460313, 461302.55653224624 4507403.197152592)'</span>)</span>
<span id="cb2-3">line_2 <span class="op" style="color: #5E5E5E;">=</span> wkt.loads(<span class="st" style="color: #20794D;">'LINESTRING (461179.6655721677 4507148.788223281, 461217.56786209624 4507181.537033379, 461236.3280996226 4507194.537878151, 461241.7247760045 4507197.640095252, 461258.8379542616 4507210.660701941, 461261.9432857035 4507219.791508417, 461270.90091201715 4507254.590010401, 461271.56385885156 4507303.918307676, 461273.67536588735 4507318.460376316, 461286.2322009634 4507358.346460313, 461302.55653224624 4507403.197152592, 461365.2492823085 4507485.060388609)'</span>)</span>
<span id="cb2-4">line_3 <span class="op" style="color: #5E5E5E;">=</span> wkt.loads(<span class="st" style="color: #20794D;">'LINESTRING (461179.6655721677 4507148.788223281, 461217.56786209624 4507181.537033379, 461236.3280996226 4507194.537878151, 461241.7247760045 4507197.640095252, 461258.8379542616 4507210.660701941, 461261.9432857035 4507219.791508417, 461270.90091201715 4507254.590010401, 461271.56385885156 4507303.918307676, 461273.67536588735 4507318.460376316, 461286.2322009634 4507358.346460313, 461302.55653224624 4507403.197152592, 461365.2492823085 4507485.060388609, 461480.4983426857 4507548.512415529)'</span>)</span>
<span id="cb2-5"></span>
<span id="cb2-6">line_list <span class="op" style="color: #5E5E5E;">=</span> [line_0, line_1, line_2, line_3]</span>
<span id="cb2-7"></span>
<span id="cb2-8">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>))</span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="cf" style="color: #003B4F;">for</span> position <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="bu" style="color: null;">len</span>(line_list)):</span>
<span id="cb2-11">    distance <span class="op" style="color: #5E5E5E;">=</span> position <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb2-12">    color <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f'</span><span class="sc" style="color: #5E5E5E;">{</span><span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">%06x</span><span class="st" style="color: #20794D;">"</span> <span class="op" style="color: #5E5E5E;">%</span> random<span class="sc" style="color: #5E5E5E;">.</span>randint(<span class="dv" style="color: #AD0000;">0</span>, <span class="bn" style="color: #AD0000;">0xFFFFFF</span>)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span></span>
<span id="cb2-13">    plt.plot(<span class="op" style="color: #5E5E5E;">*</span>line_list[position].parallel_offset(distance<span class="op" style="color: #5E5E5E;">=</span>distance).xy, label<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f'Line </span><span class="sc" style="color: #5E5E5E;">{</span>position<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>, color<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f'#</span><span class="sc" style="color: #5E5E5E;">{</span>color<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb2-14"></span>
<span id="cb2-15">    plt.legend()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://pygisblog.massimilianomoraca.me/posts/2022-11-20/linea-meno-lunga-in-una-lista_files/figure-html/cell-3-output-1.png" class="img-fluid"></p>
</div>
</div>
<p><strong>NB</strong>: ho usato <em><a href="https://shapely.readthedocs.io/en/stable/manual.html#object.parallel_offset">parallel_offset</a></em> solo per motivi grafici. Le linee che ho usato in questo esercizio sono pezzi di una unica linea più lunga che rappresentati sarebbero andati in sovrapposizione nel grafico rendendo impossibile la loro visualizzazione.</p>
</section>
</section>
<section id="misurare" class="level1">
<h1>Misurare!</h1>
<p>Se avessimo solo quattro linee in una lista sarebbe abbastanza semplice capire quale è quella meno lunga:</p>
<div class="cell" data-execution_count="3">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">line_measure <span class="op" style="color: #5E5E5E;">=</span> [line_0.length, line_1.length, line_2.length, line_3.length]</span>
<span id="cb3-2">line_measure</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>[656.716578077637, 299.7932485603402, 402.9046946828671, 534.4664886738693]</code></pre>
</div>
</div>
<p>Usando l’attributo <strong><a href="https://shapely.readthedocs.io/en/stable/manual.html#object.length">length</a></strong> risulta abbastanza immediato capire che la linea più breve è quella in posizione 1 che nemmeno a farlo apposta è <code>line_1</code>. Ma vediamo come possiamo risolvere il caso più generico.</p>
<div class="cell" data-execution_count="4">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">line_list.sort(key<span class="op" style="color: #5E5E5E;">=</span><span class="kw" style="color: #003B4F;">lambda</span> x: x.length, reverse<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb5-2">line_list</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>[&lt;shapely.geometry.linestring.LineString at 0x7fe06eebf370&gt;,
 &lt;shapely.geometry.linestring.LineString at 0x7fe06eebf430&gt;,
 &lt;shapely.geometry.linestring.LineString at 0x7fe06eebf460&gt;,
 &lt;shapely.geometry.linestring.LineString at 0x7fe0c0099eb0&gt;]</code></pre>
</div>
</div>
<p>Proprio usando <code>length</code> ho raggiunto lo scopo di questo piccolo articolo. Ho riordinato la lista di linee usando la <strong><a href="https://www.w3schools.com/python/python_lambda.asp">lambda function</a></strong> in accoppiata con l’attributo visto in precedenza.</p>
<div class="cell" data-execution_count="5">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>))</span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="cf" style="color: #003B4F;">for</span> position <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="bu" style="color: null;">len</span>(line_list)):</span>
<span id="cb7-4">    distance <span class="op" style="color: #5E5E5E;">=</span> position <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb7-5">    color <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f'</span><span class="sc" style="color: #5E5E5E;">{</span><span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">%06x</span><span class="st" style="color: #20794D;">"</span> <span class="op" style="color: #5E5E5E;">%</span> random<span class="sc" style="color: #5E5E5E;">.</span>randint(<span class="dv" style="color: #AD0000;">0</span>, <span class="bn" style="color: #AD0000;">0xFFFFFF</span>)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span></span>
<span id="cb7-6">    plt.plot(<span class="op" style="color: #5E5E5E;">*</span>line_list[position].parallel_offset(distance<span class="op" style="color: #5E5E5E;">=</span>distance).xy, label<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f'Line </span><span class="sc" style="color: #5E5E5E;">{</span>position<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>, color<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f'#</span><span class="sc" style="color: #5E5E5E;">{</span>color<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb7-7"></span>
<span id="cb7-8">    plt.legend()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://pygisblog.massimilianomoraca.me/posts/2022-11-20/linea-meno-lunga-in-una-lista_files/figure-html/cell-6-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="6">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">smallest_line <span class="op" style="color: #5E5E5E;">=</span> line_list[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb8-2">smallest_line.wkt</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>'LINESTRING (461179.6655721677 4507148.788223281, 461217.56786209624 4507181.537033379, 461236.3280996226 4507194.537878151, 461241.7247760045 4507197.640095252, 461258.8379542616 4507210.660701941, 461261.9432857035 4507219.791508417, 461270.90091201715 4507254.590010401, 461271.56385885156 4507303.918307676, 461273.67536588735 4507318.460376316, 461286.2322009634 4507358.346460313, 461302.55653224624 4507403.197152592)'</code></pre>
</div>
</div>
</section>
<section id="conclusione" class="level1">
<h1>Conclusione</h1>
<p>Ora noi sappiamo che è la linea in posizione 0, della nuova lista riordinata, ad essere quella meno lunga. Se ne conosci altri, o se hai indicazioni da dare per migliorare il post, fallo scrivendo in <a href="https://github.com/MaxDragonheart/PyGIS-Blog/discussions">Discussioni</a>.</p>
<section id="newsletter" class="level2">
<h2 class="anchored" data-anchor-id="newsletter">Newsletter</h2>
<p>Se vuoi ricevere aggiornamenti sui prossimi articoli <a href="https://massimilianomoraca.it/newsletter/">iscriviti alla newsletter</a>!</p>
</section>
<section id="telegram" class="level2">
<h2 class="anchored" data-anchor-id="telegram">Telegram</h2>
<p>Segui il canale Telegram <strong><a href="https://t.me/caffegis">CaffèGIS - I GIS a supporto dei processi evolutivi territoriali</a></strong> per ricevere aggiornamenti su iniziative ed informazioni a tema GIS.</p>
</section>
<section id="offrimi-una-birra" class="level2">
<h2 class="anchored" data-anchor-id="offrimi-una-birra">Offrimi una birra!</h2>
<p><strong>Se trovi interessanti i miei articoli <a href="https://www.paypal.com/paypalme/MassimilianoMoraca">offrimi una birra</a>!</strong></p>
<p>Alla prossima!</p>


</section>
</section>

 ]]></description>
  <category>line</category>
  <guid>https://pygisblog.massimilianomoraca.me/posts/2022-11-20/linea-meno-lunga-in-una-lista.html</guid>
  <pubDate>Sat, 19 Nov 2022 23:00:00 GMT</pubDate>
  <media:content url="https://pygisblog.massimilianomoraca.me/project_logo.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Analisi della copertura del suolo in Italia dal 1990 al 2018 usando la CORINE Land Cover</title>
  <link>https://pygisblog.massimilianomoraca.me/posts/2022-08-26/analisi-della-copertura-del-suolo-in-italia.html</link>
  <description><![CDATA[ 




<p>Qualche anno fa analizzai i dati del progetto <a href="https://land.copernicus.eu/pan-european/corine-land-cover">CORINE Land Cover</a> relativi alla <a href="https://massimilianomoraca.it/blog/gis/luso-del-suolo-in-campania-dati-dal-progetto-corine-land-cover/">Campania</a>, focalizzandomi sui tre censimenti tra il 2000 ed il 2012. Oggi invece estenderò quell’analisi inserendo sia i dati del 1990 che gli ultimi disponibili attualmente, cioè quelli del 2018.</p>
<p>L’analisi questa volta la farò usando Python e la estenderò al resto dell’Italia verso la fine.</p>
<section id="prima-di-iniziare" class="level2">
<h2 class="anchored" data-anchor-id="prima-di-iniziare">Prima di iniziare</h2>
<section id="librerie" class="level3">
<h3 class="anchored" data-anchor-id="librerie">Librerie</h3>
<p>Per raggiungere l’obiettivo userò le librerie che seguono:</p>
<div class="cell" data-execution_count="1">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> pathlib</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> geopandas <span class="im" style="color: #00769E;">as</span> gpd</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">from</span> functools <span class="im" style="color: #00769E;">import</span> <span class="bu" style="color: null;">reduce</span></span>
<span id="cb1-5"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-6"><span class="im" style="color: #00769E;">from</span> matplotlib.gridspec <span class="im" style="color: #00769E;">import</span> GridSpec</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="im" style="color: #00769E;">import</span> warnings</span>
<span id="cb1-9">warnings.filterwarnings(<span class="st" style="color: #20794D;">'ignore'</span>)</span>
<span id="cb1-10">warnings.simplefilter(<span class="st" style="color: #20794D;">'ignore'</span>)</span></code></pre></div>
</details>
</div>
</section>
<section id="fonti-dati" class="level3">
<h3 class="anchored" data-anchor-id="fonti-dati">Fonti dati</h3>
<p>Ho rielaborato i dati CORINE Land Cover dal 1990 al 2018 inserendoli in un unico <a href="https://massimilianomoraca.it/blog/gis/il-geopackage-una-valida-alternativa-al-formato-shape/">GeoPackage</a> che è possibile scaricare da <a href="https://massimilianomoraca.it/media/uploads/documents/2022/08/26/clcitalia.7z">qui</a>. I dati sono stati processati preventivamente usando <a href="https://postgis.net/">PostGIS</a> in modo da associare ai poligoni della CLC anche quelli dei Comuni italiani al 2022 dell’<a href="https://www.istat.it/it/archivio/222527">ISTAT</a>. E’ stato indispensabile questo passaggio preventivo perchè ho dovuto correggere gli errori topologici sui dati ISTAT e, al momento, trovo molto più comodo <a href="https://massimilianomoraca.it/blog/gis/correggere-le-geometrie-non-valide/">correggere gli errori topologici</a> tramite SQL piuttosto che con Python.</p>
<div class="cell" data-execution_count="2">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">main_folder <span class="op" style="color: #5E5E5E;">=</span> pathlib.Path(<span class="st" style="color: #20794D;">'/home/max/Desktop/clc'</span>)</span>
<span id="cb2-2">dataset <span class="op" style="color: #5E5E5E;">=</span> main_folder.joinpath(<span class="st" style="color: #20794D;">'clcitalia.gpkg'</span>)</span></code></pre></div>
</details>
</div>
</section>
</section>
<section id="lettura-e-normalizzazione-dei-dati" class="level1">
<h1>1. Lettura e normalizzazione dei dati</h1>
<p>In questa fase ho proceduto ad estrarre un po’ di dati statistici che userò nei passaggi successivi. Sono perlopiu analisi mirate al calcolo delle superfici che ho espresso in <a href="https://it.wikipedia.org/wiki/Ettaro">ettari</a>. Fatte queste analisi mi sono liberato dei dati geometrici perchè, non dovendoli più usare, mi alleggeriscono le analisi successive in termini di prestazioni hardware.</p>
<div class="cell" data-execution_count="3">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;"># CLC 1990</span></span>
<span id="cb3-3">clc1990 <span class="op" style="color: #5E5E5E;">=</span> gpd.read_file(dataset, layer<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'clc1990'</span>)</span>
<span id="cb3-4">clc1990.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sup_com_ha'</span>, value<span class="op" style="color: #5E5E5E;">=</span>clc1990.sup_com_mq <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">10000</span>)</span>
<span id="cb3-5">clc1990.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">11</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'surface_ha_1990'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(clc1990.geometry.area <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">10000</span>, <span class="dv" style="color: #AD0000;">4</span>))</span>
<span id="cb3-6">clc1990.drop(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'sup_com_mq'</span>, <span class="st" style="color: #20794D;">'geometry'</span>}, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb3-7"></span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;"># CLC 2000</span></span>
<span id="cb3-9">clc2000 <span class="op" style="color: #5E5E5E;">=</span> gpd.read_file(dataset, layer<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'clc2000'</span>)</span>
<span id="cb3-10">clc2000.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sup_com_ha'</span>, value<span class="op" style="color: #5E5E5E;">=</span>clc2000.sup_com_mq <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">10000</span>)</span>
<span id="cb3-11">clc2000.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">11</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'surface_ha_2000'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(clc2000.geometry.area <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">10000</span>, <span class="dv" style="color: #AD0000;">4</span>))</span>
<span id="cb3-12">clc2000.drop(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'sup_com_mq'</span>, <span class="st" style="color: #20794D;">'geometry'</span>}, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb3-13"></span>
<span id="cb3-14"><span class="co" style="color: #5E5E5E;"># CLC 2006</span></span>
<span id="cb3-15">clc2006 <span class="op" style="color: #5E5E5E;">=</span> gpd.read_file(dataset, layer<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'clc2006'</span>)</span>
<span id="cb3-16">clc2006.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sup_com_ha'</span>, value<span class="op" style="color: #5E5E5E;">=</span>clc2006.sup_com_mq <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">10000</span>)</span>
<span id="cb3-17">clc2006.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">11</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'surface_ha_2006'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(clc2006.geometry.area <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">10000</span>, <span class="dv" style="color: #AD0000;">4</span>))</span>
<span id="cb3-18">clc2006.drop(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'sup_com_mq'</span>, <span class="st" style="color: #20794D;">'geometry'</span>}, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb3-19"></span>
<span id="cb3-20"><span class="co" style="color: #5E5E5E;"># CLC 2012</span></span>
<span id="cb3-21">clc2012 <span class="op" style="color: #5E5E5E;">=</span> gpd.read_file(dataset, layer<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'clc2012'</span>)</span>
<span id="cb3-22">clc2012.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sup_com_ha'</span>, value<span class="op" style="color: #5E5E5E;">=</span>clc2012.sup_com_mq <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">10000</span>)</span>
<span id="cb3-23">clc2012.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">11</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'surface_ha_2012'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(clc2012.geometry.area <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">10000</span>, <span class="dv" style="color: #AD0000;">4</span>))</span>
<span id="cb3-24">clc2012.drop(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'sup_com_mq'</span>, <span class="st" style="color: #20794D;">'geometry'</span>}, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb3-25"></span>
<span id="cb3-26"><span class="co" style="color: #5E5E5E;"># CLC 2018</span></span>
<span id="cb3-27">clc2018 <span class="op" style="color: #5E5E5E;">=</span> gpd.read_file(dataset, layer<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'clc2018'</span>)</span>
<span id="cb3-28">clc2018.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sup_com_ha'</span>, value<span class="op" style="color: #5E5E5E;">=</span>clc2018.sup_com_mq <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">10000</span>)</span>
<span id="cb3-29">clc2018.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">11</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'surface_ha_2018'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(clc2018.geometry.area <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">10000</span>, <span class="dv" style="color: #AD0000;">4</span>))</span>
<span id="cb3-30">clc2018.drop(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'sup_com_mq'</span>, <span class="st" style="color: #20794D;">'geometry'</span>}, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
</details>
</div>
<p><strong>Test di visualizzazione</strong></p>
<div class="cell" data-execution_count="4">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">clc1990</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="4">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>code_90</th>
      <th>label1</th>
      <th>label2</th>
      <th>label3</th>
      <th>pro_com</th>
      <th>comune</th>
      <th>provincia</th>
      <th>regione</th>
      <th>sup_com_ha</th>
      <th>surface_ha_1990</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>211</td>
      <td>Agricultural areas</td>
      <td>Arable land</td>
      <td>Non-irrigated arable land</td>
      <td>101005.0</td>
      <td>Castelsilano</td>
      <td>Crotone</td>
      <td>Calabria</td>
      <td>4006.296249</td>
      <td>1.1386</td>
    </tr>
    <tr>
      <th>1</th>
      <td>211</td>
      <td>Agricultural areas</td>
      <td>Arable land</td>
      <td>Non-irrigated arable land</td>
      <td>101005.0</td>
      <td>Castelsilano</td>
      <td>Crotone</td>
      <td>Calabria</td>
      <td>4006.296249</td>
      <td>276.7171</td>
    </tr>
    <tr>
      <th>2</th>
      <td>223</td>
      <td>Agricultural areas</td>
      <td>Permanent crops</td>
      <td>Olive groves</td>
      <td>101005.0</td>
      <td>Castelsilano</td>
      <td>Crotone</td>
      <td>Calabria</td>
      <td>4006.296249</td>
      <td>35.4001</td>
    </tr>
    <tr>
      <th>3</th>
      <td>223</td>
      <td>Agricultural areas</td>
      <td>Permanent crops</td>
      <td>Olive groves</td>
      <td>101005.0</td>
      <td>Castelsilano</td>
      <td>Crotone</td>
      <td>Calabria</td>
      <td>4006.296249</td>
      <td>2.2285</td>
    </tr>
    <tr>
      <th>4</th>
      <td>241</td>
      <td>Agricultural areas</td>
      <td>Heterogeneous agricultural areas</td>
      <td>Annual crops associated with permanent crops</td>
      <td>101005.0</td>
      <td>Castelsilano</td>
      <td>Crotone</td>
      <td>Calabria</td>
      <td>4006.296249</td>
      <td>1.3860</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>190238</th>
      <td>321</td>
      <td>Forest and semi natural areas</td>
      <td>Scrub and/or herbaceous vegetation associations</td>
      <td>Natural grasslands</td>
      <td>81006.0</td>
      <td>Castelvetrano</td>
      <td>Trapani</td>
      <td>Sicilia</td>
      <td>20975.692026</td>
      <td>34.8218</td>
    </tr>
    <tr>
      <th>190239</th>
      <td>323</td>
      <td>Forest and semi natural areas</td>
      <td>Scrub and/or herbaceous vegetation associations</td>
      <td>Sclerophyllous vegetation</td>
      <td>81006.0</td>
      <td>Castelvetrano</td>
      <td>Trapani</td>
      <td>Sicilia</td>
      <td>20975.692026</td>
      <td>98.1617</td>
    </tr>
    <tr>
      <th>190240</th>
      <td>323</td>
      <td>Forest and semi natural areas</td>
      <td>Scrub and/or herbaceous vegetation associations</td>
      <td>Sclerophyllous vegetation</td>
      <td>81006.0</td>
      <td>Castelvetrano</td>
      <td>Trapani</td>
      <td>Sicilia</td>
      <td>20975.692026</td>
      <td>264.2617</td>
    </tr>
    <tr>
      <th>190241</th>
      <td>323</td>
      <td>Forest and semi natural areas</td>
      <td>Scrub and/or herbaceous vegetation associations</td>
      <td>Sclerophyllous vegetation</td>
      <td>81006.0</td>
      <td>Castelvetrano</td>
      <td>Trapani</td>
      <td>Sicilia</td>
      <td>20975.692026</td>
      <td>28.9076</td>
    </tr>
    <tr>
      <th>190242</th>
      <td>512</td>
      <td>Water bodies</td>
      <td>Inland waters</td>
      <td>Water bodies</td>
      <td>81006.0</td>
      <td>Castelvetrano</td>
      <td>Trapani</td>
      <td>Sicilia</td>
      <td>20975.692026</td>
      <td>152.0754</td>
    </tr>
  </tbody>
</table>
<p>190243 rows × 10 columns</p>
</div>
</div>
</div>
<p>Le colonne <code>label*</code> fanno riferimento alla nomenclatura delle tre classi della mappa CORINE Land Cover per ogni singolo anno. Per interpretare la nomenclatura vai <a href="https://land.copernicus.eu/user-corner/technical-library/corine-land-cover-nomenclature-guidelines/html/index.html">qui</a>. Come puoi vedere sono presenti le colonne relative al Comune, Provincia e Regione di apparteneza, l’estensione dell’area comunale(<code>sup_com_ha</code>) e quelle relative alle superfici della CLC che mi sono calcolato in precedenza.</p>
</section>
<section id="focus-sulla-campania" class="level1">
<h1>2. Focus sulla Campania</h1>
<p>Per appartenza territoriale partirò proprio dalla Campania, lo faccio anche per riprendere parte della analisi del mio vecchio articolo.</p>
<div class="cell" data-execution_count="5">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">clc1990_campania <span class="op" style="color: #5E5E5E;">=</span> clc1990[clc1990[<span class="st" style="color: #20794D;">'regione'</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'Campania'</span>]</span>
<span id="cb5-2">clc2000_campania <span class="op" style="color: #5E5E5E;">=</span> clc2000[clc2000[<span class="st" style="color: #20794D;">'regione'</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'Campania'</span>]</span>
<span id="cb5-3">clc2006_campania <span class="op" style="color: #5E5E5E;">=</span> clc2006[clc2006[<span class="st" style="color: #20794D;">'regione'</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'Campania'</span>]</span>
<span id="cb5-4">clc2012_campania <span class="op" style="color: #5E5E5E;">=</span> clc2012[clc2012[<span class="st" style="color: #20794D;">'regione'</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'Campania'</span>]</span>
<span id="cb5-5">clc2018_campania <span class="op" style="color: #5E5E5E;">=</span> clc2018[clc2018[<span class="st" style="color: #20794D;">'regione'</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'Campania'</span>]</span></code></pre></div>
</details>
</div>
<p>Test di visualizzazione</p>
<div class="cell" data-execution_count="6">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">clc2000_campania</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="6">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>code_00</th>
      <th>label1</th>
      <th>label2</th>
      <th>label3</th>
      <th>pro_com</th>
      <th>comune</th>
      <th>provincia</th>
      <th>regione</th>
      <th>sup_com_ha</th>
      <th>surface_ha_2000</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>14</th>
      <td>111</td>
      <td>Artificial surfaces</td>
      <td>Urban fabric</td>
      <td>Continuous urban fabric</td>
      <td>65134.0</td>
      <td>Sapri</td>
      <td>Salerno</td>
      <td>Campania</td>
      <td>1420.007490</td>
      <td>82.5207</td>
    </tr>
    <tr>
      <th>15</th>
      <td>112</td>
      <td>Artificial surfaces</td>
      <td>Urban fabric</td>
      <td>Discontinuous urban fabric</td>
      <td>65134.0</td>
      <td>Sapri</td>
      <td>Salerno</td>
      <td>Campania</td>
      <td>1420.007490</td>
      <td>36.5516</td>
    </tr>
    <tr>
      <th>16</th>
      <td>241</td>
      <td>Agricultural areas</td>
      <td>Heterogeneous agricultural areas</td>
      <td>Annual crops associated with permanent crops</td>
      <td>65134.0</td>
      <td>Sapri</td>
      <td>Salerno</td>
      <td>Campania</td>
      <td>1420.007490</td>
      <td>17.7890</td>
    </tr>
    <tr>
      <th>17</th>
      <td>242</td>
      <td>Agricultural areas</td>
      <td>Heterogeneous agricultural areas</td>
      <td>Complex cultivation patterns</td>
      <td>65134.0</td>
      <td>Sapri</td>
      <td>Salerno</td>
      <td>Campania</td>
      <td>1420.007490</td>
      <td>0.6866</td>
    </tr>
    <tr>
      <th>18</th>
      <td>242</td>
      <td>Agricultural areas</td>
      <td>Heterogeneous agricultural areas</td>
      <td>Complex cultivation patterns</td>
      <td>65134.0</td>
      <td>Sapri</td>
      <td>Salerno</td>
      <td>Campania</td>
      <td>1420.007490</td>
      <td>56.9832</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>177542</th>
      <td>323</td>
      <td>Forest and semi natural areas</td>
      <td>Scrub and/or herbaceous vegetation associations</td>
      <td>Sclerophyllous vegetation</td>
      <td>61072.0</td>
      <td>Rocchetta e Croce</td>
      <td>Caserta</td>
      <td>Campania</td>
      <td>1300.547184</td>
      <td>206.0290</td>
    </tr>
    <tr>
      <th>177543</th>
      <td>324</td>
      <td>Forest and semi natural areas</td>
      <td>Scrub and/or herbaceous vegetation associations</td>
      <td>Transitional woodland-shrub</td>
      <td>61072.0</td>
      <td>Rocchetta e Croce</td>
      <td>Caserta</td>
      <td>Campania</td>
      <td>1300.547184</td>
      <td>2.3093</td>
    </tr>
    <tr>
      <th>177544</th>
      <td>221</td>
      <td>Agricultural areas</td>
      <td>Permanent crops</td>
      <td>Vineyards</td>
      <td>61072.0</td>
      <td>Rocchetta e Croce</td>
      <td>Caserta</td>
      <td>Campania</td>
      <td>1300.547184</td>
      <td>4.0201</td>
    </tr>
    <tr>
      <th>177545</th>
      <td>321</td>
      <td>Forest and semi natural areas</td>
      <td>Scrub and/or herbaceous vegetation associations</td>
      <td>Natural grasslands</td>
      <td>61072.0</td>
      <td>Rocchetta e Croce</td>
      <td>Caserta</td>
      <td>Campania</td>
      <td>1300.547184</td>
      <td>1.8517</td>
    </tr>
    <tr>
      <th>177546</th>
      <td>222</td>
      <td>Agricultural areas</td>
      <td>Permanent crops</td>
      <td>Fruit trees and berry plantations</td>
      <td>61072.0</td>
      <td>Rocchetta e Croce</td>
      <td>Caserta</td>
      <td>Campania</td>
      <td>1300.547184</td>
      <td>1.9998</td>
    </tr>
  </tbody>
</table>
<p>11361 rows × 10 columns</p>
</div>
</div>
</div>
<section id="stato-al-1990" class="level3">
<h3 class="anchored" data-anchor-id="stato-al-1990">2.1.1 Stato al 1990</h3>
<p>Come primo step mi sono concentrato sui dati del 1990; ho pulito un po’ la tabella per rendere meglio comprensibile la sua lettura ed ho estratto valori per tutte e tre le classi. Quello che ho fatto per il 1990 l’ho ripetuto per i restanti anni.</p>
<p><strong>Livello 1</strong></p>
<div class="cell" data-execution_count="7">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">campania_clc1990_label1 <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(clc1990_campania.groupby(<span class="st" style="color: #20794D;">'label1'</span>)[<span class="st" style="color: #20794D;">'surface_ha_1990'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb7-2">campania_clc1990_label1.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb7-3">campania_clc1990_label1.rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'label1'</span>: <span class="st" style="color: #20794D;">'CORINE Land Cover - level 1'</span>}, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb7-4">campania_clc1990_label1</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="7">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>CORINE Land Cover - level 1</th>
      <th>surface_ha_1990</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Agricultural areas</td>
      <td>761041.0303</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Artificial surfaces</td>
      <td>80649.9550</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Forest and semi natural areas</td>
      <td>522870.7142</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Water bodies</td>
      <td>1593.6569</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Wetlands</td>
      <td>608.8997</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p><strong>Livello 2</strong></p>
<div class="cell" data-execution_count="8">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">campania_clc1990_label2 <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(clc1990_campania.groupby(<span class="st" style="color: #20794D;">'label2'</span>)[<span class="st" style="color: #20794D;">'surface_ha_1990'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb8-2">campania_clc1990_label2.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb8-3">campania_clc1990_label2.rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'label2'</span>: <span class="st" style="color: #20794D;">'CORINE Land Cover - level 2'</span>}, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb8-4">campania_clc1990_label2</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="8">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>CORINE Land Cover - level 2</th>
      <th>surface_ha_1990</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Arable land</td>
      <td>330066.4318</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Artificial, non-agricultural vegetated areas</td>
      <td>1046.0670</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Forests</td>
      <td>383826.2982</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Heterogeneous agricultural areas</td>
      <td>297503.9919</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Industrial, commercial and transport units</td>
      <td>8083.1341</td>
    </tr>
    <tr>
      <th>5</th>
      <td>Inland waters</td>
      <td>1567.8002</td>
    </tr>
    <tr>
      <th>6</th>
      <td>Inland wetlands</td>
      <td>608.8997</td>
    </tr>
    <tr>
      <th>7</th>
      <td>Marine waters</td>
      <td>25.8567</td>
    </tr>
    <tr>
      <th>8</th>
      <td>Mine, dump and construction sites</td>
      <td>1631.6247</td>
    </tr>
    <tr>
      <th>9</th>
      <td>Open spaces with little or no vegetation</td>
      <td>8966.3806</td>
    </tr>
    <tr>
      <th>10</th>
      <td>Pastures</td>
      <td>15620.1214</td>
    </tr>
    <tr>
      <th>11</th>
      <td>Permanent crops</td>
      <td>117850.4852</td>
    </tr>
    <tr>
      <th>12</th>
      <td>Scrub and/or herbaceous vegetation associations</td>
      <td>130078.0354</td>
    </tr>
    <tr>
      <th>13</th>
      <td>Urban fabric</td>
      <td>69889.1292</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p><strong>Livello 3</strong></p>
<div class="cell" data-execution_count="9">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">campania_clc1990_label3 <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(clc1990_campania.groupby(<span class="st" style="color: #20794D;">'label3'</span>)[<span class="st" style="color: #20794D;">'surface_ha_1990'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb9-2">campania_clc1990_label3.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb9-3">campania_clc1990_label3.rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'label3'</span>: <span class="st" style="color: #20794D;">'CORINE Land Cover - level 3'</span>}, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb9-4">campania_clc1990_label3</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="9">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>CORINE Land Cover - level 3</th>
      <th>surface_ha_1990</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Agro-forestry areas</td>
      <td>420.5049</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Airports</td>
      <td>383.8998</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Annual crops associated with permanent crops</td>
      <td>42881.8119</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Bare rocks</td>
      <td>1122.7257</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Beaches, dunes, sands</td>
      <td>2282.0112</td>
    </tr>
    <tr>
      <th>5</th>
      <td>Broad-leaved forest</td>
      <td>367521.2801</td>
    </tr>
    <tr>
      <th>6</th>
      <td>Coastal lagoons</td>
      <td>25.8567</td>
    </tr>
    <tr>
      <th>7</th>
      <td>Complex cultivation patterns</td>
      <td>165047.1097</td>
    </tr>
    <tr>
      <th>8</th>
      <td>Coniferous forest</td>
      <td>7457.8770</td>
    </tr>
    <tr>
      <th>9</th>
      <td>Construction sites</td>
      <td>25.4060</td>
    </tr>
    <tr>
      <th>10</th>
      <td>Continuous urban fabric</td>
      <td>32608.0637</td>
    </tr>
    <tr>
      <th>11</th>
      <td>Discontinuous urban fabric</td>
      <td>37281.0655</td>
    </tr>
    <tr>
      <th>12</th>
      <td>Dump sites</td>
      <td>207.8811</td>
    </tr>
    <tr>
      <th>13</th>
      <td>Fruit trees and berry plantations</td>
      <td>56044.2433</td>
    </tr>
    <tr>
      <th>14</th>
      <td>Green urban areas</td>
      <td>731.9919</td>
    </tr>
    <tr>
      <th>15</th>
      <td>Industrial or commercial units</td>
      <td>6590.0765</td>
    </tr>
    <tr>
      <th>16</th>
      <td>Inland marshes</td>
      <td>608.8997</td>
    </tr>
    <tr>
      <th>17</th>
      <td>Land principally occupied by agriculture, with...</td>
      <td>89154.5654</td>
    </tr>
    <tr>
      <th>18</th>
      <td>Mineral extraction sites</td>
      <td>1398.3376</td>
    </tr>
    <tr>
      <th>19</th>
      <td>Mixed forest</td>
      <td>8847.1411</td>
    </tr>
    <tr>
      <th>20</th>
      <td>Moors and heathland</td>
      <td>16.7825</td>
    </tr>
    <tr>
      <th>21</th>
      <td>Natural grasslands</td>
      <td>57150.7848</td>
    </tr>
    <tr>
      <th>22</th>
      <td>Non-irrigated arable land</td>
      <td>304750.4005</td>
    </tr>
    <tr>
      <th>23</th>
      <td>Olive groves</td>
      <td>58951.7577</td>
    </tr>
    <tr>
      <th>24</th>
      <td>Pastures</td>
      <td>15620.1214</td>
    </tr>
    <tr>
      <th>25</th>
      <td>Permanently irrigated land</td>
      <td>25316.0313</td>
    </tr>
    <tr>
      <th>26</th>
      <td>Port areas</td>
      <td>458.6026</td>
    </tr>
    <tr>
      <th>27</th>
      <td>Road and rail networks and associated land</td>
      <td>650.5552</td>
    </tr>
    <tr>
      <th>28</th>
      <td>Sclerophyllous vegetation</td>
      <td>19255.7695</td>
    </tr>
    <tr>
      <th>29</th>
      <td>Sparsely vegetated areas</td>
      <td>5561.6437</td>
    </tr>
    <tr>
      <th>30</th>
      <td>Sport and leisure facilities</td>
      <td>314.0751</td>
    </tr>
    <tr>
      <th>31</th>
      <td>Transitional woodland-shrub</td>
      <td>53654.6986</td>
    </tr>
    <tr>
      <th>32</th>
      <td>Vineyards</td>
      <td>2854.4842</td>
    </tr>
    <tr>
      <th>33</th>
      <td>Water bodies</td>
      <td>1095.5920</td>
    </tr>
    <tr>
      <th>34</th>
      <td>Water courses</td>
      <td>472.2082</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
<section id="stato-al-2000" class="level3">
<h3 class="anchored" data-anchor-id="stato-al-2000">2.1.2 Stato al 2000</h3>
<div class="cell" data-execution_count="10">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">campania_clc2000_label1 <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(clc2000_campania.groupby(<span class="st" style="color: #20794D;">'label1'</span>)[<span class="st" style="color: #20794D;">'surface_ha_2000'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb10-2">campania_clc2000_label1.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb10-3">campania_clc2000_label1.rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'label1'</span>: <span class="st" style="color: #20794D;">'CORINE Land Cover - level 1'</span>}, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb10-4"></span>
<span id="cb10-5">campania_clc2000_label2 <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(clc2000_campania.groupby(<span class="st" style="color: #20794D;">'label2'</span>)[<span class="st" style="color: #20794D;">'surface_ha_2000'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb10-6">campania_clc2000_label2.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb10-7">campania_clc2000_label2.rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'label2'</span>: <span class="st" style="color: #20794D;">'CORINE Land Cover - level 2'</span>}, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb10-8"></span>
<span id="cb10-9">campania_clc2000_label3 <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(clc2000_campania.groupby(<span class="st" style="color: #20794D;">'label3'</span>)[<span class="st" style="color: #20794D;">'surface_ha_2000'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb10-10">campania_clc2000_label3.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb10-11">campania_clc2000_label3.rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'label3'</span>: <span class="st" style="color: #20794D;">'CORINE Land Cover - level 3'</span>}, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
</details>
</div>
</section>
<section id="stato-al-2006" class="level3">
<h3 class="anchored" data-anchor-id="stato-al-2006">2.1.3 Stato al 2006</h3>
<div class="cell" data-execution_count="11">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">campania_clc2006_label1 <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(clc2006_campania.groupby(<span class="st" style="color: #20794D;">'label1'</span>)[<span class="st" style="color: #20794D;">'surface_ha_2006'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb11-2">campania_clc2006_label1.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb11-3">campania_clc2006_label1.rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'label1'</span>: <span class="st" style="color: #20794D;">'CORINE Land Cover - level 1'</span>}, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb11-4"></span>
<span id="cb11-5">campania_clc2006_label2 <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(clc2006_campania.groupby(<span class="st" style="color: #20794D;">'label2'</span>)[<span class="st" style="color: #20794D;">'surface_ha_2006'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb11-6">campania_clc2006_label2.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb11-7">campania_clc2006_label2.rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'label2'</span>: <span class="st" style="color: #20794D;">'CORINE Land Cover - level 2'</span>}, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb11-8"></span>
<span id="cb11-9">campania_clc2006_label3 <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(clc2006_campania.groupby(<span class="st" style="color: #20794D;">'label3'</span>)[<span class="st" style="color: #20794D;">'surface_ha_2006'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb11-10">campania_clc2006_label3.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb11-11">campania_clc2006_label3.rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'label3'</span>: <span class="st" style="color: #20794D;">'CORINE Land Cover - level 3'</span>}, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
</details>
</div>
</section>
<section id="stato-al-2012" class="level3">
<h3 class="anchored" data-anchor-id="stato-al-2012">2.1.4 Stato al 2012</h3>
<div class="cell" data-execution_count="12">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">campania_clc2012_label1 <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(clc2012_campania.groupby(<span class="st" style="color: #20794D;">'label1'</span>)[<span class="st" style="color: #20794D;">'surface_ha_2012'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb12-2">campania_clc2012_label1.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb12-3">campania_clc2012_label1.rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'label1'</span>: <span class="st" style="color: #20794D;">'CORINE Land Cover - level 1'</span>}, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb12-4"></span>
<span id="cb12-5">campania_clc2012_label2 <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(clc2012_campania.groupby(<span class="st" style="color: #20794D;">'label2'</span>)[<span class="st" style="color: #20794D;">'surface_ha_2012'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb12-6">campania_clc2012_label2.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb12-7">campania_clc2012_label2.rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'label2'</span>: <span class="st" style="color: #20794D;">'CORINE Land Cover - level 2'</span>}, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb12-8"></span>
<span id="cb12-9">campania_clc2012_label3 <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(clc2012_campania.groupby(<span class="st" style="color: #20794D;">'label3'</span>)[<span class="st" style="color: #20794D;">'surface_ha_2012'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb12-10">campania_clc2012_label3.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb12-11">campania_clc2012_label3.rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'label3'</span>: <span class="st" style="color: #20794D;">'CORINE Land Cover - level 3'</span>}, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
</details>
</div>
</section>
<section id="stato-al-2018" class="level3">
<h3 class="anchored" data-anchor-id="stato-al-2018">2.1.5 Stato al 2018</h3>
<div class="cell" data-execution_count="13">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">campania_clc2018_label1 <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(clc2018_campania.groupby(<span class="st" style="color: #20794D;">'label1'</span>)[<span class="st" style="color: #20794D;">'surface_ha_2018'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb13-2">campania_clc2018_label1.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb13-3">campania_clc2018_label1.rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'label1'</span>: <span class="st" style="color: #20794D;">'CORINE Land Cover - level 1'</span>}, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb13-4"></span>
<span id="cb13-5">campania_clc2018_label2 <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(clc2018_campania.groupby(<span class="st" style="color: #20794D;">'label2'</span>)[<span class="st" style="color: #20794D;">'surface_ha_2018'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb13-6">campania_clc2018_label2.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb13-7">campania_clc2018_label2.rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'label2'</span>: <span class="st" style="color: #20794D;">'CORINE Land Cover - level 2'</span>}, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb13-8"></span>
<span id="cb13-9">campania_clc2018_label3 <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(clc2018_campania.groupby(<span class="st" style="color: #20794D;">'label3'</span>)[<span class="st" style="color: #20794D;">'surface_ha_2018'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb13-10">campania_clc2018_label3.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb13-11">campania_clc2018_label3.rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'label3'</span>: <span class="st" style="color: #20794D;">'CORINE Land Cover - level 3'</span>}, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
</details>
</div>
</section>
<section id="grafici" class="level2">
<h2 class="anchored" data-anchor-id="grafici">2.2 Grafici</h2>
<p>E’ il momento di approfondire questi dati! Ho estratto grafici per tutte e tre le classi ed ho cercato di dare una interpretazione del perchè di alcuni fenomeni.</p>
<section id="grafici-per-il-livello-1" class="level3">
<h3 class="anchored" data-anchor-id="grafici-per-il-livello-1">2.2.1 Grafici per il livello 1</h3>
<div class="cell" data-execution_count="14">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">lvl1 <span class="op" style="color: #5E5E5E;">=</span> [campania_clc1990_label1, campania_clc2000_label1, campania_clc2006_label1, campania_clc2012_label1, campania_clc2018_label1]</span>
<span id="cb14-2">lvl1_df <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">reduce</span>(<span class="kw" style="color: #003B4F;">lambda</span>  left,right: pd.merge(left,right,on<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'CORINE Land Cover - level 1'</span>], how<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'outer'</span>), lvl1)</span>
<span id="cb14-3">lvl1_df.fillna(<span class="dv" style="color: #AD0000;">0</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb14-4">lvl1_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">6</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Surf.Diff. | 2018-1990'</span>, value<span class="op" style="color: #5E5E5E;">=</span>(lvl1_df.surface_ha_2018 <span class="op" style="color: #5E5E5E;">-</span> lvl1_df.surface_ha_1990))</span>
<span id="cb14-5">lvl1_df.set_index(<span class="st" style="color: #20794D;">'CORINE Land Cover - level 1'</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb14-6">lvl1_df.rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'surface_ha_1990'</span>: <span class="st" style="color: #20794D;">'1990'</span>, <span class="st" style="color: #20794D;">'surface_ha_2000'</span>: <span class="st" style="color: #20794D;">'2000'</span>, <span class="st" style="color: #20794D;">'surface_ha_2006'</span>: <span class="st" style="color: #20794D;">'2006'</span>, <span class="st" style="color: #20794D;">'surface_ha_2012'</span>: <span class="st" style="color: #20794D;">'2012'</span>, <span class="st" style="color: #20794D;">'surface_ha_2018'</span>: <span class="st" style="color: #20794D;">'2018'</span>}, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb14-7">lvl1_df.sort_index(ascending<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb14-8">lvl1_df</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="14">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>1990</th>
      <th>2000</th>
      <th>2006</th>
      <th>2012</th>
      <th>2018</th>
      <th>Surf.Diff. | 2018-1990</th>
    </tr>
    <tr>
      <th>CORINE Land Cover - level 1</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>Agricultural areas</th>
      <td>761041.0303</td>
      <td>753145.2349</td>
      <td>755438.9748</td>
      <td>752611.5454</td>
      <td>752077.3861</td>
      <td>-8963.6442</td>
    </tr>
    <tr>
      <th>Artificial surfaces</th>
      <td>80649.9550</td>
      <td>89935.2388</td>
      <td>97747.4059</td>
      <td>101771.7643</td>
      <td>102304.6984</td>
      <td>21654.7434</td>
    </tr>
    <tr>
      <th>Forest and semi natural areas</th>
      <td>522870.7142</td>
      <td>521005.1536</td>
      <td>510731.5181</td>
      <td>509096.9289</td>
      <td>508050.0206</td>
      <td>-14820.6936</td>
    </tr>
    <tr>
      <th>Water bodies</th>
      <td>1593.6569</td>
      <td>2195.8983</td>
      <td>2463.1760</td>
      <td>2948.2571</td>
      <td>2948.2571</td>
      <td>1354.6002</td>
    </tr>
    <tr>
      <th>Wetlands</th>
      <td>608.8997</td>
      <td>482.9084</td>
      <td>386.6832</td>
      <td>339.2620</td>
      <td>339.2620</td>
      <td>-269.6377</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="15">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">fig1 <span class="op" style="color: #5E5E5E;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">10</span>), dpi<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb15-2">sub_fig <span class="op" style="color: #5E5E5E;">=</span> GridSpec(nrows<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, ncols<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, figure<span class="op" style="color: #5E5E5E;">=</span>fig1, hspace<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.35</span>)</span>
<span id="cb15-3">ax <span class="op" style="color: #5E5E5E;">=</span> fig1.add_subplot(sub_fig[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb15-4">lvl1_df.plot.bar(ax<span class="op" style="color: #5E5E5E;">=</span>ax, rot<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb15-5"></span>
<span id="cb15-6">ax.yaxis.set_label_text(<span class="st" style="color: #20794D;">'ha'</span>)</span>
<span id="cb15-7">ax.set_xlabel(<span class="st" style="color: #20794D;">''</span>)</span>
<span id="cb15-8">ax.grid(color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'lightgrey'</span>, linestyle<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'dashdot'</span>)</span>
<span id="cb15-9"></span>
<span id="cb15-10">plt.legend(loc<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'best'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>&lt;matplotlib.legend.Legend at 0x7fe2cfea3760&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://pygisblog.massimilianomoraca.me/posts/2022-08-26/analisi-della-copertura-del-suolo-in-italia_files/figure-html/cell-16-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>E’ visibile abbastanza chiaramente un netto aumento delle superfici artificiali con un conseguente arretramento di quelle forestate e di quelle agricole. Le aree forestate tra il 1990 ed il 2018 hanno subito un arretramento quasi doppio rispetto a quelle agricole e le superfici artificiali sono quelle che hanno maggiormente <em>“beneficiato”</em> di questo arretramento complessivo delle due classi di CLC. Si potrebbe dire che l’urbanizzato ha eroso foreste ed aree agricole in quasi 30 anni.</p>
</section>
<section id="grafici-per-il-livello-2" class="level3">
<h3 class="anchored" data-anchor-id="grafici-per-il-livello-2">2.2.2 Grafici per il livello 2</h3>
<div class="cell" data-execution_count="16">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">lvl2 <span class="op" style="color: #5E5E5E;">=</span> [campania_clc1990_label2, campania_clc2000_label2, campania_clc2006_label2, campania_clc2012_label2, campania_clc2018_label2]</span>
<span id="cb17-2">lvl2_df <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">reduce</span>(<span class="kw" style="color: #003B4F;">lambda</span>  left,right: pd.merge(left,right,on<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'CORINE Land Cover - level 2'</span>], how<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'outer'</span>), lvl2)</span>
<span id="cb17-3">lvl2_df.fillna(<span class="dv" style="color: #AD0000;">0</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb17-4">lvl2_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">6</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Surf.Diff. | 2000-1990'</span>, value<span class="op" style="color: #5E5E5E;">=</span>(lvl2_df.surface_ha_2000 <span class="op" style="color: #5E5E5E;">-</span> lvl2_df.surface_ha_1990))</span>
<span id="cb17-5">lvl2_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">7</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Surf.Diff. | 2006-2000'</span>, value<span class="op" style="color: #5E5E5E;">=</span>(lvl2_df.surface_ha_2006 <span class="op" style="color: #5E5E5E;">-</span> lvl2_df.surface_ha_2000))</span>
<span id="cb17-6">lvl2_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">8</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Surf.Diff. | 2012-2006'</span>, value<span class="op" style="color: #5E5E5E;">=</span>(lvl2_df.surface_ha_2012 <span class="op" style="color: #5E5E5E;">-</span> lvl2_df.surface_ha_2006))</span>
<span id="cb17-7">lvl2_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">9</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Surf.Diff. | 2018-2012'</span>, value<span class="op" style="color: #5E5E5E;">=</span>(lvl2_df.surface_ha_2018 <span class="op" style="color: #5E5E5E;">-</span> lvl2_df.surface_ha_2012))</span>
<span id="cb17-8">lvl2_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">9</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Surf.Diff. | 2018-1990'</span>, value<span class="op" style="color: #5E5E5E;">=</span>(lvl2_df.surface_ha_2018 <span class="op" style="color: #5E5E5E;">-</span> lvl2_df.surface_ha_1990))</span>
<span id="cb17-9">lvl2_df.set_index(<span class="st" style="color: #20794D;">'CORINE Land Cover - level 2'</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb17-10">lvl2_df <span class="op" style="color: #5E5E5E;">=</span> lvl2_df[[<span class="st" style="color: #20794D;">'Surf.Diff. | 2000-1990'</span>, <span class="st" style="color: #20794D;">'Surf.Diff. | 2006-2000'</span>, <span class="st" style="color: #20794D;">'Surf.Diff. | 2012-2006'</span>, <span class="st" style="color: #20794D;">'Surf.Diff. | 2018-2012'</span>, <span class="st" style="color: #20794D;">'Surf.Diff. | 2018-1990'</span>]]</span>
<span id="cb17-11">lvl2_df.sort_index(ascending<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb17-12">lvl2_df</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="16">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Surf.Diff. | 2000-1990</th>
      <th>Surf.Diff. | 2006-2000</th>
      <th>Surf.Diff. | 2012-2006</th>
      <th>Surf.Diff. | 2018-2012</th>
      <th>Surf.Diff. | 2018-1990</th>
    </tr>
    <tr>
      <th>CORINE Land Cover - level 2</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>Arable land</th>
      <td>-6226.9986</td>
      <td>-15007.4805</td>
      <td>1362.7374</td>
      <td>26.9417</td>
      <td>-19844.8000</td>
    </tr>
    <tr>
      <th>Artificial, non-agricultural vegetated areas</th>
      <td>330.5367</td>
      <td>-4.4113</td>
      <td>58.5588</td>
      <td>396.9458</td>
      <td>781.6300</td>
    </tr>
    <tr>
      <th>Forests</th>
      <td>2963.0601</td>
      <td>-4293.0050</td>
      <td>1859.3801</td>
      <td>-1391.9151</td>
      <td>-862.4799</td>
    </tr>
    <tr>
      <th>Heterogeneous agricultural areas</th>
      <td>-947.6309</td>
      <td>4546.7408</td>
      <td>9331.1283</td>
      <td>-448.2578</td>
      <td>12481.9804</td>
    </tr>
    <tr>
      <th>Industrial, commercial and transport units</th>
      <td>1550.4505</td>
      <td>3173.2827</td>
      <td>2094.7855</td>
      <td>154.4961</td>
      <td>6973.0148</td>
    </tr>
    <tr>
      <th>Inland waters</th>
      <td>602.2416</td>
      <td>267.2776</td>
      <td>398.3284</td>
      <td>0.0000</td>
      <td>1267.8476</td>
    </tr>
    <tr>
      <th>Inland wetlands</th>
      <td>-125.9913</td>
      <td>-96.2252</td>
      <td>-73.2778</td>
      <td>0.0000</td>
      <td>-295.4943</td>
    </tr>
    <tr>
      <th>Marine waters</th>
      <td>-0.0002</td>
      <td>0.0001</td>
      <td>86.7527</td>
      <td>0.0000</td>
      <td>86.7526</td>
    </tr>
    <tr>
      <th>Maritime wetlands</th>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>25.8566</td>
      <td>0.0000</td>
      <td>25.8566</td>
    </tr>
    <tr>
      <th>Mine, dump and construction sites</th>
      <td>-31.1788</td>
      <td>474.9460</td>
      <td>112.8079</td>
      <td>-23.5198</td>
      <td>533.0553</td>
    </tr>
    <tr>
      <th>Open spaces with little or no vegetation</th>
      <td>1019.9233</td>
      <td>-287.3449</td>
      <td>20220.0532</td>
      <td>3005.5295</td>
      <td>23958.1611</td>
    </tr>
    <tr>
      <th>Pastures</th>
      <td>-1351.7336</td>
      <td>-788.2046</td>
      <td>-997.1098</td>
      <td>-110.4579</td>
      <td>-3247.5059</td>
    </tr>
    <tr>
      <th>Permanent crops</th>
      <td>630.5677</td>
      <td>13542.6842</td>
      <td>-12524.1853</td>
      <td>-2.3853</td>
      <td>1646.6813</td>
    </tr>
    <tr>
      <th>Scrub and/or herbaceous vegetation associations</th>
      <td>-5848.5440</td>
      <td>-5693.2856</td>
      <td>-23714.0225</td>
      <td>-2660.5227</td>
      <td>-37916.3748</td>
    </tr>
    <tr>
      <th>Urban fabric</th>
      <td>7435.4754</td>
      <td>4168.3497</td>
      <td>1758.2062</td>
      <td>5.0120</td>
      <td>13367.0433</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="17">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">fig2 <span class="op" style="color: #5E5E5E;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">10</span>), dpi<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb18-2">sub_fig <span class="op" style="color: #5E5E5E;">=</span> GridSpec(nrows<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, ncols<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, figure<span class="op" style="color: #5E5E5E;">=</span>fig2, hspace<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.35</span>)</span>
<span id="cb18-3">ax <span class="op" style="color: #5E5E5E;">=</span> fig2.add_subplot(sub_fig[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb18-4">lvl2_df.plot.bar(ax<span class="op" style="color: #5E5E5E;">=</span>ax, rot<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb18-5"></span>
<span id="cb18-6">ax.yaxis.set_label_text(<span class="st" style="color: #20794D;">'ha'</span>)</span>
<span id="cb18-7">ax.set_xlabel(<span class="st" style="color: #20794D;">''</span>)</span>
<span id="cb18-8">ax.grid(color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'lightgrey'</span>, linestyle<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'dashdot'</span>)</span>
<span id="cb18-9"></span>
<span id="cb18-10">plt.xticks(rotation <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">90</span>)</span>
<span id="cb18-11">plt.legend(loc<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'best'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>&lt;matplotlib.legend.Legend at 0x7fe2eb2bc4f0&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://pygisblog.massimilianomoraca.me/posts/2022-08-26/analisi-della-copertura-del-suolo-in-italia_files/figure-html/cell-18-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>Scendendo di un livello, quindi andando ad approfondire di più il dato passando al secondo livello CLC, possiamo verificare i trend negativi a quali specifiche superfici fanno riferimento.</p>
<p>Le aree arbustive e con alberi radi hanno avuto la peggio, a seguire i terreni arabili, pascoli e foreste. Netto è invece l’aumento delle aree aperte, classe in cui nel terzo livello CLC ci sono le aree percorse dal fuoco(da tenere in mente per richiami successivi!). Seguono, nell’incremento, le aree urbanizzate, le aree per colture eterogenee e quelle per lo sviluppo di siti industriali e commerciali.</p>
</section>
<section id="grafici-per-il-livello-3" class="level3">
<h3 class="anchored" data-anchor-id="grafici-per-il-livello-3">2.2.3 Grafici per il livello 3</h3>
<div class="cell" data-execution_count="18">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">lvl3 <span class="op" style="color: #5E5E5E;">=</span> [campania_clc1990_label3, campania_clc2000_label3, campania_clc2006_label3, campania_clc2012_label3, campania_clc2018_label3]</span>
<span id="cb20-2">lvl3_df <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">reduce</span>(<span class="kw" style="color: #003B4F;">lambda</span>  left,right: pd.merge(left,right,on<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'CORINE Land Cover - level 3'</span>], how<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'outer'</span>), lvl3)</span>
<span id="cb20-3">lvl3_df.fillna(<span class="dv" style="color: #AD0000;">0</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb20-4">lvl3_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">6</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Surf.Diff. | 2000-1990'</span>, value<span class="op" style="color: #5E5E5E;">=</span>(lvl3_df.surface_ha_2000 <span class="op" style="color: #5E5E5E;">-</span> lvl3_df.surface_ha_1990))</span>
<span id="cb20-5">lvl3_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">7</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Surf.Diff. | 2006-2000'</span>, value<span class="op" style="color: #5E5E5E;">=</span>(lvl3_df.surface_ha_2006 <span class="op" style="color: #5E5E5E;">-</span> lvl3_df.surface_ha_2000))</span>
<span id="cb20-6">lvl3_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">8</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Surf.Diff. | 2012-2006'</span>, value<span class="op" style="color: #5E5E5E;">=</span>(lvl3_df.surface_ha_2012 <span class="op" style="color: #5E5E5E;">-</span> lvl3_df.surface_ha_2006))</span>
<span id="cb20-7">lvl3_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">9</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Surf.Diff. | 2018-2012'</span>, value<span class="op" style="color: #5E5E5E;">=</span>(lvl3_df.surface_ha_2018 <span class="op" style="color: #5E5E5E;">-</span> lvl3_df.surface_ha_2012))</span>
<span id="cb20-8">lvl3_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Surf.Diff. | 2018-1990'</span>, value<span class="op" style="color: #5E5E5E;">=</span>(lvl3_df.surface_ha_2018 <span class="op" style="color: #5E5E5E;">-</span> lvl3_df.surface_ha_1990))</span>
<span id="cb20-9">lvl3_df.set_index(<span class="st" style="color: #20794D;">'CORINE Land Cover - level 3'</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb20-10"></span>
<span id="cb20-11">lvl3_df.sort_index(ascending<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb20-12">lvl3_df</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="18">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>surface_ha_1990</th>
      <th>surface_ha_2000</th>
      <th>surface_ha_2006</th>
      <th>surface_ha_2012</th>
      <th>surface_ha_2018</th>
      <th>Surf.Diff. | 2000-1990</th>
      <th>Surf.Diff. | 2006-2000</th>
      <th>Surf.Diff. | 2012-2006</th>
      <th>Surf.Diff. | 2018-2012</th>
      <th>Surf.Diff. | 2018-1990</th>
    </tr>
    <tr>
      <th>CORINE Land Cover - level 3</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>Agro-forestry areas</th>
      <td>420.5049</td>
      <td>420.5224</td>
      <td>140.9079</td>
      <td>79.0823</td>
      <td>79.0823</td>
      <td>0.0175</td>
      <td>-279.6145</td>
      <td>-61.8256</td>
      <td>0.000000e+00</td>
      <td>-341.4226</td>
    </tr>
    <tr>
      <th>Airports</th>
      <td>383.8998</td>
      <td>556.4307</td>
      <td>556.4308</td>
      <td>556.4308</td>
      <td>556.4308</td>
      <td>172.5309</td>
      <td>0.0001</td>
      <td>0.0000</td>
      <td>0.000000e+00</td>
      <td>172.5310</td>
    </tr>
    <tr>
      <th>Annual crops associated with permanent crops</th>
      <td>42881.8119</td>
      <td>44016.3987</td>
      <td>23501.2894</td>
      <td>24459.1737</td>
      <td>24062.2280</td>
      <td>1134.5868</td>
      <td>-20515.1093</td>
      <td>957.8843</td>
      <td>-3.969457e+02</td>
      <td>-18819.5839</td>
    </tr>
    <tr>
      <th>Bare rocks</th>
      <td>1122.7257</td>
      <td>1006.1738</td>
      <td>979.8852</td>
      <td>1274.5252</td>
      <td>1274.5252</td>
      <td>-116.5519</td>
      <td>-26.2886</td>
      <td>294.6400</td>
      <td>0.000000e+00</td>
      <td>151.7995</td>
    </tr>
    <tr>
      <th>Beaches, dunes, sands</th>
      <td>2282.0112</td>
      <td>1852.6891</td>
      <td>1835.3037</td>
      <td>1904.4059</td>
      <td>1904.4059</td>
      <td>-429.3221</td>
      <td>-17.3854</td>
      <td>69.1022</td>
      <td>0.000000e+00</td>
      <td>-377.6053</td>
    </tr>
    <tr>
      <th>Broad-leaved forest</th>
      <td>367521.2801</td>
      <td>369187.8047</td>
      <td>365453.4552</td>
      <td>367034.3194</td>
      <td>366436.4566</td>
      <td>1666.5246</td>
      <td>-3734.3495</td>
      <td>1580.8642</td>
      <td>-5.978628e+02</td>
      <td>-1084.8235</td>
    </tr>
    <tr>
      <th>Burnt areas</th>
      <td>0.0000</td>
      <td>354.7607</td>
      <td>438.4148</td>
      <td>770.8451</td>
      <td>3802.9844</td>
      <td>354.7607</td>
      <td>83.6541</td>
      <td>332.4303</td>
      <td>3.032139e+03</td>
      <td>3802.9844</td>
    </tr>
    <tr>
      <th>Coastal lagoons</th>
      <td>25.8567</td>
      <td>25.8565</td>
      <td>25.8566</td>
      <td>112.6093</td>
      <td>112.6093</td>
      <td>-0.0002</td>
      <td>0.0001</td>
      <td>86.7527</td>
      <td>0.000000e+00</td>
      <td>86.7526</td>
    </tr>
    <tr>
      <th>Complex cultivation patterns</th>
      <td>165047.1097</td>
      <td>162777.2069</td>
      <td>181971.5611</td>
      <td>185634.2569</td>
      <td>185582.9448</td>
      <td>-2269.9028</td>
      <td>19194.3542</td>
      <td>3662.6958</td>
      <td>-5.131210e+01</td>
      <td>20535.8351</td>
    </tr>
    <tr>
      <th>Coniferous forest</th>
      <td>7457.8770</td>
      <td>8154.5708</td>
      <td>7620.7143</td>
      <td>8876.9029</td>
      <td>8373.6888</td>
      <td>696.6938</td>
      <td>-533.8565</td>
      <td>1256.1886</td>
      <td>-5.032141e+02</td>
      <td>915.8118</td>
    </tr>
    <tr>
      <th>Construction sites</th>
      <td>25.4060</td>
      <td>70.0172</td>
      <td>246.1018</td>
      <td>58.2792</td>
      <td>58.2792</td>
      <td>44.6112</td>
      <td>176.0846</td>
      <td>-187.8226</td>
      <td>0.000000e+00</td>
      <td>32.8732</td>
    </tr>
    <tr>
      <th>Continuous urban fabric</th>
      <td>32608.0637</td>
      <td>33436.5752</td>
      <td>29309.2673</td>
      <td>33833.4142</td>
      <td>33833.4142</td>
      <td>828.5115</td>
      <td>-4127.3079</td>
      <td>4524.1469</td>
      <td>0.000000e+00</td>
      <td>1225.3505</td>
    </tr>
    <tr>
      <th>Discontinuous urban fabric</th>
      <td>37281.0655</td>
      <td>43888.0294</td>
      <td>52183.6870</td>
      <td>49417.7463</td>
      <td>49422.7583</td>
      <td>6606.9639</td>
      <td>8295.6576</td>
      <td>-2765.9407</td>
      <td>5.012000e+00</td>
      <td>12141.6928</td>
    </tr>
    <tr>
      <th>Dump sites</th>
      <td>207.8811</td>
      <td>27.2633</td>
      <td>174.0802</td>
      <td>438.6634</td>
      <td>406.9530</td>
      <td>-180.6178</td>
      <td>146.8169</td>
      <td>264.5832</td>
      <td>-3.171040e+01</td>
      <td>199.0719</td>
    </tr>
    <tr>
      <th>Fruit trees and berry plantations</th>
      <td>56044.2433</td>
      <td>54999.5524</td>
      <td>61954.0631</td>
      <td>56585.3863</td>
      <td>56585.3142</td>
      <td>-1044.6909</td>
      <td>6954.5107</td>
      <td>-5368.6768</td>
      <td>-7.210000e-02</td>
      <td>541.0709</td>
    </tr>
    <tr>
      <th>Green urban areas</th>
      <td>731.9919</td>
      <td>758.4238</td>
      <td>805.2857</td>
      <td>780.1128</td>
      <td>1177.0586</td>
      <td>26.4319</td>
      <td>46.8619</td>
      <td>-25.1729</td>
      <td>3.969458e+02</td>
      <td>445.0667</td>
    </tr>
    <tr>
      <th>Industrial or commercial units</th>
      <td>6590.0765</td>
      <td>8168.7442</td>
      <td>11005.1236</td>
      <td>12643.3548</td>
      <td>12797.8509</td>
      <td>1578.6677</td>
      <td>2836.3794</td>
      <td>1638.2312</td>
      <td>1.544961e+02</td>
      <td>6207.7744</td>
    </tr>
    <tr>
      <th>Inland marshes</th>
      <td>608.8997</td>
      <td>482.9084</td>
      <td>386.6832</td>
      <td>313.4054</td>
      <td>313.4054</td>
      <td>-125.9913</td>
      <td>-96.2252</td>
      <td>-73.2778</td>
      <td>0.000000e+00</td>
      <td>-295.4943</td>
    </tr>
    <tr>
      <th>Land principally occupied by agriculture, with significant areas of natural vegetation</th>
      <td>89154.5654</td>
      <td>89342.2330</td>
      <td>95489.3434</td>
      <td>100261.7172</td>
      <td>100261.7172</td>
      <td>187.6676</td>
      <td>6147.1104</td>
      <td>4772.3738</td>
      <td>0.000000e+00</td>
      <td>11107.1518</td>
    </tr>
    <tr>
      <th>Mineral extraction sites</th>
      <td>1398.3376</td>
      <td>1503.1654</td>
      <td>1655.2099</td>
      <td>1691.2572</td>
      <td>1699.4478</td>
      <td>104.8278</td>
      <td>152.0445</td>
      <td>36.0473</td>
      <td>8.190600e+00</td>
      <td>301.1102</td>
    </tr>
    <tr>
      <th>Mixed forest</th>
      <td>8847.1411</td>
      <td>9446.9828</td>
      <td>9422.1838</td>
      <td>8444.5111</td>
      <td>8153.6729</td>
      <td>599.8417</td>
      <td>-24.7990</td>
      <td>-977.6727</td>
      <td>-2.908382e+02</td>
      <td>-693.4682</td>
    </tr>
    <tr>
      <th>Moors and heathland</th>
      <td>16.7825</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>-16.7825</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.000000e+00</td>
      <td>-16.7825</td>
    </tr>
    <tr>
      <th>Natural grasslands</th>
      <td>57150.7848</td>
      <td>53354.5398</td>
      <td>48427.4297</td>
      <td>30587.1997</td>
      <td>29539.0655</td>
      <td>-3796.2450</td>
      <td>-4927.1101</td>
      <td>-17840.2300</td>
      <td>-1.048134e+03</td>
      <td>-27611.7193</td>
    </tr>
    <tr>
      <th>Non-irrigated arable land</th>
      <td>304750.4005</td>
      <td>298328.2037</td>
      <td>283148.7731</td>
      <td>284508.0453</td>
      <td>284503.2765</td>
      <td>-6422.1968</td>
      <td>-15179.4306</td>
      <td>1359.2722</td>
      <td>-4.768800e+00</td>
      <td>-20247.1240</td>
    </tr>
    <tr>
      <th>Olive groves</th>
      <td>58951.7577</td>
      <td>60805.0013</td>
      <td>66147.7874</td>
      <td>61604.3214</td>
      <td>61632.6846</td>
      <td>1853.2436</td>
      <td>5342.7861</td>
      <td>-4543.4660</td>
      <td>2.836320e+01</td>
      <td>2680.9269</td>
    </tr>
    <tr>
      <th>Pastures</th>
      <td>15620.1214</td>
      <td>14268.3878</td>
      <td>13480.1832</td>
      <td>12483.0734</td>
      <td>12372.6155</td>
      <td>-1351.7336</td>
      <td>-788.2046</td>
      <td>-997.1098</td>
      <td>-1.104579e+02</td>
      <td>-3247.5059</td>
    </tr>
    <tr>
      <th>Permanently irrigated land</th>
      <td>25316.0313</td>
      <td>25511.2295</td>
      <td>25683.1796</td>
      <td>25686.6448</td>
      <td>25718.3553</td>
      <td>195.1982</td>
      <td>171.9501</td>
      <td>3.4652</td>
      <td>3.171050e+01</td>
      <td>402.3240</td>
    </tr>
    <tr>
      <th>Port areas</th>
      <td>458.6026</td>
      <td>469.9879</td>
      <td>481.6963</td>
      <td>459.2550</td>
      <td>459.2550</td>
      <td>11.3853</td>
      <td>11.7084</td>
      <td>-22.4413</td>
      <td>0.000000e+00</td>
      <td>0.6524</td>
    </tr>
    <tr>
      <th>Road and rail networks and associated land</th>
      <td>650.5552</td>
      <td>438.4218</td>
      <td>763.6166</td>
      <td>1242.6122</td>
      <td>1242.6122</td>
      <td>-212.1334</td>
      <td>325.1948</td>
      <td>478.9956</td>
      <td>0.000000e+00</td>
      <td>592.0570</td>
    </tr>
    <tr>
      <th>Salt marshes</th>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>25.8566</td>
      <td>25.8566</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>25.8566</td>
      <td>0.000000e+00</td>
      <td>25.8566</td>
    </tr>
    <tr>
      <th>Sclerophyllous vegetation</th>
      <td>19255.7695</td>
      <td>18537.4944</td>
      <td>17072.9128</td>
      <td>15623.7660</td>
      <td>15530.6877</td>
      <td>-718.2751</td>
      <td>-1464.5816</td>
      <td>-1449.1468</td>
      <td>-9.307830e+01</td>
      <td>-3725.0818</td>
    </tr>
    <tr>
      <th>Sparsely vegetated areas</th>
      <td>5561.6437</td>
      <td>6772.6803</td>
      <td>6445.3553</td>
      <td>25969.2360</td>
      <td>25942.6262</td>
      <td>1211.0366</td>
      <td>-327.3250</td>
      <td>19523.8807</td>
      <td>-2.660980e+01</td>
      <td>20380.9825</td>
    </tr>
    <tr>
      <th>Sport and leisure facilities</th>
      <td>314.0751</td>
      <td>618.1799</td>
      <td>566.9067</td>
      <td>650.6384</td>
      <td>650.6384</td>
      <td>304.1048</td>
      <td>-51.2732</td>
      <td>83.7317</td>
      <td>0.000000e+00</td>
      <td>336.5633</td>
    </tr>
    <tr>
      <th>Transitional woodland-shrub</th>
      <td>53654.6986</td>
      <td>52337.4572</td>
      <td>53035.8633</td>
      <td>48611.2176</td>
      <td>47091.9074</td>
      <td>-1317.2414</td>
      <td>698.4061</td>
      <td>-4424.6457</td>
      <td>-1.519310e+03</td>
      <td>-6562.7912</td>
    </tr>
    <tr>
      <th>Vineyards</th>
      <td>2854.4842</td>
      <td>2676.4992</td>
      <td>3921.8866</td>
      <td>1309.8441</td>
      <td>1279.1677</td>
      <td>-177.9850</td>
      <td>1245.3874</td>
      <td>-2612.0425</td>
      <td>-3.067640e+01</td>
      <td>-1575.3165</td>
    </tr>
    <tr>
      <th>Water bodies</th>
      <td>1095.5920</td>
      <td>1373.7744</td>
      <td>1687.8687</td>
      <td>1981.1362</td>
      <td>1981.1362</td>
      <td>278.1824</td>
      <td>314.0943</td>
      <td>293.2675</td>
      <td>2.273737e-13</td>
      <td>885.5442</td>
    </tr>
    <tr>
      <th>Water courses</th>
      <td>472.2082</td>
      <td>796.2674</td>
      <td>749.4507</td>
      <td>854.5116</td>
      <td>854.5116</td>
      <td>324.0592</td>
      <td>-46.8167</td>
      <td>105.0609</td>
      <td>0.000000e+00</td>
      <td>382.3034</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="19">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">fig3 <span class="op" style="color: #5E5E5E;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">10</span>), dpi<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb21-2">sub_fig <span class="op" style="color: #5E5E5E;">=</span> GridSpec(nrows<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, ncols<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, figure<span class="op" style="color: #5E5E5E;">=</span>fig3, hspace<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.35</span>)</span>
<span id="cb21-3">ax <span class="op" style="color: #5E5E5E;">=</span> fig3.add_subplot(sub_fig[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb21-4">lvl3_df[<span class="st" style="color: #20794D;">'Surf.Diff. | 2018-1990'</span>].plot.bar(ax<span class="op" style="color: #5E5E5E;">=</span>ax, rot<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb21-5"></span>
<span id="cb21-6">ax.yaxis.set_label_text(<span class="st" style="color: #20794D;">'ha'</span>)</span>
<span id="cb21-7">ax.set_xlabel(<span class="st" style="color: #20794D;">''</span>)</span>
<span id="cb21-8">ax.grid(color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'lightgrey'</span>, linestyle<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'dashdot'</span>)</span>
<span id="cb21-9"></span>
<span id="cb21-10">plt.xticks(rotation <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">90</span>)</span>
<span id="cb21-11">plt.legend(loc<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'best'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>&lt;matplotlib.legend.Legend at 0x7fe2df35bd90&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://pygisblog.massimilianomoraca.me/posts/2022-08-26/analisi-della-copertura-del-suolo-in-italia_files/figure-html/cell-20-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>Passando al livello tre della CLC, ho voluto graficare la sola differenza tra 1990 e 2018 per motivi di leggibilità del grafico. In termini di aumento di copertura del suolo c’è l’avanzamento, quasi identico, delle piccole aree destinate a colture annuali e delle aree con vegetazione frammentata. A seguire ci sono le aree urbane discontinue e quelle occupate da orti, vigneti e alberi da frutto.</p>
<p><strong>Una riflessione che mi sento di fare è che l’avanzamento del tessuto urbano discontinuo ha frazionato il territorio agricolo, generando aree a piccole colture agricole.</strong></p>
<p>Significativo anche l’aumento di estensione delle aree percorse dal fuoco.</p>
<p>I decrementi sono la cartina di tornasole degli incrementi che ho descritto poco fa e che potrebbero confermare la mia riflessione sul frazionamento del territorio naturale ed agricolo, portato avanti dall’avanzamento delle classi legati ai <em>suoli artificiali</em>.</p>
</section>
</section>
<section id="focus-sui-comuni" class="level2">
<h2 class="anchored" data-anchor-id="focus-sui-comuni">2.3 Focus sui Comuni</h2>
<p>L’analisi che segue tenta di rispondere alla domanda: <strong><em>“quali sono i Comuni campani in cui i fenomeni esposti poco fa hanno avuto un maggior impatto?”</em></strong></p>
<p>Mi concentrerò sul terzo livello della CLC, in particolare sulle aree artificiali, aree agricole e foreste ma anche sulle discariche, le aree percorse dal fuoco ed il verde urbano.</p>
<p>Visto che dal 2000 in poi l’accuratezza geometrica del dato CLC è aumentata considerevolmente, le analisi di dettaglio che seguono si concentreranno sulla differenza tra 2000 e 2018.</p>
<div class="cell" data-execution_count="21">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"></span>
<span id="cb23-2"><span class="co" style="color: #5E5E5E;"># Dati 1990</span></span>
<span id="cb23-3">focus_1990 <span class="op" style="color: #5E5E5E;">=</span> clc1990_campania[[<span class="st" style="color: #20794D;">'pro_com'</span>, <span class="st" style="color: #20794D;">'comune'</span>, <span class="st" style="color: #20794D;">'provincia'</span>, <span class="st" style="color: #20794D;">'sup_com_ha'</span>, <span class="st" style="color: #20794D;">'label3'</span>, <span class="st" style="color: #20794D;">'surface_ha_1990'</span>]]</span>
<span id="cb23-4">focus_1990.set_index(<span class="st" style="color: #20794D;">'label3'</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb23-5">focus_1990_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(focus_1990.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>, <span class="st" style="color: #20794D;">'comune'</span>, <span class="st" style="color: #20794D;">'sup_com_ha'</span>, <span class="st" style="color: #20794D;">'label3'</span>])[<span class="st" style="color: #20794D;">'surface_ha_1990'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb23-6">focus_1990_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb23-7"></span>
<span id="cb23-8"><span class="co" style="color: #5E5E5E;"># Dati 2000</span></span>
<span id="cb23-9">focus_2000 <span class="op" style="color: #5E5E5E;">=</span> clc2000_campania[[<span class="st" style="color: #20794D;">'pro_com'</span>, <span class="st" style="color: #20794D;">'comune'</span>, <span class="st" style="color: #20794D;">'provincia'</span>, <span class="st" style="color: #20794D;">'sup_com_ha'</span>, <span class="st" style="color: #20794D;">'label3'</span>, <span class="st" style="color: #20794D;">'surface_ha_2000'</span>]]</span>
<span id="cb23-10">focus_2000.set_index(<span class="st" style="color: #20794D;">'label3'</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb23-11">focus_2000_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(focus_2000.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>, <span class="st" style="color: #20794D;">'comune'</span>, <span class="st" style="color: #20794D;">'sup_com_ha'</span>, <span class="st" style="color: #20794D;">'label3'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2000'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb23-12">focus_2000_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb23-13"></span>
<span id="cb23-14"><span class="co" style="color: #5E5E5E;"># Dati 2006</span></span>
<span id="cb23-15">focus_2006 <span class="op" style="color: #5E5E5E;">=</span> clc2006_campania[[<span class="st" style="color: #20794D;">'pro_com'</span>, <span class="st" style="color: #20794D;">'comune'</span>, <span class="st" style="color: #20794D;">'provincia'</span>, <span class="st" style="color: #20794D;">'sup_com_ha'</span>, <span class="st" style="color: #20794D;">'label3'</span>, <span class="st" style="color: #20794D;">'surface_ha_2006'</span>]]</span>
<span id="cb23-16">focus_2006.set_index(<span class="st" style="color: #20794D;">'label3'</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb23-17">focus_2006_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(focus_2006.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>, <span class="st" style="color: #20794D;">'comune'</span>, <span class="st" style="color: #20794D;">'sup_com_ha'</span>, <span class="st" style="color: #20794D;">'label3'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2006'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb23-18">focus_2006_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb23-19"></span>
<span id="cb23-20"><span class="co" style="color: #5E5E5E;"># Dati 2012</span></span>
<span id="cb23-21">focus_2012 <span class="op" style="color: #5E5E5E;">=</span> clc2012_campania[[<span class="st" style="color: #20794D;">'pro_com'</span>, <span class="st" style="color: #20794D;">'comune'</span>, <span class="st" style="color: #20794D;">'provincia'</span>, <span class="st" style="color: #20794D;">'sup_com_ha'</span>, <span class="st" style="color: #20794D;">'label3'</span>, <span class="st" style="color: #20794D;">'surface_ha_2012'</span>]]</span>
<span id="cb23-22">focus_2012.set_index(<span class="st" style="color: #20794D;">'label3'</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb23-23">focus_2012_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(focus_2012.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>, <span class="st" style="color: #20794D;">'comune'</span>, <span class="st" style="color: #20794D;">'sup_com_ha'</span>, <span class="st" style="color: #20794D;">'label3'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2012'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb23-24">focus_2012_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb23-25"></span>
<span id="cb23-26"><span class="co" style="color: #5E5E5E;"># Dati 2018</span></span>
<span id="cb23-27">focus_2018 <span class="op" style="color: #5E5E5E;">=</span> clc2018_campania[[<span class="st" style="color: #20794D;">'pro_com'</span>, <span class="st" style="color: #20794D;">'comune'</span>, <span class="st" style="color: #20794D;">'provincia'</span>, <span class="st" style="color: #20794D;">'sup_com_ha'</span>, <span class="st" style="color: #20794D;">'label3'</span>, <span class="st" style="color: #20794D;">'surface_ha_2018'</span>]]</span>
<span id="cb23-28">focus_2018.set_index(<span class="st" style="color: #20794D;">'label3'</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb23-29">focus_2018_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(focus_2018.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>, <span class="st" style="color: #20794D;">'comune'</span>, <span class="st" style="color: #20794D;">'sup_com_ha'</span>, <span class="st" style="color: #20794D;">'label3'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2018'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb23-30">focus_2018_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="22">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">focus_1990_group</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="22">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>pro_com</th>
      <th>comune</th>
      <th>sup_com_ha</th>
      <th>label3</th>
      <th>surface_ha_1990</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>61001.0</td>
      <td>Ailano</td>
      <td>1605.560469</td>
      <td>Broad-leaved forest</td>
      <td>472.5747</td>
    </tr>
    <tr>
      <th>1</th>
      <td>61001.0</td>
      <td>Ailano</td>
      <td>1605.560469</td>
      <td>Complex cultivation patterns</td>
      <td>93.2780</td>
    </tr>
    <tr>
      <th>2</th>
      <td>61001.0</td>
      <td>Ailano</td>
      <td>1605.560469</td>
      <td>Continuous urban fabric</td>
      <td>31.0972</td>
    </tr>
    <tr>
      <th>3</th>
      <td>61001.0</td>
      <td>Ailano</td>
      <td>1605.560469</td>
      <td>Land principally occupied by agriculture, with...</td>
      <td>188.9317</td>
    </tr>
    <tr>
      <th>4</th>
      <td>61001.0</td>
      <td>Ailano</td>
      <td>1605.560469</td>
      <td>Non-irrigated arable land</td>
      <td>752.7540</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>4543</th>
      <td>65158.0</td>
      <td>Bellizzi</td>
      <td>802.200746</td>
      <td>Continuous urban fabric</td>
      <td>93.9079</td>
    </tr>
    <tr>
      <th>4544</th>
      <td>65158.0</td>
      <td>Bellizzi</td>
      <td>802.200746</td>
      <td>Discontinuous urban fabric</td>
      <td>40.9309</td>
    </tr>
    <tr>
      <th>4545</th>
      <td>65158.0</td>
      <td>Bellizzi</td>
      <td>802.200746</td>
      <td>Fruit trees and berry plantations</td>
      <td>24.3220</td>
    </tr>
    <tr>
      <th>4546</th>
      <td>65158.0</td>
      <td>Bellizzi</td>
      <td>802.200746</td>
      <td>Non-irrigated arable land</td>
      <td>426.7024</td>
    </tr>
    <tr>
      <th>4547</th>
      <td>65158.0</td>
      <td>Bellizzi</td>
      <td>802.200746</td>
      <td>Vineyards</td>
      <td>33.8787</td>
    </tr>
  </tbody>
</table>
<p>4548 rows × 5 columns</p>
</div>
</div>
</div>
<section id="aree-artificiali" class="level3">
<h3 class="anchored" data-anchor-id="aree-artificiali">2.3.1 Aree artificiali</h3>
<p>I gruppi 1.1 ed 1.2 della CLC</p>
<div class="cell" data-execution_count="23">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"></span>
<span id="cb25-2"><span class="co" style="color: #5E5E5E;"># Dati 1990</span></span>
<span id="cb25-3">artificial_surface_1990 <span class="op" style="color: #5E5E5E;">=</span> focus_1990_group[focus_1990_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Continuous urban fabric'</span>, <span class="st" style="color: #20794D;">'Discontinuous urban fabric'</span>, <span class="st" style="color: #20794D;">'Industrial or commercial units'</span>, <span class="st" style="color: #20794D;">'Road and rail networks and associated land'</span>, <span class="st" style="color: #20794D;">'Port areas'</span>, <span class="st" style="color: #20794D;">'Airports'</span>])]</span>
<span id="cb25-4">artificial_surface_1990_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(artificial_surface_1990.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>])[<span class="st" style="color: #20794D;">'surface_ha_1990'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb25-5">artificial_surface_1990_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb25-6"></span>
<span id="cb25-7"><span class="co" style="color: #5E5E5E;"># Dati 2000</span></span>
<span id="cb25-8">artificial_surface_2000 <span class="op" style="color: #5E5E5E;">=</span> focus_2000_group[focus_2000_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Continuous urban fabric'</span>, <span class="st" style="color: #20794D;">'Discontinuous urban fabric'</span>, <span class="st" style="color: #20794D;">'Industrial or commercial units'</span>, <span class="st" style="color: #20794D;">'Road and rail networks and associated land'</span>, <span class="st" style="color: #20794D;">'Port areas'</span>, <span class="st" style="color: #20794D;">'Airports'</span>])]</span>
<span id="cb25-9">artificial_surface_2000_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(artificial_surface_2000.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2000'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb25-10">artificial_surface_2000_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb25-11"></span>
<span id="cb25-12"><span class="co" style="color: #5E5E5E;"># Dati 2006</span></span>
<span id="cb25-13">artificial_surface_2006 <span class="op" style="color: #5E5E5E;">=</span> focus_2006_group[focus_2006_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Continuous urban fabric'</span>, <span class="st" style="color: #20794D;">'Discontinuous urban fabric'</span>, <span class="st" style="color: #20794D;">'Industrial or commercial units'</span>, <span class="st" style="color: #20794D;">'Road and rail networks and associated land'</span>, <span class="st" style="color: #20794D;">'Port areas'</span>, <span class="st" style="color: #20794D;">'Airports'</span>])]</span>
<span id="cb25-14">artificial_surface_2006_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(artificial_surface_2006.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2006'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb25-15">artificial_surface_2006_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb25-16"></span>
<span id="cb25-17"><span class="co" style="color: #5E5E5E;"># Dati 2012</span></span>
<span id="cb25-18">artificial_surface_2012 <span class="op" style="color: #5E5E5E;">=</span> focus_2012_group[focus_2012_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Continuous urban fabric'</span>, <span class="st" style="color: #20794D;">'Discontinuous urban fabric'</span>, <span class="st" style="color: #20794D;">'Industrial or commercial units'</span>, <span class="st" style="color: #20794D;">'Road and rail networks and associated land'</span>, <span class="st" style="color: #20794D;">'Port areas'</span>, <span class="st" style="color: #20794D;">'Airports'</span>])]</span>
<span id="cb25-19">artificial_surface_2012_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(artificial_surface_2012.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2012'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb25-20">artificial_surface_2012_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb25-21"></span>
<span id="cb25-22"><span class="co" style="color: #5E5E5E;"># Dati 2018</span></span>
<span id="cb25-23">artificial_surface_2018 <span class="op" style="color: #5E5E5E;">=</span> focus_2018_group[focus_2018_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Continuous urban fabric'</span>, <span class="st" style="color: #20794D;">'Discontinuous urban fabric'</span>, <span class="st" style="color: #20794D;">'Industrial or commercial units'</span>, <span class="st" style="color: #20794D;">'Road and rail networks and associated land'</span>, <span class="st" style="color: #20794D;">'Port areas'</span>, <span class="st" style="color: #20794D;">'Airports'</span>])]</span>
<span id="cb25-24">artificial_surface_2018_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(artificial_surface_2018.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>, <span class="st" style="color: #20794D;">'comune'</span>, <span class="st" style="color: #20794D;">'sup_com_ha'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2018'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb25-25">artificial_surface_2018_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb25-26"></span>
<span id="cb25-27"><span class="co" style="color: #5E5E5E;"># Dati aggregati</span></span>
<span id="cb25-28">focus_artificial <span class="op" style="color: #5E5E5E;">=</span> [artificial_surface_2018_group, artificial_surface_2012_group, artificial_surface_2006_group, artificial_surface_2000_group, artificial_surface_1990_group]</span>
<span id="cb25-29">focus_artificial_df <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">reduce</span>(<span class="kw" style="color: #003B4F;">lambda</span>  left,right: pd.merge(left,right,on<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'pro_com'</span>], how<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'outer'</span>), focus_artificial)</span>
<span id="cb25-30">focus_artificial_df <span class="op" style="color: #5E5E5E;">=</span> focus_artificial_df[focus_artificial_df[<span class="st" style="color: #20794D;">'sup_com_ha'</span>] <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb25-31">focus_artificial_df.fillna(<span class="dv" style="color: #AD0000;">0</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb25-32">focus_artificial_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_1990'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_artificial_df.surface_ha_1990 <span class="op" style="color: #5E5E5E;">/</span> focus_artificial_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb25-33">focus_artificial_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_2000'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_artificial_df.surface_ha_2000 <span class="op" style="color: #5E5E5E;">/</span> focus_artificial_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb25-34">focus_artificial_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_2006'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_artificial_df.surface_ha_2006 <span class="op" style="color: #5E5E5E;">/</span> focus_artificial_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb25-35">focus_artificial_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">6</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_2012'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_artificial_df.surface_ha_2012 <span class="op" style="color: #5E5E5E;">/</span> focus_artificial_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb25-36">focus_artificial_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">7</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_2018'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_artificial_df.surface_ha_2018 <span class="op" style="color: #5E5E5E;">/</span> focus_artificial_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb25-37">focus_artificial_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">8</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Perc.Diff. | 2018-2000'</span>, value<span class="op" style="color: #5E5E5E;">=</span>(focus_artificial_df.perc_2018 <span class="op" style="color: #5E5E5E;">-</span> focus_artificial_df.perc_2000))</span>
<span id="cb25-38">focus_artificial_df.sort_values(by<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'Perc.Diff. | 2018-2000'</span>], ascending<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb25-39">focus_artificial_df</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="23">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>pro_com</th>
      <th>comune</th>
      <th>sup_com_ha</th>
      <th>perc_1990</th>
      <th>perc_2000</th>
      <th>perc_2006</th>
      <th>perc_2012</th>
      <th>perc_2018</th>
      <th>Perc.Diff. | 2018-2000</th>
      <th>surface_ha_2018</th>
      <th>surface_ha_2012</th>
      <th>surface_ha_2006</th>
      <th>surface_ha_2000</th>
      <th>surface_ha_1990</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>201</th>
      <td>63036.0</td>
      <td>Grumo Nevano</td>
      <td>287.688759</td>
      <td>47.45</td>
      <td>64.93</td>
      <td>64.93</td>
      <td>51.31</td>
      <td>51.31</td>
      <td>-13.62</td>
      <td>147.6065</td>
      <td>147.6065</td>
      <td>186.8019</td>
      <td>186.8019</td>
      <td>136.5066</td>
    </tr>
    <tr>
      <th>232</th>
      <td>63067.0</td>
      <td>San Giorgio a Cremano</td>
      <td>415.383936</td>
      <td>60.96</td>
      <td>76.57</td>
      <td>68.51</td>
      <td>68.51</td>
      <td>68.51</td>
      <td>-8.06</td>
      <td>284.5767</td>
      <td>284.5767</td>
      <td>284.5768</td>
      <td>318.0615</td>
      <td>253.2174</td>
    </tr>
    <tr>
      <th>197</th>
      <td>63032.0</td>
      <td>Frattamaggiore</td>
      <td>538.816178</td>
      <td>58.54</td>
      <td>71.14</td>
      <td>72.46</td>
      <td>63.97</td>
      <td>63.97</td>
      <td>-7.17</td>
      <td>344.6705</td>
      <td>344.6705</td>
      <td>390.4469</td>
      <td>383.2980</td>
      <td>315.4185</td>
    </tr>
    <tr>
      <th>476</th>
      <td>65121.0</td>
      <td>San Mango Piemonte</td>
      <td>602.370147</td>
      <td>7.81</td>
      <td>7.81</td>
      <td>3.14</td>
      <td>3.14</td>
      <td>3.14</td>
      <td>-4.67</td>
      <td>18.8890</td>
      <td>18.8890</td>
      <td>18.8890</td>
      <td>47.0198</td>
      <td>47.0222</td>
    </tr>
    <tr>
      <th>137</th>
      <td>62046.0</td>
      <td>Pago Veiano</td>
      <td>2374.895020</td>
      <td>1.83</td>
      <td>5.24</td>
      <td>2.13</td>
      <td>2.13</td>
      <td>2.13</td>
      <td>-3.11</td>
      <td>50.6037</td>
      <td>50.6037</td>
      <td>50.6037</td>
      <td>124.5097</td>
      <td>43.5550</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>228</th>
      <td>63063.0</td>
      <td>Quarto</td>
      <td>1415.896056</td>
      <td>24.40</td>
      <td>24.95</td>
      <td>26.90</td>
      <td>39.26</td>
      <td>39.26</td>
      <td>14.31</td>
      <td>555.9065</td>
      <td>555.9065</td>
      <td>380.8373</td>
      <td>353.2075</td>
      <td>345.4612</td>
    </tr>
    <tr>
      <th>254</th>
      <td>63089.0</td>
      <td>Volla</td>
      <td>620.630205</td>
      <td>45.68</td>
      <td>49.86</td>
      <td>49.94</td>
      <td>64.34</td>
      <td>64.34</td>
      <td>14.48</td>
      <td>399.3008</td>
      <td>399.3008</td>
      <td>309.9351</td>
      <td>309.4482</td>
      <td>283.5034</td>
    </tr>
    <tr>
      <th>212</th>
      <td>63047.0</td>
      <td>Monte di Procida</td>
      <td>370.428037</td>
      <td>31.25</td>
      <td>31.25</td>
      <td>31.25</td>
      <td>48.28</td>
      <td>48.28</td>
      <td>17.03</td>
      <td>178.8412</td>
      <td>178.8412</td>
      <td>115.7459</td>
      <td>115.7458</td>
      <td>115.7439</td>
    </tr>
    <tr>
      <th>190</th>
      <td>63025.0</td>
      <td>Castello di Cisterna</td>
      <td>392.135970</td>
      <td>21.89</td>
      <td>46.04</td>
      <td>68.31</td>
      <td>68.31</td>
      <td>68.31</td>
      <td>22.27</td>
      <td>267.8514</td>
      <td>267.8514</td>
      <td>267.8514</td>
      <td>180.5292</td>
      <td>85.8311</td>
    </tr>
    <tr>
      <th>380</th>
      <td>65011.0</td>
      <td>Atrani</td>
      <td>12.061182</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>52.01</td>
      <td>52.01</td>
      <td>52.01</td>
      <td>52.01</td>
      <td>6.2730</td>
      <td>6.2730</td>
      <td>6.2730</td>
      <td>0.0000</td>
      <td>0.0000</td>
    </tr>
  </tbody>
</table>
<p>507 rows × 14 columns</p>
</div>
</div>
</div>
<div class="cell" data-execution_count="24">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;"># Superfici in arretramento</span></span>
<span id="cb26-2">reduction_artificial_area <span class="op" style="color: #5E5E5E;">=</span> focus_artificial_df.iloc[<span class="dv" style="color: #AD0000;">0</span>:<span class="dv" style="color: #AD0000;">10</span>]</span>
<span id="cb26-3">reduction_artificial_area</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="24">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>pro_com</th>
      <th>comune</th>
      <th>sup_com_ha</th>
      <th>perc_1990</th>
      <th>perc_2000</th>
      <th>perc_2006</th>
      <th>perc_2012</th>
      <th>perc_2018</th>
      <th>Perc.Diff. | 2018-2000</th>
      <th>surface_ha_2018</th>
      <th>surface_ha_2012</th>
      <th>surface_ha_2006</th>
      <th>surface_ha_2000</th>
      <th>surface_ha_1990</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>201</th>
      <td>63036.0</td>
      <td>Grumo Nevano</td>
      <td>287.688759</td>
      <td>47.45</td>
      <td>64.93</td>
      <td>64.93</td>
      <td>51.31</td>
      <td>51.31</td>
      <td>-13.62</td>
      <td>147.6065</td>
      <td>147.6065</td>
      <td>186.8019</td>
      <td>186.8019</td>
      <td>136.5066</td>
    </tr>
    <tr>
      <th>232</th>
      <td>63067.0</td>
      <td>San Giorgio a Cremano</td>
      <td>415.383936</td>
      <td>60.96</td>
      <td>76.57</td>
      <td>68.51</td>
      <td>68.51</td>
      <td>68.51</td>
      <td>-8.06</td>
      <td>284.5767</td>
      <td>284.5767</td>
      <td>284.5768</td>
      <td>318.0615</td>
      <td>253.2174</td>
    </tr>
    <tr>
      <th>197</th>
      <td>63032.0</td>
      <td>Frattamaggiore</td>
      <td>538.816178</td>
      <td>58.54</td>
      <td>71.14</td>
      <td>72.46</td>
      <td>63.97</td>
      <td>63.97</td>
      <td>-7.17</td>
      <td>344.6705</td>
      <td>344.6705</td>
      <td>390.4469</td>
      <td>383.2980</td>
      <td>315.4185</td>
    </tr>
    <tr>
      <th>476</th>
      <td>65121.0</td>
      <td>San Mango Piemonte</td>
      <td>602.370147</td>
      <td>7.81</td>
      <td>7.81</td>
      <td>3.14</td>
      <td>3.14</td>
      <td>3.14</td>
      <td>-4.67</td>
      <td>18.8890</td>
      <td>18.8890</td>
      <td>18.8890</td>
      <td>47.0198</td>
      <td>47.0222</td>
    </tr>
    <tr>
      <th>137</th>
      <td>62046.0</td>
      <td>Pago Veiano</td>
      <td>2374.895020</td>
      <td>1.83</td>
      <td>5.24</td>
      <td>2.13</td>
      <td>2.13</td>
      <td>2.13</td>
      <td>-3.11</td>
      <td>50.6037</td>
      <td>50.6037</td>
      <td>50.6037</td>
      <td>124.5097</td>
      <td>43.5550</td>
    </tr>
    <tr>
      <th>485</th>
      <td>65132.0</td>
      <td>San Valentino Torio</td>
      <td>915.632363</td>
      <td>15.51</td>
      <td>15.56</td>
      <td>13.27</td>
      <td>13.27</td>
      <td>13.27</td>
      <td>-2.29</td>
      <td>121.4587</td>
      <td>121.4587</td>
      <td>121.4588</td>
      <td>142.4372</td>
      <td>141.9949</td>
    </tr>
    <tr>
      <th>4</th>
      <td>61005.0</td>
      <td>Aversa</td>
      <td>885.176217</td>
      <td>59.33</td>
      <td>67.87</td>
      <td>67.96</td>
      <td>66.24</td>
      <td>66.24</td>
      <td>-1.63</td>
      <td>586.3294</td>
      <td>586.3294</td>
      <td>601.5394</td>
      <td>600.7846</td>
      <td>525.1697</td>
    </tr>
    <tr>
      <th>170</th>
      <td>63005.0</td>
      <td>Arzano</td>
      <td>473.103075</td>
      <td>83.22</td>
      <td>86.97</td>
      <td>87.40</td>
      <td>85.42</td>
      <td>85.42</td>
      <td>-1.55</td>
      <td>404.1348</td>
      <td>404.1348</td>
      <td>413.4904</td>
      <td>411.4785</td>
      <td>393.7116</td>
    </tr>
    <tr>
      <th>474</th>
      <td>65119.0</td>
      <td>San Giovanni a Piro</td>
      <td>3790.148485</td>
      <td>2.12</td>
      <td>4.21</td>
      <td>2.72</td>
      <td>2.72</td>
      <td>2.72</td>
      <td>-1.49</td>
      <td>103.0783</td>
      <td>103.0783</td>
      <td>103.0783</td>
      <td>159.6782</td>
      <td>80.3555</td>
    </tr>
    <tr>
      <th>57</th>
      <td>61067.0</td>
      <td>Recale</td>
      <td>321.954739</td>
      <td>32.81</td>
      <td>32.81</td>
      <td>31.54</td>
      <td>31.54</td>
      <td>31.54</td>
      <td>-1.27</td>
      <td>101.5467</td>
      <td>101.5467</td>
      <td>101.5467</td>
      <td>105.6199</td>
      <td>105.6193</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="25">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;"># Superfici in avanzamento</span></span>
<span id="cb27-2">increase_artificial_area <span class="op" style="color: #5E5E5E;">=</span> focus_artificial_df.iloc[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">10</span>:]</span>
<span id="cb27-3">increase_artificial_area.sort_values(by<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'Perc.Diff. | 2018-2000'</span>], ascending<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb27-4">increase_artificial_area</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="25">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>pro_com</th>
      <th>comune</th>
      <th>sup_com_ha</th>
      <th>perc_1990</th>
      <th>perc_2000</th>
      <th>perc_2006</th>
      <th>perc_2012</th>
      <th>perc_2018</th>
      <th>Perc.Diff. | 2018-2000</th>
      <th>surface_ha_2018</th>
      <th>surface_ha_2012</th>
      <th>surface_ha_2006</th>
      <th>surface_ha_2000</th>
      <th>surface_ha_1990</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>380</th>
      <td>65011.0</td>
      <td>Atrani</td>
      <td>12.061182</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>52.01</td>
      <td>52.01</td>
      <td>52.01</td>
      <td>52.01</td>
      <td>6.2730</td>
      <td>6.2730</td>
      <td>6.2730</td>
      <td>0.0000</td>
      <td>0.0000</td>
    </tr>
    <tr>
      <th>190</th>
      <td>63025.0</td>
      <td>Castello di Cisterna</td>
      <td>392.135970</td>
      <td>21.89</td>
      <td>46.04</td>
      <td>68.31</td>
      <td>68.31</td>
      <td>68.31</td>
      <td>22.27</td>
      <td>267.8514</td>
      <td>267.8514</td>
      <td>267.8514</td>
      <td>180.5292</td>
      <td>85.8311</td>
    </tr>
    <tr>
      <th>212</th>
      <td>63047.0</td>
      <td>Monte di Procida</td>
      <td>370.428037</td>
      <td>31.25</td>
      <td>31.25</td>
      <td>31.25</td>
      <td>48.28</td>
      <td>48.28</td>
      <td>17.03</td>
      <td>178.8412</td>
      <td>178.8412</td>
      <td>115.7459</td>
      <td>115.7458</td>
      <td>115.7439</td>
    </tr>
    <tr>
      <th>254</th>
      <td>63089.0</td>
      <td>Volla</td>
      <td>620.630205</td>
      <td>45.68</td>
      <td>49.86</td>
      <td>49.94</td>
      <td>64.34</td>
      <td>64.34</td>
      <td>14.48</td>
      <td>399.3008</td>
      <td>399.3008</td>
      <td>309.9351</td>
      <td>309.4482</td>
      <td>283.5034</td>
    </tr>
    <tr>
      <th>228</th>
      <td>63063.0</td>
      <td>Quarto</td>
      <td>1415.896056</td>
      <td>24.40</td>
      <td>24.95</td>
      <td>26.90</td>
      <td>39.26</td>
      <td>39.26</td>
      <td>14.31</td>
      <td>555.9065</td>
      <td>555.9065</td>
      <td>380.8373</td>
      <td>353.2075</td>
      <td>345.4612</td>
    </tr>
    <tr>
      <th>82</th>
      <td>61094.0</td>
      <td>Trentola Ducenta</td>
      <td>665.513019</td>
      <td>30.18</td>
      <td>30.19</td>
      <td>31.44</td>
      <td>44.05</td>
      <td>44.05</td>
      <td>13.86</td>
      <td>293.1760</td>
      <td>293.1760</td>
      <td>209.2403</td>
      <td>200.8859</td>
      <td>200.8848</td>
    </tr>
    <tr>
      <th>15</th>
      <td>61016.0</td>
      <td>Carinaro</td>
      <td>631.593670</td>
      <td>28.55</td>
      <td>34.93</td>
      <td>44.25</td>
      <td>47.41</td>
      <td>47.41</td>
      <td>12.48</td>
      <td>299.4077</td>
      <td>299.4077</td>
      <td>279.4878</td>
      <td>220.6269</td>
      <td>180.3185</td>
    </tr>
    <tr>
      <th>80</th>
      <td>61092.0</td>
      <td>Teverola</td>
      <td>669.906081</td>
      <td>31.59</td>
      <td>37.22</td>
      <td>50.70</td>
      <td>48.78</td>
      <td>48.78</td>
      <td>11.56</td>
      <td>326.7535</td>
      <td>326.7535</td>
      <td>339.6324</td>
      <td>249.3457</td>
      <td>211.6063</td>
    </tr>
    <tr>
      <th>188</th>
      <td>63023.0</td>
      <td>Casoria</td>
      <td>1213.840286</td>
      <td>57.66</td>
      <td>72.14</td>
      <td>72.14</td>
      <td>83.48</td>
      <td>83.48</td>
      <td>11.34</td>
      <td>1013.2593</td>
      <td>1013.2593</td>
      <td>875.7210</td>
      <td>875.7214</td>
      <td>699.8511</td>
    </tr>
    <tr>
      <th>123</th>
      <td>62032.0</td>
      <td>Forchia</td>
      <td>545.454120</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>11.00</td>
      <td>11.00</td>
      <td>11.00</td>
      <td>59.9761</td>
      <td>59.9761</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="26">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">artificial_df <span class="op" style="color: #5E5E5E;">=</span> pd.concat([reduction_artificial_area, increase_artificial_area])</span>
<span id="cb28-2">artificial_df.sort_values(by<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'Perc.Diff. | 2018-2000'</span>], ascending<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb28-3">artificial_df <span class="op" style="color: #5E5E5E;">=</span> artificial_df[[<span class="st" style="color: #20794D;">'comune'</span>, <span class="st" style="color: #20794D;">'Perc.Diff. | 2018-2000'</span>]]</span>
<span id="cb28-4">artificial_df[<span class="st" style="color: #20794D;">'Perc.Diff. | 2018-2000'</span>] <span class="op" style="color: #5E5E5E;">=</span> artificial_df[<span class="st" style="color: #20794D;">'Perc.Diff. | 2018-2000'</span>]</span>
<span id="cb28-5">artificial_df.set_index(<span class="st" style="color: #20794D;">'comune'</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb28-6"></span>
<span id="cb28-7">fig_artificial <span class="op" style="color: #5E5E5E;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">10</span>), dpi<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb28-8">sub_fig_artificial <span class="op" style="color: #5E5E5E;">=</span> GridSpec(nrows<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, ncols<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, figure<span class="op" style="color: #5E5E5E;">=</span>fig_artificial, hspace<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.35</span>)</span>
<span id="cb28-9">ax_artificial <span class="op" style="color: #5E5E5E;">=</span> fig_artificial.add_subplot(sub_fig_artificial[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb28-10">artificial_df.plot.bar(ax<span class="op" style="color: #5E5E5E;">=</span>ax_artificial, rot<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb28-11"></span>
<span id="cb28-12">ax_artificial.yaxis.set_label_text(<span class="st" style="color: #20794D;">'%'</span>)</span>
<span id="cb28-13">ax_artificial.set_xlabel(<span class="st" style="color: #20794D;">''</span>)</span>
<span id="cb28-14">ax_artificial.grid(color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'lightgrey'</span>, linestyle<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'dashdot'</span>)</span>
<span id="cb28-15"></span>
<span id="cb28-16">plt.xticks(rotation <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">90</span>)</span>
<span id="cb28-17">plt.legend(loc<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'best'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="26">
<pre><code>&lt;matplotlib.legend.Legend at 0x7fe2d646e0d0&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://pygisblog.massimilianomoraca.me/posts/2022-08-26/analisi-della-copertura-del-suolo-in-italia_files/figure-html/cell-26-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>Onestamente non so come interpretare l’arretramento delle aree artificiali, andrebbe fatta una ulteriore analisi per valutare se sono Comuni che si sono spopolati in quasi trenta anni.</p>
<p>L’aumento è abbastanza facile da indagare per me che sono del posto. Napoli ha una popolazione di quasi un milione di abitanti che triplica nei giorni feriali, per non parlare poi dei turisti. E’ un’area molto congestionata con possibilità di nuova edilizia prossime allo zero; risulta normale quindi che Comuni più prossimi al Capoluogo di Regione stiano accogliendo “l’esubero” di popolazione. Faccio riferimento a Castello di Cisterna, Volla e Quarto.</p>
<p>Il caso di <a href="https://it.wikipedia.org/wiki/Atrani">Atrani</a> è particolare perchè è il Comune più piccolo d’Italia ed è posto in una zona abbastanza impervia della costiera amalfitana; è probabile che nel 2000 non si sia data molta importanza all’area.</p>
</section>
<section id="aree-forestate" class="level3">
<h3 class="anchored" data-anchor-id="aree-forestate">2.3.2 Aree forestate</h3>
<p>Il gruppo 3.1 della CLC</p>
<div class="cell" data-execution_count="27">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"></span>
<span id="cb30-2"><span class="co" style="color: #5E5E5E;"># Dati 1990</span></span>
<span id="cb30-3">forest_surface_1990 <span class="op" style="color: #5E5E5E;">=</span> focus_1990_group[focus_1990_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Broad-leaved forest'</span>, <span class="st" style="color: #20794D;">'Coniferous forest'</span>, <span class="st" style="color: #20794D;">'Mixed forest'</span>])]</span>
<span id="cb30-4">forest_surface_1990_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(forest_surface_1990.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>])[<span class="st" style="color: #20794D;">'surface_ha_1990'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb30-5">forest_surface_1990_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb30-6"></span>
<span id="cb30-7"><span class="co" style="color: #5E5E5E;"># Dati 2000</span></span>
<span id="cb30-8">forest_surface_2000 <span class="op" style="color: #5E5E5E;">=</span> focus_2000_group[focus_2000_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Broad-leaved forest'</span>, <span class="st" style="color: #20794D;">'Coniferous forest'</span>, <span class="st" style="color: #20794D;">'Mixed forest'</span>])]</span>
<span id="cb30-9">forest_surface_2000_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(forest_surface_2000.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2000'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb30-10">forest_surface_2000_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb30-11"></span>
<span id="cb30-12"><span class="co" style="color: #5E5E5E;"># Dati 2006</span></span>
<span id="cb30-13">forest_surface_2006 <span class="op" style="color: #5E5E5E;">=</span> focus_2006_group[focus_2006_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Broad-leaved forest'</span>, <span class="st" style="color: #20794D;">'Coniferous forest'</span>, <span class="st" style="color: #20794D;">'Mixed forest'</span>])]</span>
<span id="cb30-14">forest_surface_2006_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(forest_surface_2006.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2006'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb30-15">forest_surface_2006_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb30-16"></span>
<span id="cb30-17"><span class="co" style="color: #5E5E5E;"># Dati 2012</span></span>
<span id="cb30-18">forest_surface_2012 <span class="op" style="color: #5E5E5E;">=</span> focus_2012_group[focus_2012_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Broad-leaved forest'</span>, <span class="st" style="color: #20794D;">'Coniferous forest'</span>, <span class="st" style="color: #20794D;">'Mixed forest'</span>])]</span>
<span id="cb30-19">forest_surface_2012_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(forest_surface_2012.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2012'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb30-20">forest_surface_2012_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb30-21"></span>
<span id="cb30-22"><span class="co" style="color: #5E5E5E;"># Dati 2018</span></span>
<span id="cb30-23">forest_surface_2018 <span class="op" style="color: #5E5E5E;">=</span> focus_2018_group[focus_2018_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Broad-leaved forest'</span>, <span class="st" style="color: #20794D;">'Coniferous forest'</span>, <span class="st" style="color: #20794D;">'Mixed forest'</span>])]</span>
<span id="cb30-24">forest_surface_2018_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(forest_surface_2018.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>, <span class="st" style="color: #20794D;">'comune'</span>, <span class="st" style="color: #20794D;">'sup_com_ha'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2018'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb30-25">forest_surface_2018_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb30-26"></span>
<span id="cb30-27"><span class="co" style="color: #5E5E5E;"># Dati aggregati</span></span>
<span id="cb30-28">focus_forest <span class="op" style="color: #5E5E5E;">=</span> [forest_surface_2018_group, forest_surface_2012_group, forest_surface_2006_group, forest_surface_2000_group, forest_surface_1990_group]</span>
<span id="cb30-29">focus_forest_df <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">reduce</span>(<span class="kw" style="color: #003B4F;">lambda</span>  left,right: pd.merge(left,right,on<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'pro_com'</span>], how<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'outer'</span>), focus_forest)</span>
<span id="cb30-30">focus_forest_df <span class="op" style="color: #5E5E5E;">=</span> focus_forest_df[focus_forest_df[<span class="st" style="color: #20794D;">'sup_com_ha'</span>] <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb30-31">focus_forest_df.fillna(<span class="dv" style="color: #AD0000;">0</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb30-32">focus_forest_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_1990'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_forest_df.surface_ha_1990 <span class="op" style="color: #5E5E5E;">/</span> focus_forest_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb30-33">focus_forest_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_2000'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_forest_df.surface_ha_2000 <span class="op" style="color: #5E5E5E;">/</span> focus_forest_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb30-34">focus_forest_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_2006'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_forest_df.surface_ha_2006 <span class="op" style="color: #5E5E5E;">/</span> focus_forest_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb30-35">focus_forest_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">6</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_2012'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_forest_df.surface_ha_2012 <span class="op" style="color: #5E5E5E;">/</span> focus_forest_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb30-36">focus_forest_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">7</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_2018'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_forest_df.surface_ha_2018 <span class="op" style="color: #5E5E5E;">/</span> focus_forest_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb30-37">focus_forest_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">8</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Perc.Diff. | 2018-2000'</span>, value<span class="op" style="color: #5E5E5E;">=</span>(focus_forest_df.perc_2018 <span class="op" style="color: #5E5E5E;">-</span> focus_forest_df.perc_2000))</span>
<span id="cb30-38">focus_forest_df.sort_values(by<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'Perc.Diff. | 2018-2000'</span>], ascending<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb30-39">focus_forest_df</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="27">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>pro_com</th>
      <th>comune</th>
      <th>sup_com_ha</th>
      <th>perc_1990</th>
      <th>perc_2000</th>
      <th>perc_2006</th>
      <th>perc_2012</th>
      <th>perc_2018</th>
      <th>Perc.Diff. | 2018-2000</th>
      <th>surface_ha_2018</th>
      <th>surface_ha_2012</th>
      <th>surface_ha_2006</th>
      <th>surface_ha_2000</th>
      <th>surface_ha_1990</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>139</th>
      <td>62073.0</td>
      <td>Solopaca</td>
      <td>3112.664003</td>
      <td>43.63</td>
      <td>43.63</td>
      <td>43.46</td>
      <td>11.69</td>
      <td>11.69</td>
      <td>-31.94</td>
      <td>363.9901</td>
      <td>363.9901</td>
      <td>1352.7210</td>
      <td>1358.0359</td>
      <td>1358.0275</td>
    </tr>
    <tr>
      <th>143</th>
      <td>62077.0</td>
      <td>Vitulano</td>
      <td>3599.050416</td>
      <td>50.86</td>
      <td>50.81</td>
      <td>50.81</td>
      <td>26.82</td>
      <td>26.82</td>
      <td>-23.99</td>
      <td>965.1276</td>
      <td>965.1276</td>
      <td>1828.5273</td>
      <td>1828.5272</td>
      <td>1830.3353</td>
    </tr>
    <tr>
      <th>410</th>
      <td>65115.0</td>
      <td>Salento</td>
      <td>2378.507005</td>
      <td>51.73</td>
      <td>50.93</td>
      <td>37.94</td>
      <td>37.93</td>
      <td>37.93</td>
      <td>-13.00</td>
      <td>902.2741</td>
      <td>902.2741</td>
      <td>902.4736</td>
      <td>1211.3768</td>
      <td>1230.4272</td>
    </tr>
    <tr>
      <th>179</th>
      <td>63082.0</td>
      <td>Terzigno</td>
      <td>2346.480829</td>
      <td>20.68</td>
      <td>20.68</td>
      <td>20.68</td>
      <td>20.68</td>
      <td>8.01</td>
      <td>-12.67</td>
      <td>187.8420</td>
      <td>485.2334</td>
      <td>485.2333</td>
      <td>485.2338</td>
      <td>485.2356</td>
    </tr>
    <tr>
      <th>147</th>
      <td>63007.0</td>
      <td>Barano d'Ischia</td>
      <td>1096.089426</td>
      <td>49.21</td>
      <td>49.21</td>
      <td>49.21</td>
      <td>38.59</td>
      <td>38.59</td>
      <td>-10.62</td>
      <td>422.9915</td>
      <td>422.9915</td>
      <td>539.3662</td>
      <td>539.3660</td>
      <td>539.3685</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>439</th>
      <td>65147.0</td>
      <td>Torchiara</td>
      <td>846.167482</td>
      <td>20.76</td>
      <td>20.76</td>
      <td>20.86</td>
      <td>29.14</td>
      <td>29.14</td>
      <td>8.38</td>
      <td>246.5860</td>
      <td>246.5860</td>
      <td>176.5072</td>
      <td>175.6504</td>
      <td>175.6495</td>
    </tr>
    <tr>
      <th>436</th>
      <td>65144.0</td>
      <td>Stella Cilento</td>
      <td>1451.726154</td>
      <td>39.51</td>
      <td>43.25</td>
      <td>43.25</td>
      <td>52.64</td>
      <td>52.64</td>
      <td>9.39</td>
      <td>764.2043</td>
      <td>764.2043</td>
      <td>627.8681</td>
      <td>627.8690</td>
      <td>573.5525</td>
    </tr>
    <tr>
      <th>393</th>
      <td>65098.0</td>
      <td>Pollica</td>
      <td>2816.525386</td>
      <td>11.44</td>
      <td>17.14</td>
      <td>17.15</td>
      <td>27.01</td>
      <td>27.01</td>
      <td>9.87</td>
      <td>760.6785</td>
      <td>760.6785</td>
      <td>482.9555</td>
      <td>482.8660</td>
      <td>322.2088</td>
    </tr>
    <tr>
      <th>359</th>
      <td>65064.0</td>
      <td>Lustra</td>
      <td>1524.153297</td>
      <td>34.01</td>
      <td>34.02</td>
      <td>34.02</td>
      <td>44.61</td>
      <td>44.61</td>
      <td>10.59</td>
      <td>679.9189</td>
      <td>679.9189</td>
      <td>518.4959</td>
      <td>518.4971</td>
      <td>518.4368</td>
    </tr>
    <tr>
      <th>408</th>
      <td>65113.0</td>
      <td>Sacco</td>
      <td>2365.702940</td>
      <td>42.11</td>
      <td>42.02</td>
      <td>42.02</td>
      <td>63.01</td>
      <td>63.01</td>
      <td>20.99</td>
      <td>1490.6391</td>
      <td>1490.6391</td>
      <td>994.0414</td>
      <td>994.0408</td>
      <td>996.2456</td>
    </tr>
  </tbody>
</table>
<p>450 rows × 14 columns</p>
</div>
</div>
</div>
<div class="cell" data-execution_count="28">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="co" style="color: #5E5E5E;"># Superfici in arretramento</span></span>
<span id="cb31-2">reduction_forest_area <span class="op" style="color: #5E5E5E;">=</span> focus_forest_df.iloc[<span class="dv" style="color: #AD0000;">0</span>:<span class="dv" style="color: #AD0000;">10</span>]</span>
<span id="cb31-3">reduction_forest_area</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="28">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>pro_com</th>
      <th>comune</th>
      <th>sup_com_ha</th>
      <th>perc_1990</th>
      <th>perc_2000</th>
      <th>perc_2006</th>
      <th>perc_2012</th>
      <th>perc_2018</th>
      <th>Perc.Diff. | 2018-2000</th>
      <th>surface_ha_2018</th>
      <th>surface_ha_2012</th>
      <th>surface_ha_2006</th>
      <th>surface_ha_2000</th>
      <th>surface_ha_1990</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>139</th>
      <td>62073.0</td>
      <td>Solopaca</td>
      <td>3112.664003</td>
      <td>43.63</td>
      <td>43.63</td>
      <td>43.46</td>
      <td>11.69</td>
      <td>11.69</td>
      <td>-31.94</td>
      <td>363.9901</td>
      <td>363.9901</td>
      <td>1352.7210</td>
      <td>1358.0359</td>
      <td>1358.0275</td>
    </tr>
    <tr>
      <th>143</th>
      <td>62077.0</td>
      <td>Vitulano</td>
      <td>3599.050416</td>
      <td>50.86</td>
      <td>50.81</td>
      <td>50.81</td>
      <td>26.82</td>
      <td>26.82</td>
      <td>-23.99</td>
      <td>965.1276</td>
      <td>965.1276</td>
      <td>1828.5273</td>
      <td>1828.5272</td>
      <td>1830.3353</td>
    </tr>
    <tr>
      <th>410</th>
      <td>65115.0</td>
      <td>Salento</td>
      <td>2378.507005</td>
      <td>51.73</td>
      <td>50.93</td>
      <td>37.94</td>
      <td>37.93</td>
      <td>37.93</td>
      <td>-13.00</td>
      <td>902.2741</td>
      <td>902.2741</td>
      <td>902.4736</td>
      <td>1211.3768</td>
      <td>1230.4272</td>
    </tr>
    <tr>
      <th>179</th>
      <td>63082.0</td>
      <td>Terzigno</td>
      <td>2346.480829</td>
      <td>20.68</td>
      <td>20.68</td>
      <td>20.68</td>
      <td>20.68</td>
      <td>8.01</td>
      <td>-12.67</td>
      <td>187.8420</td>
      <td>485.2334</td>
      <td>485.2333</td>
      <td>485.2338</td>
      <td>485.2356</td>
    </tr>
    <tr>
      <th>147</th>
      <td>63007.0</td>
      <td>Barano d'Ischia</td>
      <td>1096.089426</td>
      <td>49.21</td>
      <td>49.21</td>
      <td>49.21</td>
      <td>38.59</td>
      <td>38.59</td>
      <td>-10.62</td>
      <td>422.9915</td>
      <td>422.9915</td>
      <td>539.3662</td>
      <td>539.3660</td>
      <td>539.3685</td>
    </tr>
    <tr>
      <th>304</th>
      <td>65006.0</td>
      <td>Amalfi</td>
      <td>570.014402</td>
      <td>48.51</td>
      <td>48.51</td>
      <td>38.86</td>
      <td>38.86</td>
      <td>38.86</td>
      <td>-9.65</td>
      <td>221.4838</td>
      <td>221.4838</td>
      <td>221.4838</td>
      <td>276.5111</td>
      <td>276.5144</td>
    </tr>
    <tr>
      <th>170</th>
      <td>63064.0</td>
      <td>Ercolano</td>
      <td>1989.359843</td>
      <td>21.47</td>
      <td>21.26</td>
      <td>21.26</td>
      <td>17.39</td>
      <td>11.75</td>
      <td>-9.51</td>
      <td>233.6730</td>
      <td>345.9226</td>
      <td>422.9398</td>
      <td>422.9397</td>
      <td>427.1795</td>
    </tr>
    <tr>
      <th>155</th>
      <td>63035.0</td>
      <td>Gragnano</td>
      <td>1464.244074</td>
      <td>53.35</td>
      <td>53.35</td>
      <td>52.42</td>
      <td>44.07</td>
      <td>44.07</td>
      <td>-9.28</td>
      <td>645.3063</td>
      <td>645.3063</td>
      <td>767.6083</td>
      <td>781.1773</td>
      <td>781.1751</td>
    </tr>
    <tr>
      <th>159</th>
      <td>63041.0</td>
      <td>Marano di Napoli</td>
      <td>1565.253641</td>
      <td>13.09</td>
      <td>13.09</td>
      <td>13.09</td>
      <td>3.98</td>
      <td>3.98</td>
      <td>-9.11</td>
      <td>62.3734</td>
      <td>62.3734</td>
      <td>204.9146</td>
      <td>204.9145</td>
      <td>204.9150</td>
    </tr>
    <tr>
      <th>183</th>
      <td>63091.0</td>
      <td>Trecase</td>
      <td>621.312671</td>
      <td>8.86</td>
      <td>8.86</td>
      <td>8.86</td>
      <td>8.86</td>
      <td>0.08</td>
      <td>-8.78</td>
      <td>0.4777</td>
      <td>55.0368</td>
      <td>55.0368</td>
      <td>55.0368</td>
      <td>55.0371</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="29">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="co" style="color: #5E5E5E;"># Superfici in avanzamento</span></span>
<span id="cb32-2">increase_forest_area <span class="op" style="color: #5E5E5E;">=</span> focus_forest_df.iloc[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">10</span>:]</span>
<span id="cb32-3">increase_forest_area.sort_values(by<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'Perc.Diff. | 2018-2000'</span>], ascending<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb32-4">increase_forest_area</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="29">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>pro_com</th>
      <th>comune</th>
      <th>sup_com_ha</th>
      <th>perc_1990</th>
      <th>perc_2000</th>
      <th>perc_2006</th>
      <th>perc_2012</th>
      <th>perc_2018</th>
      <th>Perc.Diff. | 2018-2000</th>
      <th>surface_ha_2018</th>
      <th>surface_ha_2012</th>
      <th>surface_ha_2006</th>
      <th>surface_ha_2000</th>
      <th>surface_ha_1990</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>408</th>
      <td>65113.0</td>
      <td>Sacco</td>
      <td>2365.702940</td>
      <td>42.11</td>
      <td>42.02</td>
      <td>42.02</td>
      <td>63.01</td>
      <td>63.01</td>
      <td>20.99</td>
      <td>1490.6391</td>
      <td>1490.6391</td>
      <td>994.0414</td>
      <td>994.0408</td>
      <td>996.2456</td>
    </tr>
    <tr>
      <th>359</th>
      <td>65064.0</td>
      <td>Lustra</td>
      <td>1524.153297</td>
      <td>34.01</td>
      <td>34.02</td>
      <td>34.02</td>
      <td>44.61</td>
      <td>44.61</td>
      <td>10.59</td>
      <td>679.9189</td>
      <td>679.9189</td>
      <td>518.4959</td>
      <td>518.4971</td>
      <td>518.4368</td>
    </tr>
    <tr>
      <th>393</th>
      <td>65098.0</td>
      <td>Pollica</td>
      <td>2816.525386</td>
      <td>11.44</td>
      <td>17.14</td>
      <td>17.15</td>
      <td>27.01</td>
      <td>27.01</td>
      <td>9.87</td>
      <td>760.6785</td>
      <td>760.6785</td>
      <td>482.9555</td>
      <td>482.8660</td>
      <td>322.2088</td>
    </tr>
    <tr>
      <th>436</th>
      <td>65144.0</td>
      <td>Stella Cilento</td>
      <td>1451.726154</td>
      <td>39.51</td>
      <td>43.25</td>
      <td>43.25</td>
      <td>52.64</td>
      <td>52.64</td>
      <td>9.39</td>
      <td>764.2043</td>
      <td>764.2043</td>
      <td>627.8681</td>
      <td>627.8690</td>
      <td>573.5525</td>
    </tr>
    <tr>
      <th>439</th>
      <td>65147.0</td>
      <td>Torchiara</td>
      <td>846.167482</td>
      <td>20.76</td>
      <td>20.76</td>
      <td>20.86</td>
      <td>29.14</td>
      <td>29.14</td>
      <td>8.38</td>
      <td>246.5860</td>
      <td>246.5860</td>
      <td>176.5072</td>
      <td>175.6504</td>
      <td>175.6495</td>
    </tr>
    <tr>
      <th>405</th>
      <td>65110.0</td>
      <td>Romagnano al Monte</td>
      <td>966.995480</td>
      <td>18.35</td>
      <td>18.35</td>
      <td>18.35</td>
      <td>26.64</td>
      <td>26.64</td>
      <td>8.29</td>
      <td>257.5984</td>
      <td>257.5984</td>
      <td>177.4251</td>
      <td>177.4254</td>
      <td>177.4249</td>
    </tr>
    <tr>
      <th>151</th>
      <td>63022.0</td>
      <td>Casola di Napoli</td>
      <td>259.318212</td>
      <td>34.28</td>
      <td>34.28</td>
      <td>42.15</td>
      <td>42.15</td>
      <td>42.15</td>
      <td>7.87</td>
      <td>109.3078</td>
      <td>109.3078</td>
      <td>109.3078</td>
      <td>88.8917</td>
      <td>88.8916</td>
    </tr>
    <tr>
      <th>102</th>
      <td>62036.0</td>
      <td>Ginestra degli Schiavoni</td>
      <td>1478.706162</td>
      <td>22.20</td>
      <td>22.20</td>
      <td>22.20</td>
      <td>29.90</td>
      <td>29.90</td>
      <td>7.70</td>
      <td>442.1457</td>
      <td>442.1457</td>
      <td>328.2494</td>
      <td>328.2500</td>
      <td>328.2562</td>
    </tr>
    <tr>
      <th>229</th>
      <td>64045.0</td>
      <td>Luogosano</td>
      <td>606.809422</td>
      <td>10.43</td>
      <td>12.63</td>
      <td>12.63</td>
      <td>18.42</td>
      <td>18.42</td>
      <td>5.79</td>
      <td>111.7932</td>
      <td>111.7932</td>
      <td>76.6287</td>
      <td>76.6287</td>
      <td>63.2980</td>
    </tr>
    <tr>
      <th>355</th>
      <td>65060.0</td>
      <td>Laureana Cilento</td>
      <td>1374.420460</td>
      <td>25.62</td>
      <td>25.64</td>
      <td>25.64</td>
      <td>30.10</td>
      <td>31.15</td>
      <td>5.51</td>
      <td>428.1047</td>
      <td>413.7489</td>
      <td>352.3810</td>
      <td>352.3819</td>
      <td>352.1644</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="30">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">forest_df <span class="op" style="color: #5E5E5E;">=</span> pd.concat([reduction_forest_area, increase_forest_area])</span>
<span id="cb33-2">forest_df.sort_values(by<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'Perc.Diff. | 2018-2000'</span>], ascending<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb33-3">forest_df <span class="op" style="color: #5E5E5E;">=</span> forest_df[[<span class="st" style="color: #20794D;">'comune'</span>, <span class="st" style="color: #20794D;">'Perc.Diff. | 2018-2000'</span>]]</span>
<span id="cb33-4">forest_df[<span class="st" style="color: #20794D;">'Perc.Diff. | 2018-2000'</span>] <span class="op" style="color: #5E5E5E;">=</span> forest_df[<span class="st" style="color: #20794D;">'Perc.Diff. | 2018-2000'</span>]</span>
<span id="cb33-5">forest_df.set_index(<span class="st" style="color: #20794D;">'comune'</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb33-6"></span>
<span id="cb33-7">fig_forest <span class="op" style="color: #5E5E5E;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">10</span>), dpi<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb33-8">sub_fig_forest <span class="op" style="color: #5E5E5E;">=</span> GridSpec(nrows<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, ncols<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, figure<span class="op" style="color: #5E5E5E;">=</span>fig_forest, hspace<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.35</span>)</span>
<span id="cb33-9">ax_forest <span class="op" style="color: #5E5E5E;">=</span> fig_forest.add_subplot(sub_fig_forest[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb33-10">forest_df.plot.bar(ax<span class="op" style="color: #5E5E5E;">=</span>ax_forest, rot<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb33-11"></span>
<span id="cb33-12">ax_forest.yaxis.set_label_text(<span class="st" style="color: #20794D;">'%'</span>)</span>
<span id="cb33-13">ax_forest.set_xlabel(<span class="st" style="color: #20794D;">''</span>)</span>
<span id="cb33-14">ax_forest.grid(color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'lightgrey'</span>, linestyle<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'dashdot'</span>)</span>
<span id="cb33-15"></span>
<span id="cb33-16">plt.xticks(rotation <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">90</span>)</span>
<span id="cb33-17">plt.legend(loc<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'best'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="30">
<pre><code>&lt;matplotlib.legend.Legend at 0x7fe2d401af40&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://pygisblog.massimilianomoraca.me/posts/2022-08-26/analisi-della-copertura-del-suolo-in-italia_files/figure-html/cell-30-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>E’ significativo per me che nella top 10 del decremento di aree forestate ci siano Terzigno, Ercolano e Trecase. Lo è perchè sono tra i Comuni ricadenti nell’area del Parco Nazionale del Vesuvio che hanno subito danni al patrimonio boschivo a causa dell’<a href="https://massimilianomoraca.it/blog/gis/analisi-temporale-sullarea-degli-incendi-del-vesuvio/">incendio che ci fu nel 2017</a>.</p>
<p>Le aree in cui i boschi avanzano sono perlopiu aree rurali, a vocazione agricola, che pian piano si stanno spopolando.</p>
</section>
<section id="aree-agricole" class="level3">
<h3 class="anchored" data-anchor-id="aree-agricole">2.3.3 Aree agricole</h3>
<p>Il gruppo 2.1 della CLC</p>
<div class="cell" data-execution_count="31">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"></span>
<span id="cb35-2"><span class="co" style="color: #5E5E5E;"># Dati 1990</span></span>
<span id="cb35-3">arable_lands_surface_1990 <span class="op" style="color: #5E5E5E;">=</span> focus_1990_group[focus_1990_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Non-irrigated arable land'</span>, <span class="st" style="color: #20794D;">'Permanently irrigated land'</span>])]</span>
<span id="cb35-4">arable_lands_surface_1990_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(arable_lands_surface_1990.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>])[<span class="st" style="color: #20794D;">'surface_ha_1990'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb35-5">arable_lands_surface_1990_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb35-6"></span>
<span id="cb35-7"><span class="co" style="color: #5E5E5E;"># Dati 2000</span></span>
<span id="cb35-8">arable_lands_surface_2000 <span class="op" style="color: #5E5E5E;">=</span> focus_2000_group[focus_2000_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Non-irrigated arable land'</span>, <span class="st" style="color: #20794D;">'Permanently irrigated land'</span>])]</span>
<span id="cb35-9">arable_lands_surface_2000_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(arable_lands_surface_2000.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2000'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb35-10">arable_lands_surface_2000_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb35-11"></span>
<span id="cb35-12"><span class="co" style="color: #5E5E5E;"># Dati 2006</span></span>
<span id="cb35-13">arable_lands_surface_2006 <span class="op" style="color: #5E5E5E;">=</span> focus_2006_group[focus_2006_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Non-irrigated arable land'</span>, <span class="st" style="color: #20794D;">'Permanently irrigated land'</span>])]</span>
<span id="cb35-14">arable_lands_surface_2006_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(arable_lands_surface_2006.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2006'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb35-15">arable_lands_surface_2006_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb35-16"></span>
<span id="cb35-17"><span class="co" style="color: #5E5E5E;"># Dati 2012</span></span>
<span id="cb35-18">arable_lands_surface_2012 <span class="op" style="color: #5E5E5E;">=</span> focus_2012_group[focus_2012_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Non-irrigated arable land'</span>, <span class="st" style="color: #20794D;">'Permanently irrigated land'</span>])]</span>
<span id="cb35-19">arable_lands_surface_2012_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(arable_lands_surface_2012.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2012'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb35-20">arable_lands_surface_2012_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb35-21"></span>
<span id="cb35-22"><span class="co" style="color: #5E5E5E;"># Dati 2018</span></span>
<span id="cb35-23">arable_lands_surface_2018 <span class="op" style="color: #5E5E5E;">=</span> focus_2018_group[focus_2018_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Non-irrigated arable land'</span>, <span class="st" style="color: #20794D;">'Permanently irrigated land'</span>])]</span>
<span id="cb35-24">arable_lands_surface_2018_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(arable_lands_surface_2018.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>, <span class="st" style="color: #20794D;">'comune'</span>, <span class="st" style="color: #20794D;">'sup_com_ha'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2018'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb35-25">arable_lands_surface_2018_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb35-26"></span>
<span id="cb35-27"><span class="co" style="color: #5E5E5E;"># Dati aggregati</span></span>
<span id="cb35-28">focus_arable_lands <span class="op" style="color: #5E5E5E;">=</span> [arable_lands_surface_2018_group, arable_lands_surface_2012_group, arable_lands_surface_2006_group, arable_lands_surface_2000_group, arable_lands_surface_1990_group]</span>
<span id="cb35-29">focus_arable_lands_df <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">reduce</span>(<span class="kw" style="color: #003B4F;">lambda</span>  left,right: pd.merge(left,right,on<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'pro_com'</span>], how<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'outer'</span>), focus_arable_lands)</span>
<span id="cb35-30">focus_arable_lands_df <span class="op" style="color: #5E5E5E;">=</span> focus_arable_lands_df[focus_arable_lands_df[<span class="st" style="color: #20794D;">'sup_com_ha'</span>] <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb35-31">focus_arable_lands_df.fillna(<span class="dv" style="color: #AD0000;">0</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb35-32">focus_arable_lands_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_1990'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_arable_lands_df.surface_ha_1990 <span class="op" style="color: #5E5E5E;">/</span> focus_arable_lands_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb35-33">focus_arable_lands_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_2000'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_arable_lands_df.surface_ha_2000 <span class="op" style="color: #5E5E5E;">/</span> focus_arable_lands_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb35-34">focus_arable_lands_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_2006'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_arable_lands_df.surface_ha_2006 <span class="op" style="color: #5E5E5E;">/</span> focus_arable_lands_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb35-35">focus_arable_lands_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">6</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_2012'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_arable_lands_df.surface_ha_2012 <span class="op" style="color: #5E5E5E;">/</span> focus_arable_lands_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb35-36">focus_arable_lands_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">7</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_2018'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_arable_lands_df.surface_ha_2018 <span class="op" style="color: #5E5E5E;">/</span> focus_arable_lands_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb35-37">focus_arable_lands_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">8</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Perc.Diff. | 2018-2000'</span>, value<span class="op" style="color: #5E5E5E;">=</span>(focus_arable_lands_df.perc_2018 <span class="op" style="color: #5E5E5E;">-</span> focus_arable_lands_df.perc_2000))</span>
<span id="cb35-38">focus_arable_lands_df.sort_values(by<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'Perc.Diff. | 2018-2000'</span>], ascending<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb35-39">focus_arable_lands_df</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="31">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>pro_com</th>
      <th>comune</th>
      <th>sup_com_ha</th>
      <th>perc_1990</th>
      <th>perc_2000</th>
      <th>perc_2006</th>
      <th>perc_2012</th>
      <th>perc_2018</th>
      <th>Perc.Diff. | 2018-2000</th>
      <th>surface_ha_2018</th>
      <th>surface_ha_2012</th>
      <th>surface_ha_2006</th>
      <th>surface_ha_2000</th>
      <th>surface_ha_1990</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>238</th>
      <td>64072.0</td>
      <td>Pietradefusi</td>
      <td>924.149874</td>
      <td>77.90</td>
      <td>77.90</td>
      <td>20.16</td>
      <td>20.16</td>
      <td>20.16</td>
      <td>-57.74</td>
      <td>186.3344</td>
      <td>186.3344</td>
      <td>186.3345</td>
      <td>719.9375</td>
      <td>719.9308</td>
    </tr>
    <tr>
      <th>229</th>
      <td>64056.0</td>
      <td>Montefusco</td>
      <td>823.823558</td>
      <td>59.13</td>
      <td>59.13</td>
      <td>2.01</td>
      <td>2.01</td>
      <td>2.01</td>
      <td>-57.12</td>
      <td>16.5238</td>
      <td>16.5238</td>
      <td>16.5238</td>
      <td>487.1327</td>
      <td>487.1269</td>
    </tr>
    <tr>
      <th>250</th>
      <td>64093.0</td>
      <td>Santa Paolina</td>
      <td>843.429641</td>
      <td>29.95</td>
      <td>29.95</td>
      <td>0.25</td>
      <td>0.25</td>
      <td>0.25</td>
      <td>-29.70</td>
      <td>2.0832</td>
      <td>2.0832</td>
      <td>2.0832</td>
      <td>252.5909</td>
      <td>252.5864</td>
    </tr>
    <tr>
      <th>189</th>
      <td>63089.0</td>
      <td>Volla</td>
      <td>620.630205</td>
      <td>33.87</td>
      <td>29.74</td>
      <td>29.74</td>
      <td>1.05</td>
      <td>1.05</td>
      <td>-28.69</td>
      <td>6.5071</td>
      <td>6.5071</td>
      <td>184.6057</td>
      <td>184.6056</td>
      <td>210.2015</td>
    </tr>
    <tr>
      <th>260</th>
      <td>64110.0</td>
      <td>Torre Le Nocelle</td>
      <td>1004.158412</td>
      <td>43.42</td>
      <td>43.42</td>
      <td>17.52</td>
      <td>17.52</td>
      <td>17.52</td>
      <td>-25.90</td>
      <td>175.8839</td>
      <td>175.8839</td>
      <td>175.8840</td>
      <td>436.0116</td>
      <td>436.0185</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>130</th>
      <td>62049.0</td>
      <td>Paupisi</td>
      <td>683.272709</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>23.31</td>
      <td>23.31</td>
      <td>23.31</td>
      <td>159.2668</td>
      <td>159.2668</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
    </tr>
    <tr>
      <th>13</th>
      <td>61016.0</td>
      <td>Carinaro</td>
      <td>631.593670</td>
      <td>13.06</td>
      <td>9.15</td>
      <td>9.15</td>
      <td>41.13</td>
      <td>41.13</td>
      <td>31.98</td>
      <td>259.7728</td>
      <td>259.7728</td>
      <td>57.8113</td>
      <td>57.8112</td>
      <td>82.5094</td>
    </tr>
    <tr>
      <th>17</th>
      <td>61020.0</td>
      <td>Casaluce</td>
      <td>955.842829</td>
      <td>0.70</td>
      <td>0.70</td>
      <td>0.70</td>
      <td>60.53</td>
      <td>60.53</td>
      <td>59.83</td>
      <td>578.6141</td>
      <td>578.6141</td>
      <td>6.7225</td>
      <td>6.7226</td>
      <td>6.7222</td>
    </tr>
    <tr>
      <th>32</th>
      <td>61037.0</td>
      <td>Frignano</td>
      <td>985.795577</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>69.03</td>
      <td>69.03</td>
      <td>69.03</td>
      <td>680.5149</td>
      <td>680.5149</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
    </tr>
    <tr>
      <th>84</th>
      <td>61098.0</td>
      <td>Villa di Briano</td>
      <td>854.692612</td>
      <td>3.91</td>
      <td>3.91</td>
      <td>3.91</td>
      <td>74.03</td>
      <td>74.03</td>
      <td>70.12</td>
      <td>632.7436</td>
      <td>632.7436</td>
      <td>33.4422</td>
      <td>33.4424</td>
      <td>33.4453</td>
    </tr>
  </tbody>
</table>
<p>363 rows × 14 columns</p>
</div>
</div>
</div>
<div class="cell" data-execution_count="32">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"></span>
<span id="cb36-2"><span class="co" style="color: #5E5E5E;"># Superfici in arretramento</span></span>
<span id="cb36-3">reduction_arable_lands_area <span class="op" style="color: #5E5E5E;">=</span> focus_arable_lands_df.iloc[<span class="dv" style="color: #AD0000;">0</span>:<span class="dv" style="color: #AD0000;">10</span>]</span>
<span id="cb36-4">reduction_arable_lands_area</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="32">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>pro_com</th>
      <th>comune</th>
      <th>sup_com_ha</th>
      <th>perc_1990</th>
      <th>perc_2000</th>
      <th>perc_2006</th>
      <th>perc_2012</th>
      <th>perc_2018</th>
      <th>Perc.Diff. | 2018-2000</th>
      <th>surface_ha_2018</th>
      <th>surface_ha_2012</th>
      <th>surface_ha_2006</th>
      <th>surface_ha_2000</th>
      <th>surface_ha_1990</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>238</th>
      <td>64072.0</td>
      <td>Pietradefusi</td>
      <td>924.149874</td>
      <td>77.90</td>
      <td>77.90</td>
      <td>20.16</td>
      <td>20.16</td>
      <td>20.16</td>
      <td>-57.74</td>
      <td>186.3344</td>
      <td>186.3344</td>
      <td>186.3345</td>
      <td>719.9375</td>
      <td>719.9308</td>
    </tr>
    <tr>
      <th>229</th>
      <td>64056.0</td>
      <td>Montefusco</td>
      <td>823.823558</td>
      <td>59.13</td>
      <td>59.13</td>
      <td>2.01</td>
      <td>2.01</td>
      <td>2.01</td>
      <td>-57.12</td>
      <td>16.5238</td>
      <td>16.5238</td>
      <td>16.5238</td>
      <td>487.1327</td>
      <td>487.1269</td>
    </tr>
    <tr>
      <th>250</th>
      <td>64093.0</td>
      <td>Santa Paolina</td>
      <td>843.429641</td>
      <td>29.95</td>
      <td>29.95</td>
      <td>0.25</td>
      <td>0.25</td>
      <td>0.25</td>
      <td>-29.70</td>
      <td>2.0832</td>
      <td>2.0832</td>
      <td>2.0832</td>
      <td>252.5909</td>
      <td>252.5864</td>
    </tr>
    <tr>
      <th>189</th>
      <td>63089.0</td>
      <td>Volla</td>
      <td>620.630205</td>
      <td>33.87</td>
      <td>29.74</td>
      <td>29.74</td>
      <td>1.05</td>
      <td>1.05</td>
      <td>-28.69</td>
      <td>6.5071</td>
      <td>6.5071</td>
      <td>184.6057</td>
      <td>184.6056</td>
      <td>210.2015</td>
    </tr>
    <tr>
      <th>260</th>
      <td>64110.0</td>
      <td>Torre Le Nocelle</td>
      <td>1004.158412</td>
      <td>43.42</td>
      <td>43.42</td>
      <td>17.52</td>
      <td>17.52</td>
      <td>17.52</td>
      <td>-25.90</td>
      <td>175.8839</td>
      <td>175.8839</td>
      <td>175.8840</td>
      <td>436.0116</td>
      <td>436.0185</td>
    </tr>
    <tr>
      <th>190</th>
      <td>63090.0</td>
      <td>Santa Maria la Carità</td>
      <td>397.883761</td>
      <td>24.44</td>
      <td>24.44</td>
      <td>0.29</td>
      <td>0.29</td>
      <td>0.29</td>
      <td>-24.15</td>
      <td>1.1544</td>
      <td>1.1544</td>
      <td>1.1544</td>
      <td>97.2554</td>
      <td>97.2552</td>
    </tr>
    <tr>
      <th>76</th>
      <td>61088.0</td>
      <td>Sessa Aurunca</td>
      <td>16218.704457</td>
      <td>25.28</td>
      <td>25.35</td>
      <td>2.23</td>
      <td>2.56</td>
      <td>2.56</td>
      <td>-22.79</td>
      <td>415.3546</td>
      <td>415.3546</td>
      <td>362.1214</td>
      <td>4112.0036</td>
      <td>4099.7632</td>
    </tr>
    <tr>
      <th>166</th>
      <td>63025.0</td>
      <td>Castello di Cisterna</td>
      <td>392.135970</td>
      <td>44.25</td>
      <td>44.25</td>
      <td>21.85</td>
      <td>21.85</td>
      <td>21.85</td>
      <td>-22.40</td>
      <td>85.6953</td>
      <td>85.6953</td>
      <td>85.6953</td>
      <td>173.5036</td>
      <td>173.5048</td>
    </tr>
    <tr>
      <th>232</th>
      <td>64059.0</td>
      <td>Montemiletto</td>
      <td>2163.480616</td>
      <td>34.90</td>
      <td>33.95</td>
      <td>14.70</td>
      <td>14.70</td>
      <td>14.70</td>
      <td>-19.25</td>
      <td>318.1006</td>
      <td>318.1006</td>
      <td>318.1007</td>
      <td>734.5263</td>
      <td>755.1347</td>
    </tr>
    <tr>
      <th>163</th>
      <td>63017.0</td>
      <td>Casalnuovo di Napoli</td>
      <td>783.538578</td>
      <td>44.85</td>
      <td>41.66</td>
      <td>41.66</td>
      <td>27.45</td>
      <td>27.45</td>
      <td>-14.21</td>
      <td>215.1126</td>
      <td>215.1126</td>
      <td>326.3900</td>
      <td>326.3901</td>
      <td>351.4509</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="33">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"></span>
<span id="cb37-2"><span class="co" style="color: #5E5E5E;"># Superfici in avanzamento</span></span>
<span id="cb37-3">increase_arable_lands_area <span class="op" style="color: #5E5E5E;">=</span> focus_arable_lands_df.iloc[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">10</span>:]</span>
<span id="cb37-4">increase_arable_lands_area.sort_values(by<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'Perc.Diff. | 2018-2000'</span>], ascending<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb37-5">increase_arable_lands_area</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="33">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>pro_com</th>
      <th>comune</th>
      <th>sup_com_ha</th>
      <th>perc_1990</th>
      <th>perc_2000</th>
      <th>perc_2006</th>
      <th>perc_2012</th>
      <th>perc_2018</th>
      <th>Perc.Diff. | 2018-2000</th>
      <th>surface_ha_2018</th>
      <th>surface_ha_2012</th>
      <th>surface_ha_2006</th>
      <th>surface_ha_2000</th>
      <th>surface_ha_1990</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>84</th>
      <td>61098.0</td>
      <td>Villa di Briano</td>
      <td>854.692612</td>
      <td>3.91</td>
      <td>3.91</td>
      <td>3.91</td>
      <td>74.03</td>
      <td>74.03</td>
      <td>70.12</td>
      <td>632.7436</td>
      <td>632.7436</td>
      <td>33.4422</td>
      <td>33.4424</td>
      <td>33.4453</td>
    </tr>
    <tr>
      <th>32</th>
      <td>61037.0</td>
      <td>Frignano</td>
      <td>985.795577</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>69.03</td>
      <td>69.03</td>
      <td>69.03</td>
      <td>680.5149</td>
      <td>680.5149</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
    </tr>
    <tr>
      <th>17</th>
      <td>61020.0</td>
      <td>Casaluce</td>
      <td>955.842829</td>
      <td>0.70</td>
      <td>0.70</td>
      <td>0.70</td>
      <td>60.53</td>
      <td>60.53</td>
      <td>59.83</td>
      <td>578.6141</td>
      <td>578.6141</td>
      <td>6.7225</td>
      <td>6.7226</td>
      <td>6.7222</td>
    </tr>
    <tr>
      <th>13</th>
      <td>61016.0</td>
      <td>Carinaro</td>
      <td>631.593670</td>
      <td>13.06</td>
      <td>9.15</td>
      <td>9.15</td>
      <td>41.13</td>
      <td>41.13</td>
      <td>31.98</td>
      <td>259.7728</td>
      <td>259.7728</td>
      <td>57.8113</td>
      <td>57.8112</td>
      <td>82.5094</td>
    </tr>
    <tr>
      <th>130</th>
      <td>62049.0</td>
      <td>Paupisi</td>
      <td>683.272709</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>23.31</td>
      <td>23.31</td>
      <td>23.31</td>
      <td>159.2668</td>
      <td>159.2668</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
    </tr>
    <tr>
      <th>143</th>
      <td>62062.0</td>
      <td>San Lorenzo Maggiore</td>
      <td>1629.550368</td>
      <td>0.93</td>
      <td>0.93</td>
      <td>0.93</td>
      <td>18.00</td>
      <td>18.00</td>
      <td>17.07</td>
      <td>293.3587</td>
      <td>293.3587</td>
      <td>15.1138</td>
      <td>15.1136</td>
      <td>15.1112</td>
    </tr>
    <tr>
      <th>134</th>
      <td>62053.0</td>
      <td>Ponte</td>
      <td>1791.529818</td>
      <td>18.98</td>
      <td>18.98</td>
      <td>18.11</td>
      <td>35.86</td>
      <td>35.86</td>
      <td>16.88</td>
      <td>642.4110</td>
      <td>642.4110</td>
      <td>324.5012</td>
      <td>339.9875</td>
      <td>339.9830</td>
    </tr>
    <tr>
      <th>217</th>
      <td>64037.0</td>
      <td>Greci</td>
      <td>3026.329172</td>
      <td>33.15</td>
      <td>34.35</td>
      <td>50.04</td>
      <td>50.02</td>
      <td>50.02</td>
      <td>15.67</td>
      <td>1513.7004</td>
      <td>1513.7004</td>
      <td>1514.3325</td>
      <td>1039.4665</td>
      <td>1003.1417</td>
    </tr>
    <tr>
      <th>36</th>
      <td>61043.0</td>
      <td>Gricignano di Aversa</td>
      <td>997.757144</td>
      <td>27.33</td>
      <td>19.84</td>
      <td>19.70</td>
      <td>35.43</td>
      <td>35.43</td>
      <td>15.59</td>
      <td>353.4710</td>
      <td>353.4710</td>
      <td>196.5586</td>
      <td>197.9250</td>
      <td>272.6607</td>
    </tr>
    <tr>
      <th>63</th>
      <td>61074.0</td>
      <td>San Cipriano d'Aversa</td>
      <td>619.009752</td>
      <td>44.14</td>
      <td>44.14</td>
      <td>43.49</td>
      <td>56.38</td>
      <td>56.38</td>
      <td>12.24</td>
      <td>348.9748</td>
      <td>348.9748</td>
      <td>269.2010</td>
      <td>273.2419</td>
      <td>273.2415</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="34">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">arable_lands_df <span class="op" style="color: #5E5E5E;">=</span> pd.concat([reduction_arable_lands_area, increase_arable_lands_area])</span>
<span id="cb38-2">arable_lands_df.sort_values(by<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'Perc.Diff. | 2018-2000'</span>], ascending<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb38-3">arable_lands_df <span class="op" style="color: #5E5E5E;">=</span> arable_lands_df[[<span class="st" style="color: #20794D;">'comune'</span>, <span class="st" style="color: #20794D;">'Perc.Diff. | 2018-2000'</span>]]</span>
<span id="cb38-4">arable_lands_df[<span class="st" style="color: #20794D;">'Perc.Diff. | 2018-2000'</span>] <span class="op" style="color: #5E5E5E;">=</span> arable_lands_df[<span class="st" style="color: #20794D;">'Perc.Diff. | 2018-2000'</span>]</span>
<span id="cb38-5">arable_lands_df.set_index(<span class="st" style="color: #20794D;">'comune'</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb38-6"></span>
<span id="cb38-7">fig_arable_lands <span class="op" style="color: #5E5E5E;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">10</span>), dpi<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb38-8">sub_fig_arable_lands <span class="op" style="color: #5E5E5E;">=</span> GridSpec(nrows<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, ncols<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, figure<span class="op" style="color: #5E5E5E;">=</span>fig_arable_lands, hspace<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.35</span>)</span>
<span id="cb38-9">ax_arable_lands <span class="op" style="color: #5E5E5E;">=</span> fig_arable_lands.add_subplot(sub_fig_arable_lands[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb38-10">arable_lands_df.plot.bar(ax<span class="op" style="color: #5E5E5E;">=</span>ax_arable_lands, rot<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb38-11"></span>
<span id="cb38-12">ax_arable_lands.yaxis.set_label_text(<span class="st" style="color: #20794D;">'%'</span>)</span>
<span id="cb38-13">ax_arable_lands.set_xlabel(<span class="st" style="color: #20794D;">''</span>)</span>
<span id="cb38-14">ax_arable_lands.grid(color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'lightgrey'</span>, linestyle<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'dashdot'</span>)</span>
<span id="cb38-15"></span>
<span id="cb38-16">plt.xticks(rotation <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">90</span>)</span>
<span id="cb38-17">plt.legend(loc<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'best'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="34">
<pre><code>&lt;matplotlib.legend.Legend at 0x7fe2d5ed0fd0&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://pygisblog.massimilianomoraca.me/posts/2022-08-26/analisi-della-copertura-del-suolo-in-italia_files/figure-html/cell-34-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>Tra i Comuni con maggior aumento della aree articifiali abbiamo visto che c’è Volla che è tra i Comuni con maggior decremento delle aree agricole. Poco sopra ho fatto una riflessione sul perchè della redistribuzione del livello 1 della CLC. <strong>Due indizi non fanno una prova, ma tre?</strong></p>
</section>
<section id="aree-bruciate" class="level3">
<h3 class="anchored" data-anchor-id="aree-bruciate">2.3.4 Aree bruciate</h3>
<div class="cell" data-execution_count="35">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"></span>
<span id="cb40-2"><span class="co" style="color: #5E5E5E;"># Dati 1990</span></span>
<span id="cb40-3">burnt_surface_1990 <span class="op" style="color: #5E5E5E;">=</span> focus_1990_group[focus_1990_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Burnt areas'</span>])]</span>
<span id="cb40-4">burnt_surface_1990_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(burnt_surface_1990.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>])[<span class="st" style="color: #20794D;">'surface_ha_1990'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb40-5">burnt_surface_1990_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb40-6"></span>
<span id="cb40-7"><span class="co" style="color: #5E5E5E;"># Dati 2000</span></span>
<span id="cb40-8">burnt_surface_2000 <span class="op" style="color: #5E5E5E;">=</span> focus_2000_group[focus_2000_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Burnt areas'</span>])]</span>
<span id="cb40-9">burnt_surface_2000_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(burnt_surface_2000.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2000'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb40-10">burnt_surface_2000_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb40-11"></span>
<span id="cb40-12"><span class="co" style="color: #5E5E5E;"># Dati 2006</span></span>
<span id="cb40-13">burnt_surface_2006 <span class="op" style="color: #5E5E5E;">=</span> focus_2006_group[focus_2006_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Burnt areas'</span>])]</span>
<span id="cb40-14">burnt_surface_2006_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(burnt_surface_2006.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2006'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb40-15">burnt_surface_2006_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb40-16"></span>
<span id="cb40-17"><span class="co" style="color: #5E5E5E;"># Dati 2012</span></span>
<span id="cb40-18">burnt_surface_2012 <span class="op" style="color: #5E5E5E;">=</span> focus_2012_group[focus_2012_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Burnt areas'</span>])]</span>
<span id="cb40-19">burnt_surface_2012_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(burnt_surface_2012.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2012'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb40-20">burnt_surface_2012_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb40-21"></span>
<span id="cb40-22"><span class="co" style="color: #5E5E5E;"># Dati 2018</span></span>
<span id="cb40-23">burnt_surface_2018 <span class="op" style="color: #5E5E5E;">=</span> focus_2018_group[focus_2018_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Burnt areas'</span>])]</span>
<span id="cb40-24">burnt_surface_2018_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(burnt_surface_2018.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>, <span class="st" style="color: #20794D;">'comune'</span>, <span class="st" style="color: #20794D;">'sup_com_ha'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2018'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb40-25">burnt_surface_2018_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb40-26"></span>
<span id="cb40-27"><span class="co" style="color: #5E5E5E;"># Dati aggregati</span></span>
<span id="cb40-28">focus_arable_lands <span class="op" style="color: #5E5E5E;">=</span> [burnt_surface_2018_group, burnt_surface_2012_group, burnt_surface_2006_group, burnt_surface_2000_group, burnt_surface_1990_group]</span>
<span id="cb40-29">focus_burnt_df <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">reduce</span>(<span class="kw" style="color: #003B4F;">lambda</span>  left,right: pd.merge(left,right,on<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'pro_com'</span>], how<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'outer'</span>), focus_arable_lands)</span>
<span id="cb40-30">focus_burnt_df <span class="op" style="color: #5E5E5E;">=</span> focus_burnt_df[focus_burnt_df[<span class="st" style="color: #20794D;">'sup_com_ha'</span>] <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb40-31">focus_burnt_df.fillna(<span class="dv" style="color: #AD0000;">0</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb40-32">focus_burnt_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_1990'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_burnt_df.surface_ha_1990 <span class="op" style="color: #5E5E5E;">/</span> focus_burnt_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb40-33">focus_burnt_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_2000'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_burnt_df.surface_ha_2000 <span class="op" style="color: #5E5E5E;">/</span> focus_burnt_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb40-34">focus_burnt_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_2006'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_burnt_df.surface_ha_2006 <span class="op" style="color: #5E5E5E;">/</span> focus_burnt_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb40-35">focus_burnt_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">6</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_2012'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_burnt_df.surface_ha_2012 <span class="op" style="color: #5E5E5E;">/</span> focus_burnt_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb40-36">focus_burnt_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">7</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_2018'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_burnt_df.surface_ha_2018 <span class="op" style="color: #5E5E5E;">/</span> focus_burnt_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb40-37">focus_burnt_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">8</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Perc.Diff. | 2018-2000'</span>, value<span class="op" style="color: #5E5E5E;">=</span>(focus_burnt_df.perc_2018 <span class="op" style="color: #5E5E5E;">-</span> focus_burnt_df.perc_2000))</span>
<span id="cb40-38">focus_burnt_df.sort_values(by<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'Perc.Diff. | 2018-2000'</span>], ascending<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb40-39">focus_burnt_df</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="35">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>pro_com</th>
      <th>comune</th>
      <th>sup_com_ha</th>
      <th>perc_1990</th>
      <th>perc_2000</th>
      <th>perc_2006</th>
      <th>perc_2012</th>
      <th>perc_2018</th>
      <th>Perc.Diff. | 2018-2000</th>
      <th>surface_ha_2018</th>
      <th>surface_ha_2012</th>
      <th>surface_ha_2006</th>
      <th>surface_ha_2000</th>
      <th>surface_ha_1990</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>20</th>
      <td>63082.0</td>
      <td>Terzigno</td>
      <td>2346.480829</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>18.50</td>
      <td>18.50</td>
      <td>434.1155</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>16</th>
      <td>63064.0</td>
      <td>Ercolano</td>
      <td>1989.359843</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>8.49</td>
      <td>17.54</td>
      <td>17.54</td>
      <td>348.9169</td>
      <td>168.9727</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>10</th>
      <td>63009.0</td>
      <td>Boscotrecase</td>
      <td>753.047593</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>16.95</td>
      <td>16.95</td>
      <td>127.6552</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>22</th>
      <td>63091.0</td>
      <td>Trecase</td>
      <td>621.312671</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>13.75</td>
      <td>13.75</td>
      <td>85.4539</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>13</th>
      <td>63051.0</td>
      <td>Ottaviano</td>
      <td>2002.268341</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.88</td>
      <td>12.06</td>
      <td>12.06</td>
      <td>241.4028</td>
      <td>17.6023</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>50</th>
      <td>65142.0</td>
      <td>Siano</td>
      <td>856.918877</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>10.24</td>
      <td>10.24</td>
      <td>87.7539</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>24</th>
      <td>64076.0</td>
      <td>Quadrelle</td>
      <td>693.114011</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>9.65</td>
      <td>9.65</td>
      <td>66.9010</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>21</th>
      <td>63084.0</td>
      <td>Torre del Greco</td>
      <td>3066.110669</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>1.58</td>
      <td>9.19</td>
      <td>9.19</td>
      <td>281.8574</td>
      <td>48.5022</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>11</th>
      <td>63041.0</td>
      <td>Marano di Napoli</td>
      <td>1565.253641</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>9.11</td>
      <td>9.11</td>
      <td>9.11</td>
      <td>142.5412</td>
      <td>142.5412</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>45</th>
      <td>65108.0</td>
      <td>Roccapiemonte</td>
      <td>531.325342</td>
      <td>0.0</td>
      <td>3.85</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>10.68</td>
      <td>6.83</td>
      <td>56.7487</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>20.4508</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>41</th>
      <td>65067.0</td>
      <td>Mercato San Severino</td>
      <td>3033.314668</td>
      <td>0.0</td>
      <td>3.72</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>9.55</td>
      <td>5.83</td>
      <td>289.6134</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>112.7573</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>36</th>
      <td>65047.0</td>
      <td>Corbara</td>
      <td>673.181063</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>5.43</td>
      <td>5.43</td>
      <td>36.5565</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>27</th>
      <td>64100.0</td>
      <td>Sirignano</td>
      <td>618.669347</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>5.42</td>
      <td>5.42</td>
      <td>33.5478</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>33</th>
      <td>65020.0</td>
      <td>Calvanico</td>
      <td>1490.919524</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>4.50</td>
      <td>4.50</td>
      <td>67.0813</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>61024.0</td>
      <td>Castel di Sasso</td>
      <td>2032.307571</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>3.73</td>
      <td>3.73</td>
      <td>75.8659</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>29</th>
      <td>64121.0</td>
      <td>Montoro</td>
      <td>4014.094054</td>
      <td>0.0</td>
      <td>0.10</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>3.73</td>
      <td>3.63</td>
      <td>149.7874</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>4.0627</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>30</th>
      <td>65013.0</td>
      <td>Baronissi</td>
      <td>1792.982916</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>3.61</td>
      <td>3.61</td>
      <td>64.6775</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>17</th>
      <td>63065.0</td>
      <td>Roccarainola</td>
      <td>2833.151640</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>3.55</td>
      <td>3.55</td>
      <td>100.4408</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>9</th>
      <td>62028.0</td>
      <td>Durazzano</td>
      <td>1290.490693</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>3.36</td>
      <td>3.36</td>
      <td>3.36</td>
      <td>43.3596</td>
      <td>43.3596</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>8</th>
      <td>62009.0</td>
      <td>Bonea</td>
      <td>1146.261236</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>3.09</td>
      <td>3.09</td>
      <td>35.4456</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>44</th>
      <td>65079.0</td>
      <td>Nocera Superiore</td>
      <td>1466.245166</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>3.00</td>
      <td>3.00</td>
      <td>44.0193</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>48</th>
      <td>65131.0</td>
      <td>Santomenna</td>
      <td>891.925366</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>2.94</td>
      <td>2.94</td>
      <td>2.94</td>
      <td>26.1979</td>
      <td>26.1980</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>61051.0</td>
      <td>Mignano Monte Lungo</td>
      <td>5309.523303</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>2.72</td>
      <td>2.72</td>
      <td>144.4552</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>51</th>
      <td>65151.0</td>
      <td>Tramonti</td>
      <td>2482.596555</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>2.59</td>
      <td>2.59</td>
      <td>2.59</td>
      <td>64.2754</td>
      <td>64.2754</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>14</th>
      <td>63060.0</td>
      <td>Pozzuoli</td>
      <td>4343.389600</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>2.38</td>
      <td>2.38</td>
      <td>2.38</td>
      <td>103.1784</td>
      <td>103.1784</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>49</th>
      <td>65135.0</td>
      <td>Sarno</td>
      <td>4000.061759</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>2.15</td>
      <td>2.15</td>
      <td>85.9694</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>40</th>
      <td>65060.0</td>
      <td>Laureana Cilento</td>
      <td>1374.420460</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>1.98</td>
      <td>1.98</td>
      <td>27.2732</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>6</th>
      <td>61075.0</td>
      <td>San Felice a Cancello</td>
      <td>2717.900285</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>1.98</td>
      <td>1.98</td>
      <td>53.7304</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>25</th>
      <td>64077.0</td>
      <td>Quindici</td>
      <td>2390.824174</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>1.90</td>
      <td>1.90</td>
      <td>45.4393</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>42</th>
      <td>65069.0</td>
      <td>Moio della Civitella</td>
      <td>1718.872945</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>1.58</td>
      <td>1.58</td>
      <td>27.1520</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>23</th>
      <td>63092.0</td>
      <td>Massa di Somma</td>
      <td>304.205206</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>1.51</td>
      <td>1.51</td>
      <td>4.6046</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>46</th>
      <td>65124.0</td>
      <td>San Mauro la Bruca</td>
      <td>1905.442534</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>1.34</td>
      <td>1.34</td>
      <td>25.6184</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>28</th>
      <td>64101.0</td>
      <td>Solofra</td>
      <td>2221.354782</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>1.30</td>
      <td>1.30</td>
      <td>28.9118</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>43</th>
      <td>65078.0</td>
      <td>Nocera Inferiore</td>
      <td>2094.467250</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>1.24</td>
      <td>1.24</td>
      <td>26.0176</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>15</th>
      <td>63063.0</td>
      <td>Quarto</td>
      <td>1415.896056</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>1.17</td>
      <td>1.17</td>
      <td>1.17</td>
      <td>16.5525</td>
      <td>16.5525</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>18</th>
      <td>63068.0</td>
      <td>San Giuseppe Vesuviano</td>
      <td>1417.126283</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>1.04</td>
      <td>1.04</td>
      <td>14.7355</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>32</th>
      <td>65019.0</td>
      <td>Caggiano</td>
      <td>3542.966709</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.93</td>
      <td>0.93</td>
      <td>0.93</td>
      <td>32.9540</td>
      <td>32.9540</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>34</th>
      <td>65034.0</td>
      <td>Castel San Giorgio</td>
      <td>1358.506777</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.75</td>
      <td>0.75</td>
      <td>10.1730</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>0</th>
      <td>61022.0</td>
      <td>Caserta</td>
      <td>5406.845910</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.67</td>
      <td>0.67</td>
      <td>0.67</td>
      <td>36.0326</td>
      <td>36.0326</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>12</th>
      <td>63049.0</td>
      <td>Napoli</td>
      <td>11894.407425</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.53</td>
      <td>0.53</td>
      <td>0.53</td>
      <td>63.0803</td>
      <td>63.0803</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>5</th>
      <td>61052.0</td>
      <td>Mondragone</td>
      <td>5572.569052</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>2.74</td>
      <td>0.00</td>
      <td>0.52</td>
      <td>0.52</td>
      <td>29.0151</td>
      <td>0.0000</td>
      <td>152.8844</td>
      <td>0.0000</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>39</th>
      <td>65055.0</td>
      <td>Giffoni Sei Casali</td>
      <td>3507.503961</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.22</td>
      <td>0.22</td>
      <td>7.7114</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>31</th>
      <td>65016.0</td>
      <td>Bracigliano</td>
      <td>1440.868176</td>
      <td>0.0</td>
      <td>0.26</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.47</td>
      <td>0.21</td>
      <td>6.7033</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>3.7261</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>19</th>
      <td>63079.0</td>
      <td>Somma Vesuviana</td>
      <td>3066.640742</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.11</td>
      <td>0.11</td>
      <td>0.11</td>
      <td>3.3491</td>
      <td>3.3491</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>61045.0</td>
      <td>Liberi</td>
      <td>1758.913730</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.10</td>
      <td>0.10</td>
      <td>1.7792</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>61026.0</td>
      <td>Castel Morrone</td>
      <td>2534.392208</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.10</td>
      <td>0.10</td>
      <td>0.10</td>
      <td>2.6154</td>
      <td>2.6154</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>26</th>
      <td>64099.0</td>
      <td>Serino</td>
      <td>5249.939474</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.04</td>
      <td>0.04</td>
      <td>1.9971</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>38</th>
      <td>65054.0</td>
      <td>Futani</td>
      <td>1485.058368</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.02</td>
      <td>0.02</td>
      <td>0.3298</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>7</th>
      <td>61079.0</td>
      <td>San Pietro Infine</td>
      <td>1371.735131</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.01</td>
      <td>0.01</td>
      <td>0.1720</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>47</th>
      <td>65130.0</td>
      <td>Sant'Egidio del Monte Albino</td>
      <td>724.511924</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.0259</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>35</th>
      <td>65037.0</td>
      <td>Cava de' Tirreni</td>
      <td>3653.112071</td>
      <td>0.0</td>
      <td>1.55</td>
      <td>0.00</td>
      <td>0.04</td>
      <td>1.48</td>
      <td>-0.07</td>
      <td>54.0169</td>
      <td>1.6314</td>
      <td>0.0000</td>
      <td>56.7053</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>37</th>
      <td>65052.0</td>
      <td>Fisciano</td>
      <td>3168.742849</td>
      <td>0.0</td>
      <td>4.15</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>1.43</td>
      <td>-2.72</td>
      <td>45.1761</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>131.4723</td>
      <td>0.0</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>In questa analisi ci sono in 6 delle prime 10 posizioni alcuni dei Comuni interessati dall’incendio del 2017.</p>
</section>
<section id="aree-adibite-a-discarica" class="level3">
<h3 class="anchored" data-anchor-id="aree-adibite-a-discarica">2.3.5 Aree adibite a discarica</h3>
<div class="cell" data-execution_count="36">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"></span>
<span id="cb41-2"><span class="co" style="color: #5E5E5E;"># Dati 1990</span></span>
<span id="cb41-3">dump_surface_1990 <span class="op" style="color: #5E5E5E;">=</span> focus_1990_group[focus_1990_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Dump sites'</span>])]</span>
<span id="cb41-4">dump_surface_1990_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(dump_surface_1990.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>])[<span class="st" style="color: #20794D;">'surface_ha_1990'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb41-5">dump_surface_1990_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb41-6"></span>
<span id="cb41-7"><span class="co" style="color: #5E5E5E;"># Dati 2000</span></span>
<span id="cb41-8">dump_surface_2000 <span class="op" style="color: #5E5E5E;">=</span> focus_2000_group[focus_2000_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Dump sites'</span>])]</span>
<span id="cb41-9">dump_surface_2000_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(dump_surface_2000.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2000'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb41-10">dump_surface_2000_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb41-11"></span>
<span id="cb41-12"><span class="co" style="color: #5E5E5E;"># Dati 2006</span></span>
<span id="cb41-13">dump_surface_2006 <span class="op" style="color: #5E5E5E;">=</span> focus_2006_group[focus_2006_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Dump sites'</span>])]</span>
<span id="cb41-14">dump_surface_2006_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(dump_surface_2006.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2006'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb41-15">dump_surface_2006_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb41-16"></span>
<span id="cb41-17"><span class="co" style="color: #5E5E5E;"># Dati 2012</span></span>
<span id="cb41-18">dump_surface_2012 <span class="op" style="color: #5E5E5E;">=</span> focus_2012_group[focus_2012_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Dump sites'</span>])]</span>
<span id="cb41-19">dump_surface_2012_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(dump_surface_2012.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2012'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb41-20">dump_surface_2012_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb41-21"></span>
<span id="cb41-22"><span class="co" style="color: #5E5E5E;"># Dati 2018</span></span>
<span id="cb41-23">dump_surface_2018 <span class="op" style="color: #5E5E5E;">=</span> focus_2018_group[focus_2018_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Dump sites'</span>])]</span>
<span id="cb41-24">dump_surface_2018_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(dump_surface_2018.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>, <span class="st" style="color: #20794D;">'comune'</span>, <span class="st" style="color: #20794D;">'sup_com_ha'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2018'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb41-25">dump_surface_2018_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb41-26"></span>
<span id="cb41-27"><span class="co" style="color: #5E5E5E;"># Dati aggregati</span></span>
<span id="cb41-28">focus_arable_lands <span class="op" style="color: #5E5E5E;">=</span> [dump_surface_2018_group, dump_surface_2012_group, dump_surface_2006_group, dump_surface_2000_group, dump_surface_1990_group]</span>
<span id="cb41-29">focus_dump_df <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">reduce</span>(<span class="kw" style="color: #003B4F;">lambda</span>  left,right: pd.merge(left,right,on<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'pro_com'</span>], how<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'outer'</span>), focus_arable_lands)</span>
<span id="cb41-30">focus_dump_df <span class="op" style="color: #5E5E5E;">=</span> focus_dump_df[focus_dump_df[<span class="st" style="color: #20794D;">'sup_com_ha'</span>] <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb41-31">focus_dump_df.fillna(<span class="dv" style="color: #AD0000;">0</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb41-32">focus_dump_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_1990'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_dump_df.surface_ha_1990 <span class="op" style="color: #5E5E5E;">/</span> focus_dump_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb41-33">focus_dump_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_2000'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_dump_df.surface_ha_2000 <span class="op" style="color: #5E5E5E;">/</span> focus_dump_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb41-34">focus_dump_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_2006'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_dump_df.surface_ha_2006 <span class="op" style="color: #5E5E5E;">/</span> focus_dump_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb41-35">focus_dump_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">6</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_2012'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_dump_df.surface_ha_2012 <span class="op" style="color: #5E5E5E;">/</span> focus_dump_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb41-36">focus_dump_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">7</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_2018'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_dump_df.surface_ha_2018 <span class="op" style="color: #5E5E5E;">/</span> focus_dump_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb41-37">focus_dump_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">8</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Perc.Diff. | 2018-2000'</span>, value<span class="op" style="color: #5E5E5E;">=</span>(focus_dump_df.perc_2018 <span class="op" style="color: #5E5E5E;">-</span> focus_dump_df.perc_2000))</span>
<span id="cb41-38">focus_dump_df.sort_values(by<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'Perc.Diff. | 2018-2000'</span>], ascending<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb41-39">focus_dump_df</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="36">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>pro_com</th>
      <th>comune</th>
      <th>sup_com_ha</th>
      <th>perc_1990</th>
      <th>perc_2000</th>
      <th>perc_2006</th>
      <th>perc_2012</th>
      <th>perc_2018</th>
      <th>Perc.Diff. | 2018-2000</th>
      <th>surface_ha_2018</th>
      <th>surface_ha_2012</th>
      <th>surface_ha_2006</th>
      <th>surface_ha_2000</th>
      <th>surface_ha_1990</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>4</th>
      <td>63034.0</td>
      <td>Giugliano in Campania</td>
      <td>9463.207795</td>
      <td>0.01</td>
      <td>0.01</td>
      <td>0.16</td>
      <td>1.89</td>
      <td>1.89</td>
      <td>1.88</td>
      <td>179.2958</td>
      <td>179.2958</td>
      <td>14.7856</td>
      <td>0.9317</td>
      <td>0.9314</td>
    </tr>
    <tr>
      <th>1</th>
      <td>61085.0</td>
      <td>San Tammaro</td>
      <td>3696.678415</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>2.09</td>
      <td>1.63</td>
      <td>1.63</td>
      <td>60.2521</td>
      <td>77.3722</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
    </tr>
    <tr>
      <th>3</th>
      <td>63011.0</td>
      <td>Caivano</td>
      <td>2722.117368</td>
      <td>1.34</td>
      <td>0.00</td>
      <td>1.32</td>
      <td>1.32</td>
      <td>1.32</td>
      <td>1.32</td>
      <td>35.9863</td>
      <td>35.9863</td>
      <td>35.9863</td>
      <td>0.0000</td>
      <td>36.5076</td>
    </tr>
    <tr>
      <th>2</th>
      <td>61099.0</td>
      <td>Villa Literno</td>
      <td>6182.490260</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>1.15</td>
      <td>1.19</td>
      <td>1.19</td>
      <td>1.19</td>
      <td>73.7065</td>
      <td>73.7065</td>
      <td>70.9893</td>
      <td>0.0000</td>
      <td>0.0000</td>
    </tr>
    <tr>
      <th>0</th>
      <td>61084.0</td>
      <td>Santa Maria la Fossa</td>
      <td>2972.966831</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>1.56</td>
      <td>1.07</td>
      <td>1.07</td>
      <td>31.7251</td>
      <td>46.3154</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
    </tr>
    <tr>
      <th>5</th>
      <td>64005.0</td>
      <td>Ariano Irpino</td>
      <td>18673.653095</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.14</td>
      <td>0.14</td>
      <td>0.14</td>
      <td>0.14</td>
      <td>25.9872</td>
      <td>25.9872</td>
      <td>25.9872</td>
      <td>0.0000</td>
      <td>0.0000</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>Qui abbiamo le più grandi discariche campane, cresciute con la crisi dei rifiuti di inizio anni 2000.</p>
</section>
<section id="aree-verdi-urbane" class="level3">
<h3 class="anchored" data-anchor-id="aree-verdi-urbane">2.3.6 Aree verdi urbane</h3>
<div class="cell" data-execution_count="37">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="co" style="color: #5E5E5E;"># Dati 1990</span></span>
<span id="cb42-2">green_urban_surface_1990 <span class="op" style="color: #5E5E5E;">=</span> focus_1990_group[focus_1990_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Green urban areas'</span>])]</span>
<span id="cb42-3">green_urban_surface_1990_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(green_urban_surface_1990.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>])[<span class="st" style="color: #20794D;">'surface_ha_1990'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb42-4">green_urban_surface_1990_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb42-5"></span>
<span id="cb42-6"><span class="co" style="color: #5E5E5E;"># Dati 2000</span></span>
<span id="cb42-7">green_urban_surface_2000 <span class="op" style="color: #5E5E5E;">=</span> focus_2000_group[focus_2000_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Green urban areas'</span>])]</span>
<span id="cb42-8">green_urban_surface_2000_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(green_urban_surface_2000.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2000'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb42-9">green_urban_surface_2000_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb42-10"></span>
<span id="cb42-11"><span class="co" style="color: #5E5E5E;"># Dati 2006</span></span>
<span id="cb42-12">green_urban_surface_2006 <span class="op" style="color: #5E5E5E;">=</span> focus_2006_group[focus_2006_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Green urban areas'</span>])]</span>
<span id="cb42-13">green_urban_surface_2006_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(green_urban_surface_2006.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2006'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb42-14">green_urban_surface_2006_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb42-15"></span>
<span id="cb42-16"><span class="co" style="color: #5E5E5E;"># Dati 2012</span></span>
<span id="cb42-17">green_urban_surface_2012 <span class="op" style="color: #5E5E5E;">=</span> focus_2012_group[focus_2012_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Green urban areas'</span>])]</span>
<span id="cb42-18">green_urban_surface_2012_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(green_urban_surface_2012.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2012'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb42-19">green_urban_surface_2012_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb42-20"></span>
<span id="cb42-21"><span class="co" style="color: #5E5E5E;"># Dati 2018</span></span>
<span id="cb42-22">green_urban_surface_2018 <span class="op" style="color: #5E5E5E;">=</span> focus_2018_group[focus_2018_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Green urban areas'</span>])]</span>
<span id="cb42-23">green_urban_surface_2018_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(green_urban_surface_2018.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>, <span class="st" style="color: #20794D;">'comune'</span>, <span class="st" style="color: #20794D;">'sup_com_ha'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2018'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb42-24">green_urban_surface_2018_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb42-25"></span>
<span id="cb42-26"><span class="co" style="color: #5E5E5E;"># Dati aggregati</span></span>
<span id="cb42-27">focus_green_urban <span class="op" style="color: #5E5E5E;">=</span> [green_urban_surface_2018_group, green_urban_surface_2012_group, green_urban_surface_2006_group, green_urban_surface_2000_group, green_urban_surface_1990_group]</span>
<span id="cb42-28">focus_green_urban_df <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">reduce</span>(<span class="kw" style="color: #003B4F;">lambda</span>  left,right: pd.merge(left,right,on<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'pro_com'</span>], how<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'outer'</span>), focus_green_urban)</span>
<span id="cb42-29">focus_green_urban_df <span class="op" style="color: #5E5E5E;">=</span> focus_green_urban_df[focus_green_urban_df[<span class="st" style="color: #20794D;">'sup_com_ha'</span>] <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb42-30">focus_green_urban_df.fillna(<span class="dv" style="color: #AD0000;">0</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb42-31">focus_green_urban_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_1990'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_green_urban_df.surface_ha_1990 <span class="op" style="color: #5E5E5E;">/</span> focus_green_urban_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb42-32">focus_green_urban_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_2000'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_green_urban_df.surface_ha_2000 <span class="op" style="color: #5E5E5E;">/</span> focus_green_urban_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb42-33">focus_green_urban_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_2006'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_green_urban_df.surface_ha_2006 <span class="op" style="color: #5E5E5E;">/</span> focus_green_urban_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb42-34">focus_green_urban_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">6</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_2012'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_green_urban_df.surface_ha_2012 <span class="op" style="color: #5E5E5E;">/</span> focus_green_urban_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb42-35">focus_green_urban_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">7</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_2018'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_green_urban_df.surface_ha_2018 <span class="op" style="color: #5E5E5E;">/</span> focus_green_urban_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb42-36">focus_green_urban_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">8</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Perc.Diff. | 2018-2000'</span>, value<span class="op" style="color: #5E5E5E;">=</span>(focus_green_urban_df.perc_2018 <span class="op" style="color: #5E5E5E;">-</span> focus_green_urban_df.perc_2000))</span>
<span id="cb42-37">focus_green_urban_df.sort_values(by<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'Perc.Diff. | 2018-2000'</span>], ascending<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb42-38">focus_green_urban_df</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="37">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>pro_com</th>
      <th>comune</th>
      <th>sup_com_ha</th>
      <th>perc_1990</th>
      <th>perc_2000</th>
      <th>perc_2006</th>
      <th>perc_2012</th>
      <th>perc_2018</th>
      <th>Perc.Diff. | 2018-2000</th>
      <th>surface_ha_2018</th>
      <th>surface_ha_2012</th>
      <th>surface_ha_2006</th>
      <th>surface_ha_2000</th>
      <th>surface_ha_1990</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>3</th>
      <td>62062.0</td>
      <td>San Lorenzo Maggiore</td>
      <td>1629.550368</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>11.89</td>
      <td>11.89</td>
      <td>193.6792</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
    </tr>
    <tr>
      <th>2</th>
      <td>62037.0</td>
      <td>Guardia Sanframondi</td>
      <td>2109.748292</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>9.63</td>
      <td>9.63</td>
      <td>203.2666</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
    </tr>
    <tr>
      <th>8</th>
      <td>65078.0</td>
      <td>Nocera Inferiore</td>
      <td>2094.467250</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>1.91</td>
      <td>1.91</td>
      <td>1.91</td>
      <td>1.91</td>
      <td>39.9739</td>
      <td>39.9739</td>
      <td>39.9740</td>
      <td>0.0000</td>
      <td>0.0000</td>
    </tr>
    <tr>
      <th>6</th>
      <td>63060.0</td>
      <td>Pozzuoli</td>
      <td>4343.389600</td>
      <td>0.96</td>
      <td>0.61</td>
      <td>0.68</td>
      <td>0.68</td>
      <td>0.68</td>
      <td>0.07</td>
      <td>29.4516</td>
      <td>29.4516</td>
      <td>29.4517</td>
      <td>26.6666</td>
      <td>41.7480</td>
    </tr>
    <tr>
      <th>0</th>
      <td>61018.0</td>
      <td>Casagiove</td>
      <td>635.694991</td>
      <td>0.79</td>
      <td>0.79</td>
      <td>0.79</td>
      <td>0.79</td>
      <td>0.79</td>
      <td>0.00</td>
      <td>5.0499</td>
      <td>5.0499</td>
      <td>5.0499</td>
      <td>5.0499</td>
      <td>5.0496</td>
    </tr>
    <tr>
      <th>1</th>
      <td>61022.0</td>
      <td>Caserta</td>
      <td>5406.845910</td>
      <td>2.50</td>
      <td>2.50</td>
      <td>2.50</td>
      <td>2.50</td>
      <td>2.50</td>
      <td>0.00</td>
      <td>135.0386</td>
      <td>135.0386</td>
      <td>135.0386</td>
      <td>135.0386</td>
      <td>135.0388</td>
    </tr>
    <tr>
      <th>5</th>
      <td>63059.0</td>
      <td>Portici</td>
      <td>460.130721</td>
      <td>0.00</td>
      <td>12.99</td>
      <td>12.99</td>
      <td>12.99</td>
      <td>12.99</td>
      <td>0.00</td>
      <td>59.7546</td>
      <td>59.7546</td>
      <td>59.7546</td>
      <td>59.7546</td>
      <td>0.0000</td>
    </tr>
    <tr>
      <th>7</th>
      <td>63064.0</td>
      <td>Ercolano</td>
      <td>1989.359843</td>
      <td>0.00</td>
      <td>0.21</td>
      <td>0.21</td>
      <td>0.21</td>
      <td>0.21</td>
      <td>0.00</td>
      <td>4.2403</td>
      <td>4.2403</td>
      <td>4.2403</td>
      <td>4.2404</td>
      <td>0.0000</td>
    </tr>
    <tr>
      <th>4</th>
      <td>63049.0</td>
      <td>Napoli</td>
      <td>11894.407425</td>
      <td>3.15</td>
      <td>4.44</td>
      <td>4.47</td>
      <td>4.26</td>
      <td>4.26</td>
      <td>-0.18</td>
      <td>506.6039</td>
      <td>506.6039</td>
      <td>531.7766</td>
      <td>527.6737</td>
      <td>374.2016</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
</section>
</section>
<section id="analisi-a-scala-nazionale" class="level1">
<h1>3. Analisi a scala nazionale</h1>
<p>Fino a qui abbiamo visto una analisi focalizzata sulla Campania. Di seguito ripeterò tutte le analisi ma a scala nazionale.</p>
<section id="stato-al-1990-1" class="level3">
<h3 class="anchored" data-anchor-id="stato-al-1990-1">3.1.1 Stato al 1990</h3>
<div class="cell" data-execution_count="38">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">clc1990_label1 <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(clc1990.groupby(<span class="st" style="color: #20794D;">'label1'</span>)[<span class="st" style="color: #20794D;">'surface_ha_1990'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb43-2">clc1990_label1.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb43-3">clc1990_label1.rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'label1'</span>: <span class="st" style="color: #20794D;">'CORINE Land Cover - level 1'</span>}, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb43-4">clc1990_label1</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="38">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>CORINE Land Cover - level 1</th>
      <th>surface_ha_1990</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Agricultural areas</td>
      <td>1.582623e+07</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Artificial surfaces</td>
      <td>1.347486e+06</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Forest and semi natural areas</td>
      <td>1.263937e+07</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Water bodies</td>
      <td>3.122569e+05</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Wetlands</td>
      <td>6.897894e+04</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="39">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">clc1990_label2 <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(clc1990.groupby(<span class="st" style="color: #20794D;">'label2'</span>)[<span class="st" style="color: #20794D;">'surface_ha_1990'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb44-2">clc1990_label2.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb44-3">clc1990_label2.rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'label2'</span>: <span class="st" style="color: #20794D;">'CORINE Land Cover - level 2'</span>}, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb44-4">clc1990_label2</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="39">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>CORINE Land Cover - level 2</th>
      <th>surface_ha_1990</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Arable land</td>
      <td>8.392567e+06</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Artificial, non-agricultural vegetated areas</td>
      <td>2.798779e+04</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Forests</td>
      <td>7.831590e+06</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Heterogeneous agricultural areas</td>
      <td>4.778702e+06</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Industrial, commercial and transport units</td>
      <td>2.363946e+05</td>
    </tr>
    <tr>
      <th>5</th>
      <td>Inland waters</td>
      <td>2.175910e+05</td>
    </tr>
    <tr>
      <th>6</th>
      <td>Inland wetlands</td>
      <td>1.585394e+04</td>
    </tr>
    <tr>
      <th>7</th>
      <td>Marine waters</td>
      <td>9.466595e+04</td>
    </tr>
    <tr>
      <th>8</th>
      <td>Maritime wetlands</td>
      <td>5.312500e+04</td>
    </tr>
    <tr>
      <th>9</th>
      <td>Mine, dump and construction sites</td>
      <td>5.153499e+04</td>
    </tr>
    <tr>
      <th>10</th>
      <td>Open spaces with little or no vegetation</td>
      <td>1.106064e+06</td>
    </tr>
    <tr>
      <th>11</th>
      <td>Pastures</td>
      <td>4.560942e+05</td>
    </tr>
    <tr>
      <th>12</th>
      <td>Permanent crops</td>
      <td>2.198869e+06</td>
    </tr>
    <tr>
      <th>13</th>
      <td>Scrub and/or herbaceous vegetation associations</td>
      <td>3.701717e+06</td>
    </tr>
    <tr>
      <th>14</th>
      <td>Urban fabric</td>
      <td>1.031569e+06</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="40">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1">clc1990_label3 <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(clc1990.groupby(<span class="st" style="color: #20794D;">'label3'</span>)[<span class="st" style="color: #20794D;">'surface_ha_1990'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb45-2">clc1990_label3.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb45-3">clc1990_label3.rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'label3'</span>: <span class="st" style="color: #20794D;">'CORINE Land Cover - level 3'</span>}, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb45-4">clc1990_label3</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="40">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>CORINE Land Cover - level 3</th>
      <th>surface_ha_1990</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Agro-forestry areas</td>
      <td>1.875953e+05</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Airports</td>
      <td>2.061481e+04</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Annual crops associated with permanent crops</td>
      <td>3.948806e+05</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Bare rocks</td>
      <td>4.823748e+05</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Beaches, dunes, sands</td>
      <td>8.237502e+04</td>
    </tr>
    <tr>
      <th>5</th>
      <td>Broad-leaved forest</td>
      <td>5.477418e+06</td>
    </tr>
    <tr>
      <th>6</th>
      <td>Burnt areas</td>
      <td>3.688807e+03</td>
    </tr>
    <tr>
      <th>7</th>
      <td>Coastal lagoons</td>
      <td>9.441910e+04</td>
    </tr>
    <tr>
      <th>8</th>
      <td>Complex cultivation patterns</td>
      <td>2.208152e+06</td>
    </tr>
    <tr>
      <th>9</th>
      <td>Coniferous forest</td>
      <td>1.322878e+06</td>
    </tr>
    <tr>
      <th>10</th>
      <td>Construction sites</td>
      <td>6.608806e+03</td>
    </tr>
    <tr>
      <th>11</th>
      <td>Continuous urban fabric</td>
      <td>1.465191e+05</td>
    </tr>
    <tr>
      <th>12</th>
      <td>Discontinuous urban fabric</td>
      <td>8.850498e+05</td>
    </tr>
    <tr>
      <th>13</th>
      <td>Dump sites</td>
      <td>1.813232e+03</td>
    </tr>
    <tr>
      <th>14</th>
      <td>Estuaries</td>
      <td>2.468468e+02</td>
    </tr>
    <tr>
      <th>15</th>
      <td>Fruit trees and berry plantations</td>
      <td>3.995981e+05</td>
    </tr>
    <tr>
      <th>16</th>
      <td>Glaciers and perpetual snow</td>
      <td>5.296383e+04</td>
    </tr>
    <tr>
      <th>17</th>
      <td>Green urban areas</td>
      <td>1.029782e+04</td>
    </tr>
    <tr>
      <th>18</th>
      <td>Industrial or commercial units</td>
      <td>1.935121e+05</td>
    </tr>
    <tr>
      <th>19</th>
      <td>Inland marshes</td>
      <td>1.581604e+04</td>
    </tr>
    <tr>
      <th>20</th>
      <td>Land principally occupied by agriculture, with...</td>
      <td>1.988074e+06</td>
    </tr>
    <tr>
      <th>21</th>
      <td>Mineral extraction sites</td>
      <td>4.311295e+04</td>
    </tr>
    <tr>
      <th>22</th>
      <td>Mixed forest</td>
      <td>1.031295e+06</td>
    </tr>
    <tr>
      <th>23</th>
      <td>Moors and heathland</td>
      <td>2.759264e+05</td>
    </tr>
    <tr>
      <th>24</th>
      <td>Natural grasslands</td>
      <td>1.452501e+06</td>
    </tr>
    <tr>
      <th>25</th>
      <td>Non-irrigated arable land</td>
      <td>8.075700e+06</td>
    </tr>
    <tr>
      <th>26</th>
      <td>Olive groves</td>
      <td>1.263777e+06</td>
    </tr>
    <tr>
      <th>27</th>
      <td>Pastures</td>
      <td>4.560942e+05</td>
    </tr>
    <tr>
      <th>28</th>
      <td>Peat bogs</td>
      <td>3.790290e+01</td>
    </tr>
    <tr>
      <th>29</th>
      <td>Permanently irrigated land</td>
      <td>4.081855e+04</td>
    </tr>
    <tr>
      <th>30</th>
      <td>Port areas</td>
      <td>9.735064e+03</td>
    </tr>
    <tr>
      <th>31</th>
      <td>Rice fields</td>
      <td>2.760486e+05</td>
    </tr>
    <tr>
      <th>32</th>
      <td>Road and rail networks and associated land</td>
      <td>1.253256e+04</td>
    </tr>
    <tr>
      <th>33</th>
      <td>Salines</td>
      <td>1.000881e+04</td>
    </tr>
    <tr>
      <th>34</th>
      <td>Salt marshes</td>
      <td>4.311619e+04</td>
    </tr>
    <tr>
      <th>35</th>
      <td>Sclerophyllous vegetation</td>
      <td>9.609517e+05</td>
    </tr>
    <tr>
      <th>36</th>
      <td>Sparsely vegetated areas</td>
      <td>4.846612e+05</td>
    </tr>
    <tr>
      <th>37</th>
      <td>Sport and leisure facilities</td>
      <td>1.768997e+04</td>
    </tr>
    <tr>
      <th>38</th>
      <td>Transitional woodland-shrub</td>
      <td>1.012338e+06</td>
    </tr>
    <tr>
      <th>39</th>
      <td>Vineyards</td>
      <td>5.354933e+05</td>
    </tr>
    <tr>
      <th>40</th>
      <td>Water bodies</td>
      <td>1.681098e+05</td>
    </tr>
    <tr>
      <th>41</th>
      <td>Water courses</td>
      <td>4.948117e+04</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
<section id="stato-al-2000-1" class="level3">
<h3 class="anchored" data-anchor-id="stato-al-2000-1">3.1.2 Stato al 2000</h3>
<div class="cell" data-execution_count="41">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1">clc2000_label1 <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(clc2000.groupby(<span class="st" style="color: #20794D;">'label1'</span>)[<span class="st" style="color: #20794D;">'surface_ha_2000'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb46-2">clc2000_label1.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb46-3">clc2000_label1.rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'label1'</span>: <span class="st" style="color: #20794D;">'CORINE Land Cover - level 1'</span>}, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb46-4"></span>
<span id="cb46-5">clc2000_label2 <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(clc2000.groupby(<span class="st" style="color: #20794D;">'label2'</span>)[<span class="st" style="color: #20794D;">'surface_ha_2000'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb46-6">clc2000_label2.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb46-7">clc2000_label2.rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'label2'</span>: <span class="st" style="color: #20794D;">'CORINE Land Cover - level 2'</span>}, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb46-8"></span>
<span id="cb46-9">clc2000_label3 <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(clc2000.groupby(<span class="st" style="color: #20794D;">'label3'</span>)[<span class="st" style="color: #20794D;">'surface_ha_2000'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb46-10">clc2000_label3.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb46-11">clc2000_label3.rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'label3'</span>: <span class="st" style="color: #20794D;">'CORINE Land Cover - level 3'</span>}, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
</details>
</div>
</section>
<section id="stato-al-2006-1" class="level3">
<h3 class="anchored" data-anchor-id="stato-al-2006-1">3.1.3 Stato al 2006</h3>
<div class="cell" data-execution_count="42">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1">clc2006_label1 <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(clc2006.groupby(<span class="st" style="color: #20794D;">'label1'</span>)[<span class="st" style="color: #20794D;">'surface_ha_2006'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb47-2">clc2006_label1.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb47-3">clc2006_label1.rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'label1'</span>: <span class="st" style="color: #20794D;">'CORINE Land Cover - level 1'</span>}, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb47-4"></span>
<span id="cb47-5">clc2006_label2 <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(clc2006.groupby(<span class="st" style="color: #20794D;">'label2'</span>)[<span class="st" style="color: #20794D;">'surface_ha_2006'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb47-6">clc2006_label2.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb47-7">clc2006_label2.rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'label2'</span>: <span class="st" style="color: #20794D;">'CORINE Land Cover - level 2'</span>}, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb47-8"></span>
<span id="cb47-9">clc2006_label3 <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(clc2006.groupby(<span class="st" style="color: #20794D;">'label3'</span>)[<span class="st" style="color: #20794D;">'surface_ha_2006'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb47-10">clc2006_label3.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb47-11">clc2006_label3.rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'label3'</span>: <span class="st" style="color: #20794D;">'CORINE Land Cover - level 3'</span>}, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
</details>
</div>
</section>
<section id="stato-al-2012-1" class="level3">
<h3 class="anchored" data-anchor-id="stato-al-2012-1">3.1.4 Stato al 2012</h3>
<div class="cell" data-execution_count="43">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1">clc2012_label1 <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(clc2012.groupby(<span class="st" style="color: #20794D;">'label1'</span>)[<span class="st" style="color: #20794D;">'surface_ha_2012'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb48-2">clc2012_label1.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb48-3">clc2012_label1.rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'label1'</span>: <span class="st" style="color: #20794D;">'CORINE Land Cover - level 1'</span>}, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb48-4"></span>
<span id="cb48-5">clc2012_label2 <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(clc2012.groupby(<span class="st" style="color: #20794D;">'label2'</span>)[<span class="st" style="color: #20794D;">'surface_ha_2012'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb48-6">clc2012_label2.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb48-7">clc2012_label2.rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'label2'</span>: <span class="st" style="color: #20794D;">'CORINE Land Cover - level 2'</span>}, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb48-8"></span>
<span id="cb48-9">clc2012_label3 <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(clc2012.groupby(<span class="st" style="color: #20794D;">'label3'</span>)[<span class="st" style="color: #20794D;">'surface_ha_2012'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb48-10">clc2012_label3.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb48-11">clc2012_label3.rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'label3'</span>: <span class="st" style="color: #20794D;">'CORINE Land Cover - level 3'</span>}, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
</details>
</div>
</section>
<section id="stato-al-2018-1" class="level3">
<h3 class="anchored" data-anchor-id="stato-al-2018-1">3.1.5 Stato al 2018</h3>
<div class="cell" data-execution_count="44">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1">clc2018_label1 <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(clc2018.groupby(<span class="st" style="color: #20794D;">'label1'</span>)[<span class="st" style="color: #20794D;">'surface_ha_2018'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb49-2">clc2018_label1.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb49-3">clc2018_label1.rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'label1'</span>: <span class="st" style="color: #20794D;">'CORINE Land Cover - level 1'</span>}, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb49-4"></span>
<span id="cb49-5">clc2018_label2 <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(clc2018.groupby(<span class="st" style="color: #20794D;">'label2'</span>)[<span class="st" style="color: #20794D;">'surface_ha_2018'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb49-6">clc2018_label2.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb49-7">clc2018_label2.rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'label2'</span>: <span class="st" style="color: #20794D;">'CORINE Land Cover - level 2'</span>}, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb49-8"></span>
<span id="cb49-9">clc2018_label3 <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(clc2018.groupby(<span class="st" style="color: #20794D;">'label3'</span>)[<span class="st" style="color: #20794D;">'surface_ha_2018'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb49-10">clc2018_label3.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb49-11">clc2018_label3.rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'label3'</span>: <span class="st" style="color: #20794D;">'CORINE Land Cover - level 3'</span>}, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
</details>
</div>
</section>
<section id="grafici-1" class="level2">
<h2 class="anchored" data-anchor-id="grafici-1">3.2 Grafici</h2>
<p>Mi limiterò a commentare solo la analisi a scala nazionale perchè quelle a scala comunale hanno risultati che, sebbene intuibili dal punto di vista delle variazioni, hanno una valenza territoriale molto forte(come lo è stato per la Campania) e non conoscendo tutti quei territori preferisco lasciare a chi è del posto le considerazioni del caso.</p>
<section id="grafici-per-il-livello-1-1" class="level3">
<h3 class="anchored" data-anchor-id="grafici-per-il-livello-1-1">3.2.1 Grafici per il livello 1</h3>
<div class="cell" data-execution_count="45">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1">lvl1_naz <span class="op" style="color: #5E5E5E;">=</span> [clc1990_label1, clc2000_label1, clc2006_label1, clc2012_label1, clc2018_label1]</span>
<span id="cb50-2">lvl1_naz_df <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">reduce</span>(<span class="kw" style="color: #003B4F;">lambda</span>  left,right: pd.merge(left,right,on<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'CORINE Land Cover - level 1'</span>], how<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'outer'</span>), lvl1_naz)</span>
<span id="cb50-3">lvl1_naz_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">6</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Surf.Diff. | 2018-1990'</span>, value<span class="op" style="color: #5E5E5E;">=</span>(lvl1_naz_df.surface_ha_2018 <span class="op" style="color: #5E5E5E;">-</span> lvl1_naz_df.surface_ha_1990))</span>
<span id="cb50-4">lvl1_naz_df.fillna(<span class="dv" style="color: #AD0000;">0</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb50-5">lvl1_naz_df.set_index(<span class="st" style="color: #20794D;">'CORINE Land Cover - level 1'</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb50-6">lvl1_naz_df.rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'surface_ha_1990'</span>: <span class="st" style="color: #20794D;">'1990'</span>, <span class="st" style="color: #20794D;">'surface_ha_2000'</span>: <span class="st" style="color: #20794D;">'2000'</span>, <span class="st" style="color: #20794D;">'surface_ha_2006'</span>: <span class="st" style="color: #20794D;">'2006'</span>, <span class="st" style="color: #20794D;">'surface_ha_2012'</span>: <span class="st" style="color: #20794D;">'2012'</span>, <span class="st" style="color: #20794D;">'surface_ha_2018'</span>: <span class="st" style="color: #20794D;">'2018'</span>}, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb50-7">lvl1_naz_df</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="45">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>1990</th>
      <th>2000</th>
      <th>2006</th>
      <th>2012</th>
      <th>2018</th>
      <th>Surf.Diff. | 2018-1990</th>
    </tr>
    <tr>
      <th>CORINE Land Cover - level 1</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>Agricultural areas</th>
      <td>1.582623e+07</td>
      <td>1.580692e+07</td>
      <td>1.578178e+07</td>
      <td>1.569692e+07</td>
      <td>1.568826e+07</td>
      <td>-137975.0803</td>
    </tr>
    <tr>
      <th>Artificial surfaces</th>
      <td>1.347486e+06</td>
      <td>1.443652e+06</td>
      <td>1.562164e+06</td>
      <td>1.646988e+06</td>
      <td>1.655775e+06</td>
      <td>308288.5459</td>
    </tr>
    <tr>
      <th>Forest and semi natural areas</th>
      <td>1.263937e+07</td>
      <td>1.256172e+07</td>
      <td>1.246520e+07</td>
      <td>1.246121e+07</td>
      <td>1.245564e+07</td>
      <td>-183733.2104</td>
    </tr>
    <tr>
      <th>Water bodies</th>
      <td>3.122569e+05</td>
      <td>3.152274e+05</td>
      <td>3.145802e+05</td>
      <td>3.228559e+05</td>
      <td>3.226620e+05</td>
      <td>10405.1059</td>
    </tr>
    <tr>
      <th>Wetlands</th>
      <td>6.897894e+04</td>
      <td>6.780469e+04</td>
      <td>7.179663e+04</td>
      <td>6.758186e+04</td>
      <td>6.796058e+04</td>
      <td>-1018.3605</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="46">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1">fig1_naz <span class="op" style="color: #5E5E5E;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">10</span>), dpi<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb51-2">sub_fig_naz <span class="op" style="color: #5E5E5E;">=</span> GridSpec(nrows<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, ncols<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, figure<span class="op" style="color: #5E5E5E;">=</span>fig1_naz, hspace<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.35</span>)</span>
<span id="cb51-3">ax_naz <span class="op" style="color: #5E5E5E;">=</span> fig1_naz.add_subplot(sub_fig_naz[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb51-4">lvl1_naz_df.plot.bar(ax<span class="op" style="color: #5E5E5E;">=</span>ax_naz, rot<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb51-5"></span>
<span id="cb51-6">ax_naz.yaxis.set_label_text(<span class="st" style="color: #20794D;">'ha'</span>)</span>
<span id="cb51-7">ax_naz.set_xlabel(<span class="st" style="color: #20794D;">''</span>)</span>
<span id="cb51-8"></span>
<span id="cb51-9">plt.legend(loc<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'best'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="46">
<pre><code>&lt;matplotlib.legend.Legend at 0x7fe2d08eedc0&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://pygisblog.massimilianomoraca.me/posts/2022-08-26/analisi-della-copertura-del-suolo-in-italia_files/figure-html/cell-46-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>In questo livello di CLC si nota una certa somiglianza con ciò che abbiamo visto per la Campania: aree artificiali in aumento, aree forestate ed agricole in regressione.</p>
</section>
<section id="grafici-per-il-livello-2-1" class="level3">
<h3 class="anchored" data-anchor-id="grafici-per-il-livello-2-1">3.2.2 Grafici per il livello 2</h3>
<div class="cell" data-execution_count="47">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1">lvl2_naz <span class="op" style="color: #5E5E5E;">=</span> [clc1990_label2, clc2000_label2, clc2006_label2, clc2012_label2, clc2018_label2]</span>
<span id="cb53-2">lvl2_naz_df <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">reduce</span>(<span class="kw" style="color: #003B4F;">lambda</span>  left,right: pd.merge(left,right,on<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'CORINE Land Cover - level 2'</span>], how<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'outer'</span>), lvl2_naz)</span>
<span id="cb53-3">lvl2_naz_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">6</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Surf.Diff. | 2000-1990'</span>, value<span class="op" style="color: #5E5E5E;">=</span>(lvl2_naz_df.surface_ha_2000 <span class="op" style="color: #5E5E5E;">-</span> lvl2_naz_df.surface_ha_1990))</span>
<span id="cb53-4">lvl2_naz_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">7</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Surf.Diff. | 2006-2000'</span>, value<span class="op" style="color: #5E5E5E;">=</span>(lvl2_naz_df.surface_ha_2006 <span class="op" style="color: #5E5E5E;">-</span> lvl2_naz_df.surface_ha_2000))</span>
<span id="cb53-5">lvl2_naz_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">8</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Surf.Diff. | 2012-2006'</span>, value<span class="op" style="color: #5E5E5E;">=</span>(lvl2_naz_df.surface_ha_2012 <span class="op" style="color: #5E5E5E;">-</span> lvl2_naz_df.surface_ha_2006))</span>
<span id="cb53-6">lvl2_naz_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">9</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Surf.Diff. | 2018-2012'</span>, value<span class="op" style="color: #5E5E5E;">=</span>(lvl2_naz_df.surface_ha_2018 <span class="op" style="color: #5E5E5E;">-</span> lvl2_naz_df.surface_ha_2012))</span>
<span id="cb53-7">lvl2_naz_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">9</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Surf.Diff. | 2018-1990'</span>, value<span class="op" style="color: #5E5E5E;">=</span>(lvl2_naz_df.surface_ha_2018 <span class="op" style="color: #5E5E5E;">-</span> lvl2_naz_df.surface_ha_1990))</span>
<span id="cb53-8">lvl2_naz_df.fillna(<span class="dv" style="color: #AD0000;">0</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb53-9">lvl2_naz_df.set_index(<span class="st" style="color: #20794D;">'CORINE Land Cover - level 2'</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb53-10">lvl2_naz_df <span class="op" style="color: #5E5E5E;">=</span> lvl2_naz_df[[<span class="st" style="color: #20794D;">'Surf.Diff. | 2000-1990'</span>, <span class="st" style="color: #20794D;">'Surf.Diff. | 2006-2000'</span>, <span class="st" style="color: #20794D;">'Surf.Diff. | 2012-2006'</span>, <span class="st" style="color: #20794D;">'Surf.Diff. | 2018-2012'</span>, <span class="st" style="color: #20794D;">'Surf.Diff. | 2018-1990'</span>]]</span>
<span id="cb53-11">lvl2_naz_df</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="47">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Surf.Diff. | 2000-1990</th>
      <th>Surf.Diff. | 2006-2000</th>
      <th>Surf.Diff. | 2012-2006</th>
      <th>Surf.Diff. | 2018-2012</th>
      <th>Surf.Diff. | 2018-1990</th>
    </tr>
    <tr>
      <th>CORINE Land Cover - level 2</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>Arable land</th>
      <td>55207.0658</td>
      <td>-10271.7226</td>
      <td>-90231.5817</td>
      <td>-12360.8275</td>
      <td>-57657.0660</td>
    </tr>
    <tr>
      <th>Artificial, non-agricultural vegetated areas</th>
      <td>5554.0023</td>
      <td>4316.9704</td>
      <td>4861.1250</td>
      <td>662.4738</td>
      <td>15394.5715</td>
    </tr>
    <tr>
      <th>Forests</th>
      <td>42767.2886</td>
      <td>86747.2016</td>
      <td>-16412.5022</td>
      <td>-6762.5701</td>
      <td>106339.4179</td>
    </tr>
    <tr>
      <th>Heterogeneous agricultural areas</th>
      <td>3141.8711</td>
      <td>-80525.4734</td>
      <td>48412.0084</td>
      <td>-629.6565</td>
      <td>-29601.2504</td>
    </tr>
    <tr>
      <th>Industrial, commercial and transport units</th>
      <td>34135.2946</td>
      <td>44503.3245</td>
      <td>38255.6049</td>
      <td>6654.8030</td>
      <td>123549.0270</td>
    </tr>
    <tr>
      <th>Inland waters</th>
      <td>683.7863</td>
      <td>1188.3191</td>
      <td>3352.2153</td>
      <td>-24.4133</td>
      <td>5199.9074</td>
    </tr>
    <tr>
      <th>Inland wetlands</th>
      <td>1132.9251</td>
      <td>1989.9128</td>
      <td>227.6485</td>
      <td>252.6951</td>
      <td>3603.1815</td>
    </tr>
    <tr>
      <th>Marine waters</th>
      <td>2286.6599</td>
      <td>-1835.4393</td>
      <td>4923.4371</td>
      <td>-169.4592</td>
      <td>5205.1985</td>
    </tr>
    <tr>
      <th>Maritime wetlands</th>
      <td>-2307.1754</td>
      <td>2002.0212</td>
      <td>-4442.4099</td>
      <td>126.0221</td>
      <td>-4621.5420</td>
    </tr>
    <tr>
      <th>Mine, dump and construction sites</th>
      <td>4408.4545</td>
      <td>733.9772</td>
      <td>1327.1069</td>
      <td>-373.1135</td>
      <td>6096.4251</td>
    </tr>
    <tr>
      <th>Open spaces with little or no vegetation</th>
      <td>-114342.2191</td>
      <td>-78796.3505</td>
      <td>650778.9658</td>
      <td>24555.2063</td>
      <td>482195.6025</td>
    </tr>
    <tr>
      <th>Pastures</th>
      <td>-28097.0989</td>
      <td>2041.0694</td>
      <td>-15847.9600</td>
      <td>-97.1172</td>
      <td>-42001.1067</td>
    </tr>
    <tr>
      <th>Permanent crops</th>
      <td>-49565.7883</td>
      <td>63620.5499</td>
      <td>-27194.6323</td>
      <td>4424.2135</td>
      <td>-8715.6572</td>
    </tr>
    <tr>
      <th>Scrub and/or herbaceous vegetation associations</th>
      <td>-6080.8338</td>
      <td>-104468.5696</td>
      <td>-638349.3736</td>
      <td>-23369.4538</td>
      <td>-772268.2308</td>
    </tr>
    <tr>
      <th>Urban fabric</th>
      <td>52068.0313</td>
      <td>68957.2822</td>
      <td>40380.6911</td>
      <td>1842.5177</td>
      <td>163248.5223</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="48">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1">fig2_naz <span class="op" style="color: #5E5E5E;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">10</span>), dpi<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb54-2">sub_fig_naz <span class="op" style="color: #5E5E5E;">=</span> GridSpec(nrows<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, ncols<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, figure<span class="op" style="color: #5E5E5E;">=</span>fig2_naz, hspace<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.35</span>)</span>
<span id="cb54-3">ax_naz <span class="op" style="color: #5E5E5E;">=</span> fig2_naz.add_subplot(sub_fig_naz[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb54-4">lvl2_naz_df.plot.bar(ax<span class="op" style="color: #5E5E5E;">=</span>ax_naz, rot<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb54-5"></span>
<span id="cb54-6">ax_naz.yaxis.set_label_text(<span class="st" style="color: #20794D;">'ha'</span>)</span>
<span id="cb54-7">ax_naz.set_xlabel(<span class="st" style="color: #20794D;">''</span>)</span>
<span id="cb54-8"></span>
<span id="cb54-9">plt.xticks(rotation <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">90</span>)</span>
<span id="cb54-10">plt.legend(loc<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'best'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="48">
<pre><code>&lt;matplotlib.legend.Legend at 0x7fe2cdb88ee0&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://pygisblog.massimilianomoraca.me/posts/2022-08-26/analisi-della-copertura-del-suolo-in-italia_files/figure-html/cell-48-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>Anche qui c’è una certa somiglianza con ciò che accade in Campania.</p>
</section>
<section id="grafici-per-il-livello-3-1" class="level3">
<h3 class="anchored" data-anchor-id="grafici-per-il-livello-3-1">3.2.3 Grafici per il livello 3</h3>
<div class="cell" data-execution_count="49">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1">lvl3_naz <span class="op" style="color: #5E5E5E;">=</span> [clc1990_label3, clc2000_label3, clc2006_label3, clc2012_label3, clc2018_label3]</span>
<span id="cb56-2">lvl3_naz_df <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">reduce</span>(<span class="kw" style="color: #003B4F;">lambda</span>  left,right: pd.merge(left,right,on<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'CORINE Land Cover - level 3'</span>], how<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'outer'</span>), lvl3_naz)</span>
<span id="cb56-3">lvl3_naz_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">6</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Surf.Diff. | 2000-1990'</span>, value<span class="op" style="color: #5E5E5E;">=</span>(lvl3_naz_df.surface_ha_2000 <span class="op" style="color: #5E5E5E;">-</span> lvl3_naz_df.surface_ha_1990))</span>
<span id="cb56-4">lvl3_naz_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">7</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Surf.Diff. | 2006-2000'</span>, value<span class="op" style="color: #5E5E5E;">=</span>(lvl3_naz_df.surface_ha_2006 <span class="op" style="color: #5E5E5E;">-</span> lvl3_naz_df.surface_ha_2000))</span>
<span id="cb56-5">lvl3_naz_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">8</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Surf.Diff. | 2012-2006'</span>, value<span class="op" style="color: #5E5E5E;">=</span>(lvl3_naz_df.surface_ha_2012 <span class="op" style="color: #5E5E5E;">-</span> lvl3_naz_df.surface_ha_2006))</span>
<span id="cb56-6">lvl3_naz_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">9</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Surf.Diff. | 2018-2012'</span>, value<span class="op" style="color: #5E5E5E;">=</span>(lvl3_naz_df.surface_ha_2018 <span class="op" style="color: #5E5E5E;">-</span> lvl3_naz_df.surface_ha_2012))</span>
<span id="cb56-7">lvl3_naz_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">9</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Surf.Diff. | 2018-1990'</span>, value<span class="op" style="color: #5E5E5E;">=</span>(lvl3_naz_df.surface_ha_2018 <span class="op" style="color: #5E5E5E;">-</span> lvl3_naz_df.surface_ha_1990))</span>
<span id="cb56-8">lvl3_naz_df.set_index(<span class="st" style="color: #20794D;">'CORINE Land Cover - level 3'</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb56-9">lvl3_naz_df.fillna(<span class="dv" style="color: #AD0000;">0</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb56-10">lvl3_naz_df</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="49">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>surface_ha_1990</th>
      <th>surface_ha_2000</th>
      <th>surface_ha_2006</th>
      <th>surface_ha_2012</th>
      <th>surface_ha_2018</th>
      <th>Surf.Diff. | 2000-1990</th>
      <th>Surf.Diff. | 2006-2000</th>
      <th>Surf.Diff. | 2012-2006</th>
      <th>Surf.Diff. | 2018-1990</th>
      <th>Surf.Diff. | 2018-2012</th>
    </tr>
    <tr>
      <th>CORINE Land Cover - level 3</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>Agro-forestry areas</th>
      <td>1.875953e+05</td>
      <td>1.752959e+05</td>
      <td>1.703568e+05</td>
      <td>1.690878e+05</td>
      <td>1.688554e+05</td>
      <td>-12299.3238</td>
      <td>-4939.1076</td>
      <td>-1269.0034</td>
      <td>-18739.8517</td>
      <td>-232.4169</td>
    </tr>
    <tr>
      <th>Airports</th>
      <td>2.061481e+04</td>
      <td>2.141885e+04</td>
      <td>2.264239e+04</td>
      <td>2.283700e+04</td>
      <td>2.288896e+04</td>
      <td>804.0433</td>
      <td>1223.5421</td>
      <td>194.6092</td>
      <td>2274.1471</td>
      <td>51.9525</td>
    </tr>
    <tr>
      <th>Annual crops associated with permanent crops</th>
      <td>3.948806e+05</td>
      <td>3.827196e+05</td>
      <td>2.056113e+05</td>
      <td>2.313810e+05</td>
      <td>2.311865e+05</td>
      <td>-12160.9920</td>
      <td>-177108.3339</td>
      <td>25769.7259</td>
      <td>-163694.1511</td>
      <td>-194.5511</td>
    </tr>
    <tr>
      <th>Bare rocks</th>
      <td>4.823748e+05</td>
      <td>4.475284e+05</td>
      <td>4.351080e+05</td>
      <td>4.347627e+05</td>
      <td>4.348511e+05</td>
      <td>-34846.4100</td>
      <td>-12420.4185</td>
      <td>-345.3238</td>
      <td>-47523.7192</td>
      <td>88.4331</td>
    </tr>
    <tr>
      <th>Beaches, dunes, sands</th>
      <td>8.237502e+04</td>
      <td>7.823843e+04</td>
      <td>7.584526e+04</td>
      <td>8.212965e+04</td>
      <td>8.230547e+04</td>
      <td>-4136.5882</td>
      <td>-2393.1717</td>
      <td>6284.3971</td>
      <td>-69.5490</td>
      <td>175.8138</td>
    </tr>
    <tr>
      <th>Broad-leaved forest</th>
      <td>5.477418e+06</td>
      <td>5.490370e+06</td>
      <td>5.558573e+06</td>
      <td>5.681647e+06</td>
      <td>5.674656e+06</td>
      <td>12952.5900</td>
      <td>68202.4264</td>
      <td>123074.4047</td>
      <td>197238.3262</td>
      <td>-6991.0949</td>
    </tr>
    <tr>
      <th>Burnt areas</th>
      <td>3.688807e+03</td>
      <td>7.726265e+03</td>
      <td>3.048895e+03</td>
      <td>1.040139e+04</td>
      <td>2.990311e+04</td>
      <td>4037.4575</td>
      <td>-4677.3703</td>
      <td>7352.4912</td>
      <td>26214.3071</td>
      <td>19501.7287</td>
    </tr>
    <tr>
      <th>Coastal lagoons</th>
      <td>9.441910e+04</td>
      <td>9.670576e+04</td>
      <td>9.487032e+04</td>
      <td>9.993340e+04</td>
      <td>9.976394e+04</td>
      <td>2286.6592</td>
      <td>-1835.4391</td>
      <td>5063.0745</td>
      <td>5344.8354</td>
      <td>-169.4592</td>
    </tr>
    <tr>
      <th>Complex cultivation patterns</th>
      <td>2.208152e+06</td>
      <td>2.171692e+06</td>
      <td>2.202763e+06</td>
      <td>2.204137e+06</td>
      <td>2.198169e+06</td>
      <td>-36460.6309</td>
      <td>31070.7372</td>
      <td>1374.0283</td>
      <td>-9983.7268</td>
      <td>-5967.8614</td>
    </tr>
    <tr>
      <th>Coniferous forest</th>
      <td>1.322878e+06</td>
      <td>1.289463e+06</td>
      <td>1.298869e+06</td>
      <td>1.290058e+06</td>
      <td>1.290082e+06</td>
      <td>-33414.6622</td>
      <td>9406.4133</td>
      <td>-8811.0217</td>
      <td>-32795.3931</td>
      <td>23.8775</td>
    </tr>
    <tr>
      <th>Construction sites</th>
      <td>6.608806e+03</td>
      <td>5.547377e+03</td>
      <td>5.315068e+03</td>
      <td>4.014755e+03</td>
      <td>3.311441e+03</td>
      <td>-1061.4296</td>
      <td>-232.3081</td>
      <td>-1300.3139</td>
      <td>-3297.3650</td>
      <td>-703.3134</td>
    </tr>
    <tr>
      <th>Continuous urban fabric</th>
      <td>1.465191e+05</td>
      <td>1.436331e+05</td>
      <td>1.408018e+05</td>
      <td>1.588690e+05</td>
      <td>1.589181e+05</td>
      <td>-2886.0313</td>
      <td>-2831.2332</td>
      <td>18067.1411</td>
      <td>12399.0267</td>
      <td>49.1501</td>
    </tr>
    <tr>
      <th>Discontinuous urban fabric</th>
      <td>8.850498e+05</td>
      <td>9.400039e+05</td>
      <td>1.011792e+06</td>
      <td>1.034106e+06</td>
      <td>1.035899e+06</td>
      <td>54954.0626</td>
      <td>71788.5154</td>
      <td>22313.5500</td>
      <td>150849.4956</td>
      <td>1793.3676</td>
    </tr>
    <tr>
      <th>Dump sites</th>
      <td>1.813232e+03</td>
      <td>1.799607e+03</td>
      <td>2.339274e+03</td>
      <td>4.358176e+03</td>
      <td>4.343699e+03</td>
      <td>-13.6242</td>
      <td>539.6663</td>
      <td>2018.9020</td>
      <td>2530.4679</td>
      <td>-14.4762</td>
    </tr>
    <tr>
      <th>Estuaries</th>
      <td>2.468468e+02</td>
      <td>2.468475e+02</td>
      <td>2.468473e+02</td>
      <td>1.072099e+02</td>
      <td>1.072099e+02</td>
      <td>0.0007</td>
      <td>-0.0002</td>
      <td>-139.6374</td>
      <td>-139.6369</td>
      <td>0.0000</td>
    </tr>
    <tr>
      <th>Fruit trees and berry plantations</th>
      <td>3.995981e+05</td>
      <td>4.020846e+05</td>
      <td>4.244182e+05</td>
      <td>3.778050e+05</td>
      <td>3.775497e+05</td>
      <td>2486.5267</td>
      <td>22333.5844</td>
      <td>-46613.1517</td>
      <td>-22048.3769</td>
      <td>-255.3363</td>
    </tr>
    <tr>
      <th>Glaciers and perpetual snow</th>
      <td>5.296383e+04</td>
      <td>4.158192e+04</td>
      <td>3.930079e+04</td>
      <td>3.905328e+04</td>
      <td>3.879693e+04</td>
      <td>-11381.9118</td>
      <td>-2281.1240</td>
      <td>-247.5108</td>
      <td>-14166.9013</td>
      <td>-256.3547</td>
    </tr>
    <tr>
      <th>Green urban areas</th>
      <td>1.029782e+04</td>
      <td>1.003812e+04</td>
      <td>1.107030e+04</td>
      <td>1.095570e+04</td>
      <td>1.134447e+04</td>
      <td>-259.6952</td>
      <td>1032.1803</td>
      <td>-114.6074</td>
      <td>1046.6534</td>
      <td>388.7757</td>
    </tr>
    <tr>
      <th>Industrial or commercial units</th>
      <td>1.935121e+05</td>
      <td>2.272337e+05</td>
      <td>2.679521e+05</td>
      <td>3.023072e+05</td>
      <td>3.069798e+05</td>
      <td>33721.5546</td>
      <td>40718.4407</td>
      <td>34355.0673</td>
      <td>113467.6588</td>
      <td>4672.5962</td>
    </tr>
    <tr>
      <th>Inland marshes</th>
      <td>1.581604e+04</td>
      <td>1.662644e+04</td>
      <td>1.856711e+04</td>
      <td>1.879475e+04</td>
      <td>1.904745e+04</td>
      <td>810.4000</td>
      <td>1940.6703</td>
      <td>227.6486</td>
      <td>3231.4140</td>
      <td>252.6951</td>
    </tr>
    <tr>
      <th>Land principally occupied by agriculture, with significant areas of natural vegetation</th>
      <td>1.988074e+06</td>
      <td>2.052137e+06</td>
      <td>2.122588e+06</td>
      <td>2.145125e+06</td>
      <td>2.150890e+06</td>
      <td>64062.8178</td>
      <td>70451.2309</td>
      <td>22537.2576</td>
      <td>162816.4792</td>
      <td>5765.1729</td>
    </tr>
    <tr>
      <th>Mineral extraction sites</th>
      <td>4.311295e+04</td>
      <td>4.859646e+04</td>
      <td>4.902308e+04</td>
      <td>4.963160e+04</td>
      <td>4.997628e+04</td>
      <td>5483.5083</td>
      <td>426.6190</td>
      <td>608.5188</td>
      <td>6863.3222</td>
      <td>344.6761</td>
    </tr>
    <tr>
      <th>Mixed forest</th>
      <td>1.031295e+06</td>
      <td>1.094524e+06</td>
      <td>1.103663e+06</td>
      <td>9.729868e+05</td>
      <td>9.731915e+05</td>
      <td>63229.3608</td>
      <td>9138.3619</td>
      <td>-130675.8852</td>
      <td>-58103.5152</td>
      <td>204.6473</td>
    </tr>
    <tr>
      <th>Moors and heathland</th>
      <td>2.759264e+05</td>
      <td>1.444961e+05</td>
      <td>1.486737e+05</td>
      <td>1.640305e+05</td>
      <td>1.640305e+05</td>
      <td>-131430.3790</td>
      <td>4177.6625</td>
      <td>15356.7528</td>
      <td>-111895.9638</td>
      <td>-0.0001</td>
    </tr>
    <tr>
      <th>Natural grasslands</th>
      <td>1.452501e+06</td>
      <td>1.471513e+06</td>
      <td>1.384153e+06</td>
      <td>7.696045e+05</td>
      <td>7.621346e+05</td>
      <td>19011.7396</td>
      <td>-87360.1247</td>
      <td>-614548.1465</td>
      <td>-690366.4484</td>
      <td>-7469.9168</td>
    </tr>
    <tr>
      <th>Non-irrigated arable land</th>
      <td>8.075700e+06</td>
      <td>8.119901e+06</td>
      <td>8.102169e+06</td>
      <td>7.985138e+06</td>
      <td>7.970837e+06</td>
      <td>44200.6553</td>
      <td>-17731.6848</td>
      <td>-117031.0990</td>
      <td>-104863.2290</td>
      <td>-14301.1005</td>
    </tr>
    <tr>
      <th>Olive groves</th>
      <td>1.263777e+06</td>
      <td>1.218749e+06</td>
      <td>1.211951e+06</td>
      <td>1.190108e+06</td>
      <td>1.189869e+06</td>
      <td>-45028.7668</td>
      <td>-6797.4286</td>
      <td>-21842.8690</td>
      <td>-73908.7495</td>
      <td>-239.6851</td>
    </tr>
    <tr>
      <th>Pastures</th>
      <td>4.560942e+05</td>
      <td>4.279971e+05</td>
      <td>4.300382e+05</td>
      <td>4.141902e+05</td>
      <td>4.140931e+05</td>
      <td>-28097.0989</td>
      <td>2041.0694</td>
      <td>-15847.9600</td>
      <td>-42001.1067</td>
      <td>-97.1172</td>
    </tr>
    <tr>
      <th>Peat bogs</th>
      <td>3.790290e+01</td>
      <td>3.604280e+02</td>
      <td>4.096705e+02</td>
      <td>4.096704e+02</td>
      <td>4.096704e+02</td>
      <td>322.5251</td>
      <td>49.2425</td>
      <td>-0.0001</td>
      <td>371.7675</td>
      <td>0.0000</td>
    </tr>
    <tr>
      <th>Permanently irrigated land</th>
      <td>4.081855e+04</td>
      <td>4.092019e+04</td>
      <td>4.131372e+04</td>
      <td>6.817000e+04</td>
      <td>6.996687e+04</td>
      <td>101.6408</td>
      <td>393.5360</td>
      <td>26856.2729</td>
      <td>29148.3233</td>
      <td>1796.8736</td>
    </tr>
    <tr>
      <th>Port areas</th>
      <td>9.735064e+03</td>
      <td>1.054597e+04</td>
      <td>1.073864e+04</td>
      <td>1.059175e+04</td>
      <td>1.070018e+04</td>
      <td>810.9039</td>
      <td>192.6727</td>
      <td>-146.8916</td>
      <td>965.1133</td>
      <td>108.4283</td>
    </tr>
    <tr>
      <th>Rice fields</th>
      <td>2.760486e+05</td>
      <td>2.869534e+05</td>
      <td>2.940198e+05</td>
      <td>2.939631e+05</td>
      <td>2.941065e+05</td>
      <td>10904.7697</td>
      <td>7066.4262</td>
      <td>-56.7556</td>
      <td>18057.8397</td>
      <td>143.3994</td>
    </tr>
    <tr>
      <th>Road and rail networks and associated land</th>
      <td>1.253256e+04</td>
      <td>1.133135e+04</td>
      <td>1.370002e+04</td>
      <td>1.755284e+04</td>
      <td>1.937467e+04</td>
      <td>-1201.2072</td>
      <td>2368.6690</td>
      <td>3852.8200</td>
      <td>6842.1078</td>
      <td>1821.8260</td>
    </tr>
    <tr>
      <th>Salines</th>
      <td>1.000881e+04</td>
      <td>9.634204e+03</td>
      <td>9.372738e+03</td>
      <td>9.278927e+03</td>
      <td>9.278927e+03</td>
      <td>-374.6057</td>
      <td>-261.4668</td>
      <td>-93.8107</td>
      <td>-729.8832</td>
      <td>0.0000</td>
    </tr>
    <tr>
      <th>Salt marshes</th>
      <td>4.311619e+04</td>
      <td>4.118362e+04</td>
      <td>4.344711e+04</td>
      <td>3.909851e+04</td>
      <td>3.922454e+04</td>
      <td>-1932.5697</td>
      <td>2263.4880</td>
      <td>-4348.5992</td>
      <td>-3891.6588</td>
      <td>126.0221</td>
    </tr>
    <tr>
      <th>Sclerophyllous vegetation</th>
      <td>9.609517e+05</td>
      <td>1.006894e+06</td>
      <td>1.015687e+06</td>
      <td>1.014778e+06</td>
      <td>1.002021e+06</td>
      <td>45941.8202</td>
      <td>8793.0178</td>
      <td>-908.2755</td>
      <td>41069.1211</td>
      <td>-12757.4414</td>
    </tr>
    <tr>
      <th>Sparsely vegetated areas</th>
      <td>4.846612e+05</td>
      <td>4.166465e+05</td>
      <td>3.596222e+05</td>
      <td>9.973571e+05</td>
      <td>1.002403e+06</td>
      <td>-68014.7666</td>
      <td>-57024.2660</td>
      <td>637734.9121</td>
      <td>517741.4649</td>
      <td>5045.5854</td>
    </tr>
    <tr>
      <th>Sport and leisure facilities</th>
      <td>1.768997e+04</td>
      <td>2.350367e+04</td>
      <td>2.678846e+04</td>
      <td>3.176419e+04</td>
      <td>3.203789e+04</td>
      <td>5813.6975</td>
      <td>3284.7901</td>
      <td>4975.7324</td>
      <td>14347.9181</td>
      <td>273.6981</td>
    </tr>
    <tr>
      <th>Transitional woodland-shrub</th>
      <td>1.012338e+06</td>
      <td>1.072734e+06</td>
      <td>1.042655e+06</td>
      <td>1.004405e+06</td>
      <td>1.001263e+06</td>
      <td>60395.9854</td>
      <td>-30079.1252</td>
      <td>-38249.7044</td>
      <td>-11074.9397</td>
      <td>-3142.0955</td>
    </tr>
    <tr>
      <th>Vineyards</th>
      <td>5.354933e+05</td>
      <td>5.284697e+05</td>
      <td>5.765541e+05</td>
      <td>6.178155e+05</td>
      <td>6.227348e+05</td>
      <td>-7023.5482</td>
      <td>48084.3941</td>
      <td>41261.3884</td>
      <td>87241.4692</td>
      <td>4919.2349</td>
    </tr>
    <tr>
      <th>Water bodies</th>
      <td>1.681098e+05</td>
      <td>1.698191e+05</td>
      <td>1.727610e+05</td>
      <td>1.755170e+05</td>
      <td>1.755253e+05</td>
      <td>1709.2964</td>
      <td>2941.8555</td>
      <td>2756.0595</td>
      <td>7415.4779</td>
      <td>8.2665</td>
    </tr>
    <tr>
      <th>Water courses</th>
      <td>4.948117e+04</td>
      <td>4.845566e+04</td>
      <td>4.670212e+04</td>
      <td>4.729828e+04</td>
      <td>4.726560e+04</td>
      <td>-1025.5101</td>
      <td>-1753.5364</td>
      <td>596.1558</td>
      <td>-2215.5705</td>
      <td>-32.6798</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="50">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1">fig3_naz <span class="op" style="color: #5E5E5E;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">10</span>), dpi<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb57-2">sub_fig_naz <span class="op" style="color: #5E5E5E;">=</span> GridSpec(nrows<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, ncols<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, figure<span class="op" style="color: #5E5E5E;">=</span>fig3_naz, hspace<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.35</span>)</span>
<span id="cb57-3">ax_naz <span class="op" style="color: #5E5E5E;">=</span> fig3_naz.add_subplot(sub_fig_naz[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb57-4">lvl3_df[<span class="st" style="color: #20794D;">'Surf.Diff. | 2018-1990'</span>].plot.bar(ax<span class="op" style="color: #5E5E5E;">=</span>ax_naz, rot<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb57-5"></span>
<span id="cb57-6">ax_naz.yaxis.set_label_text(<span class="st" style="color: #20794D;">'ha'</span>)</span>
<span id="cb57-7">ax_naz.set_xlabel(<span class="st" style="color: #20794D;">''</span>)</span>
<span id="cb57-8"></span>
<span id="cb57-9">plt.xticks(rotation <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">90</span>)</span>
<span id="cb57-10">plt.legend(loc<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'best'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="50">
<pre><code>&lt;matplotlib.legend.Legend at 0x7fe2d2f7ddc0&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://pygisblog.massimilianomoraca.me/posts/2022-08-26/analisi-della-copertura-del-suolo-in-italia_files/figure-html/cell-50-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>Purtroppo il <em>“trend campano”</em> è visibile anche qui. Il fatto è che ciò che accade a scala nazionale si ripete a scala regionale e scommetto anche provinciale in un po’ tutto il territorio italiano.</p>
</section>
</section>
<section id="focus-sui-comuni-1" class="level2">
<h2 class="anchored" data-anchor-id="focus-sui-comuni-1">3.3 Focus sui Comuni</h2>
<div class="cell" data-execution_count="51">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1"><span class="co" style="color: #5E5E5E;"># Dati 1990</span></span>
<span id="cb59-2">focus_1990_naz <span class="op" style="color: #5E5E5E;">=</span> clc1990[[<span class="st" style="color: #20794D;">'pro_com'</span>, <span class="st" style="color: #20794D;">'comune'</span>, <span class="st" style="color: #20794D;">'provincia'</span>, <span class="st" style="color: #20794D;">'regione'</span>, <span class="st" style="color: #20794D;">'sup_com_ha'</span>, <span class="st" style="color: #20794D;">'label3'</span>, <span class="st" style="color: #20794D;">'surface_ha_1990'</span>]]</span>
<span id="cb59-3">focus_1990_naz.set_index(<span class="st" style="color: #20794D;">'label3'</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb59-4">focus_naz_1990_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(focus_1990_naz.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>, <span class="st" style="color: #20794D;">'comune'</span>, <span class="st" style="color: #20794D;">'provincia'</span>, <span class="st" style="color: #20794D;">'regione'</span>, <span class="st" style="color: #20794D;">'sup_com_ha'</span>, <span class="st" style="color: #20794D;">'label3'</span>])[<span class="st" style="color: #20794D;">'surface_ha_1990'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb59-5">focus_naz_1990_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb59-6"></span>
<span id="cb59-7"><span class="co" style="color: #5E5E5E;"># Dati 2000</span></span>
<span id="cb59-8">focus_2000_naz <span class="op" style="color: #5E5E5E;">=</span> clc2000[[<span class="st" style="color: #20794D;">'pro_com'</span>, <span class="st" style="color: #20794D;">'comune'</span>, <span class="st" style="color: #20794D;">'provincia'</span>, <span class="st" style="color: #20794D;">'regione'</span>, <span class="st" style="color: #20794D;">'sup_com_ha'</span>, <span class="st" style="color: #20794D;">'label3'</span>, <span class="st" style="color: #20794D;">'surface_ha_2000'</span>]]</span>
<span id="cb59-9">focus_2000_naz.set_index(<span class="st" style="color: #20794D;">'label3'</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb59-10">focus_naz_2000_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(focus_2000_naz.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>, <span class="st" style="color: #20794D;">'comune'</span>, <span class="st" style="color: #20794D;">'provincia'</span>, <span class="st" style="color: #20794D;">'regione'</span>, <span class="st" style="color: #20794D;">'sup_com_ha'</span>, <span class="st" style="color: #20794D;">'label3'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2000'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb59-11">focus_naz_2000_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb59-12"></span>
<span id="cb59-13"><span class="co" style="color: #5E5E5E;"># Dati 2006</span></span>
<span id="cb59-14">focus_2006_naz <span class="op" style="color: #5E5E5E;">=</span> clc2006[[<span class="st" style="color: #20794D;">'pro_com'</span>, <span class="st" style="color: #20794D;">'comune'</span>, <span class="st" style="color: #20794D;">'provincia'</span>, <span class="st" style="color: #20794D;">'regione'</span>, <span class="st" style="color: #20794D;">'sup_com_ha'</span>, <span class="st" style="color: #20794D;">'label3'</span>, <span class="st" style="color: #20794D;">'surface_ha_2006'</span>]]</span>
<span id="cb59-15">focus_2006_naz.set_index(<span class="st" style="color: #20794D;">'label3'</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb59-16">focus_naz_2006_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(focus_2006_naz.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>, <span class="st" style="color: #20794D;">'comune'</span>, <span class="st" style="color: #20794D;">'provincia'</span>, <span class="st" style="color: #20794D;">'regione'</span>, <span class="st" style="color: #20794D;">'sup_com_ha'</span>, <span class="st" style="color: #20794D;">'label3'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2006'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb59-17">focus_naz_2006_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb59-18"></span>
<span id="cb59-19"><span class="co" style="color: #5E5E5E;"># Dati 2012</span></span>
<span id="cb59-20">focus_2012_naz <span class="op" style="color: #5E5E5E;">=</span> clc2012[[<span class="st" style="color: #20794D;">'pro_com'</span>, <span class="st" style="color: #20794D;">'comune'</span>, <span class="st" style="color: #20794D;">'provincia'</span>, <span class="st" style="color: #20794D;">'regione'</span>, <span class="st" style="color: #20794D;">'sup_com_ha'</span>, <span class="st" style="color: #20794D;">'label3'</span>, <span class="st" style="color: #20794D;">'surface_ha_2012'</span>]]</span>
<span id="cb59-21">focus_2012_naz.set_index(<span class="st" style="color: #20794D;">'label3'</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb59-22">focus_naz_2012_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(focus_2012_naz.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>, <span class="st" style="color: #20794D;">'comune'</span>, <span class="st" style="color: #20794D;">'provincia'</span>, <span class="st" style="color: #20794D;">'regione'</span>, <span class="st" style="color: #20794D;">'sup_com_ha'</span>, <span class="st" style="color: #20794D;">'label3'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2012'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb59-23">focus_naz_2012_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb59-24"></span>
<span id="cb59-25"><span class="co" style="color: #5E5E5E;"># Dati 2018</span></span>
<span id="cb59-26">focus_2018_naz <span class="op" style="color: #5E5E5E;">=</span> clc2018[[<span class="st" style="color: #20794D;">'pro_com'</span>, <span class="st" style="color: #20794D;">'comune'</span>, <span class="st" style="color: #20794D;">'provincia'</span>, <span class="st" style="color: #20794D;">'regione'</span>, <span class="st" style="color: #20794D;">'sup_com_ha'</span>, <span class="st" style="color: #20794D;">'label3'</span>, <span class="st" style="color: #20794D;">'surface_ha_2018'</span>]]</span>
<span id="cb59-27">focus_2018_naz.set_index(<span class="st" style="color: #20794D;">'label3'</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb59-28">focus_naz_2018_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(focus_2018_naz.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>, <span class="st" style="color: #20794D;">'comune'</span>, <span class="st" style="color: #20794D;">'provincia'</span>, <span class="st" style="color: #20794D;">'regione'</span>, <span class="st" style="color: #20794D;">'sup_com_ha'</span>, <span class="st" style="color: #20794D;">'label3'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2018'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb59-29">focus_naz_2018_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="52">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1">focus_naz_2018_group</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="52">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>pro_com</th>
      <th>comune</th>
      <th>provincia</th>
      <th>regione</th>
      <th>sup_com_ha</th>
      <th>label3</th>
      <th>surface_ha_2018</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1001.0</td>
      <td>Agliè</td>
      <td>Torino</td>
      <td>Piemonte</td>
      <td>1314.622087</td>
      <td>Broad-leaved forest</td>
      <td>218.6224</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1001.0</td>
      <td>Agliè</td>
      <td>Torino</td>
      <td>Piemonte</td>
      <td>1314.622087</td>
      <td>Discontinuous urban fabric</td>
      <td>64.7110</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1001.0</td>
      <td>Agliè</td>
      <td>Torino</td>
      <td>Piemonte</td>
      <td>1314.622087</td>
      <td>Green urban areas</td>
      <td>51.8549</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1001.0</td>
      <td>Agliè</td>
      <td>Torino</td>
      <td>Piemonte</td>
      <td>1314.622087</td>
      <td>Industrial or commercial units</td>
      <td>25.4731</td>
    </tr>
    <tr>
      <th>4</th>
      <td>1001.0</td>
      <td>Agliè</td>
      <td>Torino</td>
      <td>Piemonte</td>
      <td>1314.622087</td>
      <td>Land principally occupied by agriculture, with...</td>
      <td>24.4334</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>64052</th>
      <td>111107.0</td>
      <td>Villaspeciosa</td>
      <td>Sud Sardegna</td>
      <td>Sardegna</td>
      <td>2719.371313</td>
      <td>Industrial or commercial units</td>
      <td>25.7592</td>
    </tr>
    <tr>
      <th>64053</th>
      <td>111107.0</td>
      <td>Villaspeciosa</td>
      <td>Sud Sardegna</td>
      <td>Sardegna</td>
      <td>2719.371313</td>
      <td>Land principally occupied by agriculture, with...</td>
      <td>216.6219</td>
    </tr>
    <tr>
      <th>64054</th>
      <td>111107.0</td>
      <td>Villaspeciosa</td>
      <td>Sud Sardegna</td>
      <td>Sardegna</td>
      <td>2719.371313</td>
      <td>Non-irrigated arable land</td>
      <td>1675.3119</td>
    </tr>
    <tr>
      <th>64055</th>
      <td>111107.0</td>
      <td>Villaspeciosa</td>
      <td>Sud Sardegna</td>
      <td>Sardegna</td>
      <td>2719.371313</td>
      <td>Sclerophyllous vegetation</td>
      <td>44.4901</td>
    </tr>
    <tr>
      <th>64056</th>
      <td>111107.0</td>
      <td>Villaspeciosa</td>
      <td>Sud Sardegna</td>
      <td>Sardegna</td>
      <td>2719.371313</td>
      <td>Water bodies</td>
      <td>176.2525</td>
    </tr>
  </tbody>
</table>
<p>64057 rows × 7 columns</p>
</div>
</div>
</div>
<section id="aree-artificiali-1" class="level3">
<h3 class="anchored" data-anchor-id="aree-artificiali-1">3.3.1 Aree artificiali</h3>
<p>I gruppi 1.1 ed 1.2 della CLC</p>
<div class="cell" data-execution_count="53">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1"><span class="co" style="color: #5E5E5E;"># Dati 1990</span></span>
<span id="cb61-2">artificial_surface_naz_1990 <span class="op" style="color: #5E5E5E;">=</span> focus_naz_1990_group[focus_naz_1990_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Continuous urban fabric'</span>, <span class="st" style="color: #20794D;">'Discontinuous urban fabric'</span>, <span class="st" style="color: #20794D;">'Industrial or commercial units'</span>, <span class="st" style="color: #20794D;">'Road and rail networks and associated land'</span>, <span class="st" style="color: #20794D;">'Port areas'</span>, <span class="st" style="color: #20794D;">'Airports'</span>])]</span>
<span id="cb61-3">artificial_surface_naz_1990_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(artificial_surface_naz_1990.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>])[<span class="st" style="color: #20794D;">'surface_ha_1990'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb61-4">artificial_surface_naz_1990_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb61-5"></span>
<span id="cb61-6"><span class="co" style="color: #5E5E5E;"># Dati 2000</span></span>
<span id="cb61-7">artificial_surface_naz_2000 <span class="op" style="color: #5E5E5E;">=</span> focus_naz_2000_group[focus_naz_2000_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Continuous urban fabric'</span>, <span class="st" style="color: #20794D;">'Discontinuous urban fabric'</span>, <span class="st" style="color: #20794D;">'Industrial or commercial units'</span>, <span class="st" style="color: #20794D;">'Road and rail networks and associated land'</span>, <span class="st" style="color: #20794D;">'Port areas'</span>, <span class="st" style="color: #20794D;">'Airports'</span>])]</span>
<span id="cb61-8">artificial_surface_naz_2000_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(artificial_surface_naz_2000.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2000'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb61-9">artificial_surface_naz_2000_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb61-10"></span>
<span id="cb61-11"><span class="co" style="color: #5E5E5E;"># Dati 2006</span></span>
<span id="cb61-12">artificial_surface_naz_2006 <span class="op" style="color: #5E5E5E;">=</span> focus_naz_2006_group[focus_naz_2006_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Continuous urban fabric'</span>, <span class="st" style="color: #20794D;">'Discontinuous urban fabric'</span>, <span class="st" style="color: #20794D;">'Industrial or commercial units'</span>, <span class="st" style="color: #20794D;">'Road and rail networks and associated land'</span>, <span class="st" style="color: #20794D;">'Port areas'</span>, <span class="st" style="color: #20794D;">'Airports'</span>])]</span>
<span id="cb61-13">artificial_surface_naz_2006_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(artificial_surface_naz_2006.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2006'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb61-14">artificial_surface_naz_2006_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb61-15"></span>
<span id="cb61-16"><span class="co" style="color: #5E5E5E;"># Dati 2012</span></span>
<span id="cb61-17">artificial_surface_naz_2012 <span class="op" style="color: #5E5E5E;">=</span> focus_naz_2012_group[focus_naz_2012_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Continuous urban fabric'</span>, <span class="st" style="color: #20794D;">'Discontinuous urban fabric'</span>, <span class="st" style="color: #20794D;">'Industrial or commercial units'</span>, <span class="st" style="color: #20794D;">'Road and rail networks and associated land'</span>, <span class="st" style="color: #20794D;">'Port areas'</span>, <span class="st" style="color: #20794D;">'Airports'</span>])]</span>
<span id="cb61-18">artificial_surface_naz_2012_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(artificial_surface_naz_2012.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2012'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb61-19">artificial_surface_naz_2012_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb61-20"></span>
<span id="cb61-21"><span class="co" style="color: #5E5E5E;"># Dati 2018</span></span>
<span id="cb61-22">artificial_surface_naz_2018 <span class="op" style="color: #5E5E5E;">=</span> focus_naz_2018_group[focus_naz_2018_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Continuous urban fabric'</span>, <span class="st" style="color: #20794D;">'Discontinuous urban fabric'</span>, <span class="st" style="color: #20794D;">'Industrial or commercial units'</span>, <span class="st" style="color: #20794D;">'Road and rail networks and associated land'</span>, <span class="st" style="color: #20794D;">'Port areas'</span>, <span class="st" style="color: #20794D;">'Airports'</span>])]</span>
<span id="cb61-23">artificial_surface_naz_2018_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(artificial_surface_naz_2018.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>, <span class="st" style="color: #20794D;">'comune'</span>, <span class="st" style="color: #20794D;">'provincia'</span>, <span class="st" style="color: #20794D;">'regione'</span>, <span class="st" style="color: #20794D;">'sup_com_ha'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2018'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb61-24">artificial_surface_naz_2018_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb61-25"></span>
<span id="cb61-26"><span class="co" style="color: #5E5E5E;"># Dati aggregati</span></span>
<span id="cb61-27">focus_artificial_naz <span class="op" style="color: #5E5E5E;">=</span> [artificial_surface_naz_2018_group, artificial_surface_naz_2012_group, artificial_surface_naz_2006_group, artificial_surface_naz_2000_group, artificial_surface_naz_1990_group]</span>
<span id="cb61-28">focus_artificial_naz_df <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">reduce</span>(<span class="kw" style="color: #003B4F;">lambda</span>  left,right: pd.merge(left,right,on<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'pro_com'</span>], how<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'outer'</span>), focus_artificial_naz)</span>
<span id="cb61-29">focus_artificial_naz_df <span class="op" style="color: #5E5E5E;">=</span> focus_artificial_naz_df[focus_artificial_naz_df[<span class="st" style="color: #20794D;">'sup_com_ha'</span>] <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb61-30">focus_artificial_naz_df.fillna(<span class="dv" style="color: #AD0000;">0</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb61-31">focus_artificial_naz_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_1990'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_artificial_naz_df.surface_ha_1990 <span class="op" style="color: #5E5E5E;">/</span> focus_artificial_naz_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb61-32">focus_artificial_naz_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">6</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_2000'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_artificial_naz_df.surface_ha_2000 <span class="op" style="color: #5E5E5E;">/</span> focus_artificial_naz_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb61-33">focus_artificial_naz_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">7</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_2006'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_artificial_naz_df.surface_ha_2006 <span class="op" style="color: #5E5E5E;">/</span> focus_artificial_naz_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb61-34">focus_artificial_naz_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">8</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_2012'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_artificial_naz_df.surface_ha_2012 <span class="op" style="color: #5E5E5E;">/</span> focus_artificial_naz_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb61-35">focus_artificial_naz_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">9</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_2018'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_artificial_naz_df.surface_ha_2018 <span class="op" style="color: #5E5E5E;">/</span> focus_artificial_naz_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb61-36">focus_artificial_naz_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Perc.Diff. | 2018-2000'</span>, value<span class="op" style="color: #5E5E5E;">=</span>(focus_artificial_naz_df.perc_2018 <span class="op" style="color: #5E5E5E;">-</span> focus_artificial_naz_df.perc_2000))</span>
<span id="cb61-37">focus_artificial_naz_df.sort_values(by<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'Perc.Diff. | 2018-2000'</span>], ascending<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb61-38">focus_artificial_naz_df</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="53">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>pro_com</th>
      <th>comune</th>
      <th>provincia</th>
      <th>regione</th>
      <th>sup_com_ha</th>
      <th>perc_1990</th>
      <th>perc_2000</th>
      <th>perc_2006</th>
      <th>perc_2012</th>
      <th>perc_2018</th>
      <th>Perc.Diff. | 2018-2000</th>
      <th>surface_ha_2018</th>
      <th>surface_ha_2012</th>
      <th>surface_ha_2006</th>
      <th>surface_ha_2000</th>
      <th>surface_ha_1990</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>899</th>
      <td>12023.0</td>
      <td>Brunello</td>
      <td>Varese</td>
      <td>Lombardia</td>
      <td>161.998833</td>
      <td>60.01</td>
      <td>60.01</td>
      <td>44.49</td>
      <td>44.49</td>
      <td>44.49</td>
      <td>-15.52</td>
      <td>72.0654</td>
      <td>72.0654</td>
      <td>72.0655</td>
      <td>97.2179</td>
      <td>97.2181</td>
    </tr>
    <tr>
      <th>4298</th>
      <td>63036.0</td>
      <td>Grumo Nevano</td>
      <td>Napoli</td>
      <td>Campania</td>
      <td>287.688759</td>
      <td>47.45</td>
      <td>64.93</td>
      <td>64.93</td>
      <td>51.31</td>
      <td>51.31</td>
      <td>-13.62</td>
      <td>147.6065</td>
      <td>147.6065</td>
      <td>186.8019</td>
      <td>186.8019</td>
      <td>136.5066</td>
    </tr>
    <tr>
      <th>882</th>
      <td>12006.0</td>
      <td>Azzate</td>
      <td>Varese</td>
      <td>Lombardia</td>
      <td>450.621469</td>
      <td>46.75</td>
      <td>46.75</td>
      <td>38.01</td>
      <td>38.01</td>
      <td>38.01</td>
      <td>-8.74</td>
      <td>171.2779</td>
      <td>171.2779</td>
      <td>171.2779</td>
      <td>210.6471</td>
      <td>210.6469</td>
    </tr>
    <tr>
      <th>953</th>
      <td>12080.0</td>
      <td>Gornate Olona</td>
      <td>Varese</td>
      <td>Lombardia</td>
      <td>469.573308</td>
      <td>31.05</td>
      <td>31.05</td>
      <td>22.32</td>
      <td>22.32</td>
      <td>22.32</td>
      <td>-8.73</td>
      <td>104.8177</td>
      <td>104.8177</td>
      <td>104.8177</td>
      <td>145.8012</td>
      <td>145.8012</td>
    </tr>
    <tr>
      <th>4329</th>
      <td>63067.0</td>
      <td>San Giorgio a Cremano</td>
      <td>Napoli</td>
      <td>Campania</td>
      <td>415.383936</td>
      <td>60.96</td>
      <td>76.57</td>
      <td>68.51</td>
      <td>68.51</td>
      <td>68.51</td>
      <td>-8.06</td>
      <td>284.5767</td>
      <td>284.5767</td>
      <td>284.5768</td>
      <td>318.0615</td>
      <td>253.2174</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>372</th>
      <td>3114.0</td>
      <td>Paruzzaro</td>
      <td>Novara</td>
      <td>Piemonte</td>
      <td>522.716138</td>
      <td>13.89</td>
      <td>11.57</td>
      <td>23.24</td>
      <td>35.11</td>
      <td>35.11</td>
      <td>23.54</td>
      <td>183.5155</td>
      <td>183.5155</td>
      <td>121.4790</td>
      <td>60.5013</td>
      <td>72.6050</td>
    </tr>
    <tr>
      <th>5506</th>
      <td>80097.0</td>
      <td>San Ferdinando</td>
      <td>Reggio di Calabria</td>
      <td>Calabria</td>
      <td>1419.798819</td>
      <td>16.31</td>
      <td>15.22</td>
      <td>40.20</td>
      <td>40.20</td>
      <td>40.20</td>
      <td>24.98</td>
      <td>570.7536</td>
      <td>570.7536</td>
      <td>570.7535</td>
      <td>216.1294</td>
      <td>231.5077</td>
    </tr>
    <tr>
      <th>257</th>
      <td>2009.0</td>
      <td>Balocco</td>
      <td>Vercelli</td>
      <td>Piemonte</td>
      <td>1680.794846</td>
      <td>10.41</td>
      <td>0.00</td>
      <td>2.97</td>
      <td>28.22</td>
      <td>28.22</td>
      <td>28.22</td>
      <td>474.3195</td>
      <td>474.3195</td>
      <td>49.8811</td>
      <td>0.0000</td>
      <td>175.0071</td>
    </tr>
    <tr>
      <th>336</th>
      <td>3043.0</td>
      <td>Castelletto sopra Ticino</td>
      <td>Novara</td>
      <td>Piemonte</td>
      <td>1464.109249</td>
      <td>22.01</td>
      <td>20.80</td>
      <td>23.45</td>
      <td>50.63</td>
      <td>50.63</td>
      <td>29.83</td>
      <td>741.2521</td>
      <td>741.2521</td>
      <td>343.3539</td>
      <td>304.5441</td>
      <td>322.2282</td>
    </tr>
    <tr>
      <th>4477</th>
      <td>65011.0</td>
      <td>Atrani</td>
      <td>Salerno</td>
      <td>Campania</td>
      <td>12.061182</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>52.01</td>
      <td>52.01</td>
      <td>52.01</td>
      <td>52.01</td>
      <td>6.2730</td>
      <td>6.2730</td>
      <td>6.2730</td>
      <td>0.0000</td>
      <td>0.0000</td>
    </tr>
  </tbody>
</table>
<p>6773 rows × 16 columns</p>
</div>
</div>
</div>
<div class="cell" data-execution_count="54">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1"><span class="co" style="color: #5E5E5E;"># Superfici in arretramento</span></span>
<span id="cb62-2">naz_reduction_artificial_area <span class="op" style="color: #5E5E5E;">=</span> focus_artificial_naz_df.iloc[<span class="dv" style="color: #AD0000;">0</span>:<span class="dv" style="color: #AD0000;">10</span>]</span>
<span id="cb62-3">naz_reduction_artificial_area</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="54">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>pro_com</th>
      <th>comune</th>
      <th>provincia</th>
      <th>regione</th>
      <th>sup_com_ha</th>
      <th>perc_1990</th>
      <th>perc_2000</th>
      <th>perc_2006</th>
      <th>perc_2012</th>
      <th>perc_2018</th>
      <th>Perc.Diff. | 2018-2000</th>
      <th>surface_ha_2018</th>
      <th>surface_ha_2012</th>
      <th>surface_ha_2006</th>
      <th>surface_ha_2000</th>
      <th>surface_ha_1990</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>899</th>
      <td>12023.0</td>
      <td>Brunello</td>
      <td>Varese</td>
      <td>Lombardia</td>
      <td>161.998833</td>
      <td>60.01</td>
      <td>60.01</td>
      <td>44.49</td>
      <td>44.49</td>
      <td>44.49</td>
      <td>-15.52</td>
      <td>72.0654</td>
      <td>72.0654</td>
      <td>72.0655</td>
      <td>97.2179</td>
      <td>97.2181</td>
    </tr>
    <tr>
      <th>4298</th>
      <td>63036.0</td>
      <td>Grumo Nevano</td>
      <td>Napoli</td>
      <td>Campania</td>
      <td>287.688759</td>
      <td>47.45</td>
      <td>64.93</td>
      <td>64.93</td>
      <td>51.31</td>
      <td>51.31</td>
      <td>-13.62</td>
      <td>147.6065</td>
      <td>147.6065</td>
      <td>186.8019</td>
      <td>186.8019</td>
      <td>136.5066</td>
    </tr>
    <tr>
      <th>882</th>
      <td>12006.0</td>
      <td>Azzate</td>
      <td>Varese</td>
      <td>Lombardia</td>
      <td>450.621469</td>
      <td>46.75</td>
      <td>46.75</td>
      <td>38.01</td>
      <td>38.01</td>
      <td>38.01</td>
      <td>-8.74</td>
      <td>171.2779</td>
      <td>171.2779</td>
      <td>171.2779</td>
      <td>210.6471</td>
      <td>210.6469</td>
    </tr>
    <tr>
      <th>953</th>
      <td>12080.0</td>
      <td>Gornate Olona</td>
      <td>Varese</td>
      <td>Lombardia</td>
      <td>469.573308</td>
      <td>31.05</td>
      <td>31.05</td>
      <td>22.32</td>
      <td>22.32</td>
      <td>22.32</td>
      <td>-8.73</td>
      <td>104.8177</td>
      <td>104.8177</td>
      <td>104.8177</td>
      <td>145.8012</td>
      <td>145.8012</td>
    </tr>
    <tr>
      <th>4329</th>
      <td>63067.0</td>
      <td>San Giorgio a Cremano</td>
      <td>Napoli</td>
      <td>Campania</td>
      <td>415.383936</td>
      <td>60.96</td>
      <td>76.57</td>
      <td>68.51</td>
      <td>68.51</td>
      <td>68.51</td>
      <td>-8.06</td>
      <td>284.5767</td>
      <td>284.5767</td>
      <td>284.5768</td>
      <td>318.0615</td>
      <td>253.2174</td>
    </tr>
    <tr>
      <th>5710</th>
      <td>83108.0</td>
      <td>Torrenova</td>
      <td>Messina</td>
      <td>Sicilia</td>
      <td>1292.677225</td>
      <td>22.03</td>
      <td>22.62</td>
      <td>15.29</td>
      <td>14.94</td>
      <td>14.94</td>
      <td>-7.68</td>
      <td>193.1105</td>
      <td>193.1105</td>
      <td>197.6093</td>
      <td>292.4331</td>
      <td>284.7380</td>
    </tr>
    <tr>
      <th>5708</th>
      <td>83106.0</td>
      <td>Terme Vigliatore</td>
      <td>Messina</td>
      <td>Sicilia</td>
      <td>1322.797657</td>
      <td>25.43</td>
      <td>25.81</td>
      <td>19.42</td>
      <td>18.33</td>
      <td>18.33</td>
      <td>-7.48</td>
      <td>242.5046</td>
      <td>242.5046</td>
      <td>256.9306</td>
      <td>341.4543</td>
      <td>336.4462</td>
    </tr>
    <tr>
      <th>801</th>
      <td>9049.0</td>
      <td>Pietra Ligure</td>
      <td>Savona</td>
      <td>Liguria</td>
      <td>987.811402</td>
      <td>34.90</td>
      <td>34.90</td>
      <td>34.90</td>
      <td>27.46</td>
      <td>27.46</td>
      <td>-7.44</td>
      <td>271.2950</td>
      <td>271.2950</td>
      <td>344.7029</td>
      <td>344.7031</td>
      <td>344.7031</td>
    </tr>
    <tr>
      <th>1049</th>
      <td>13058.0</td>
      <td>Castelmarte</td>
      <td>Como</td>
      <td>Lombardia</td>
      <td>197.225522</td>
      <td>47.17</td>
      <td>47.17</td>
      <td>39.83</td>
      <td>39.83</td>
      <td>39.83</td>
      <td>-7.34</td>
      <td>78.5500</td>
      <td>78.5500</td>
      <td>78.5500</td>
      <td>93.0399</td>
      <td>93.0399</td>
    </tr>
    <tr>
      <th>4294</th>
      <td>63032.0</td>
      <td>Frattamaggiore</td>
      <td>Napoli</td>
      <td>Campania</td>
      <td>538.816178</td>
      <td>58.54</td>
      <td>71.14</td>
      <td>72.46</td>
      <td>63.97</td>
      <td>63.97</td>
      <td>-7.17</td>
      <td>344.6705</td>
      <td>344.6705</td>
      <td>390.4469</td>
      <td>383.2980</td>
      <td>315.4185</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="55">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb63-1"><span class="co" style="color: #5E5E5E;"># Superfici in avanzamento</span></span>
<span id="cb63-2">naz_increase_artificial_area <span class="op" style="color: #5E5E5E;">=</span> focus_artificial_naz_df.iloc[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">10</span>:]</span>
<span id="cb63-3">naz_increase_artificial_area.sort_values(by<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'Perc.Diff. | 2018-2000'</span>], ascending<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb63-4">naz_increase_artificial_area</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="55">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>pro_com</th>
      <th>comune</th>
      <th>provincia</th>
      <th>regione</th>
      <th>sup_com_ha</th>
      <th>perc_1990</th>
      <th>perc_2000</th>
      <th>perc_2006</th>
      <th>perc_2012</th>
      <th>perc_2018</th>
      <th>Perc.Diff. | 2018-2000</th>
      <th>surface_ha_2018</th>
      <th>surface_ha_2012</th>
      <th>surface_ha_2006</th>
      <th>surface_ha_2000</th>
      <th>surface_ha_1990</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>4477</th>
      <td>65011.0</td>
      <td>Atrani</td>
      <td>Salerno</td>
      <td>Campania</td>
      <td>12.061182</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>52.01</td>
      <td>52.01</td>
      <td>52.01</td>
      <td>52.01</td>
      <td>6.2730</td>
      <td>6.2730</td>
      <td>6.2730</td>
      <td>0.0000</td>
      <td>0.0000</td>
    </tr>
    <tr>
      <th>336</th>
      <td>3043.0</td>
      <td>Castelletto sopra Ticino</td>
      <td>Novara</td>
      <td>Piemonte</td>
      <td>1464.109249</td>
      <td>22.01</td>
      <td>20.80</td>
      <td>23.45</td>
      <td>50.63</td>
      <td>50.63</td>
      <td>29.83</td>
      <td>741.2521</td>
      <td>741.2521</td>
      <td>343.3539</td>
      <td>304.5441</td>
      <td>322.2282</td>
    </tr>
    <tr>
      <th>257</th>
      <td>2009.0</td>
      <td>Balocco</td>
      <td>Vercelli</td>
      <td>Piemonte</td>
      <td>1680.794846</td>
      <td>10.41</td>
      <td>0.00</td>
      <td>2.97</td>
      <td>28.22</td>
      <td>28.22</td>
      <td>28.22</td>
      <td>474.3195</td>
      <td>474.3195</td>
      <td>49.8811</td>
      <td>0.0000</td>
      <td>175.0071</td>
    </tr>
    <tr>
      <th>5506</th>
      <td>80097.0</td>
      <td>San Ferdinando</td>
      <td>Reggio di Calabria</td>
      <td>Calabria</td>
      <td>1419.798819</td>
      <td>16.31</td>
      <td>15.22</td>
      <td>40.20</td>
      <td>40.20</td>
      <td>40.20</td>
      <td>24.98</td>
      <td>570.7536</td>
      <td>570.7536</td>
      <td>570.7535</td>
      <td>216.1294</td>
      <td>231.5077</td>
    </tr>
    <tr>
      <th>372</th>
      <td>3114.0</td>
      <td>Paruzzaro</td>
      <td>Novara</td>
      <td>Piemonte</td>
      <td>522.716138</td>
      <td>13.89</td>
      <td>11.57</td>
      <td>23.24</td>
      <td>35.11</td>
      <td>35.11</td>
      <td>23.54</td>
      <td>183.5155</td>
      <td>183.5155</td>
      <td>121.4790</td>
      <td>60.5013</td>
      <td>72.6050</td>
    </tr>
    <tr>
      <th>5705</th>
      <td>83103.0</td>
      <td>Valdina</td>
      <td>Messina</td>
      <td>Sicilia</td>
      <td>260.160806</td>
      <td>16.64</td>
      <td>16.64</td>
      <td>35.93</td>
      <td>39.55</td>
      <td>39.55</td>
      <td>22.91</td>
      <td>102.8957</td>
      <td>102.8957</td>
      <td>93.4653</td>
      <td>43.3003</td>
      <td>43.3026</td>
    </tr>
    <tr>
      <th>371</th>
      <td>3112.0</td>
      <td>Orta San Giulio</td>
      <td>Novara</td>
      <td>Piemonte</td>
      <td>664.998756</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>22.62</td>
      <td>22.62</td>
      <td>22.62</td>
      <td>150.3928</td>
      <td>150.3928</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
    </tr>
    <tr>
      <th>4287</th>
      <td>63025.0</td>
      <td>Castello di Cisterna</td>
      <td>Napoli</td>
      <td>Campania</td>
      <td>392.135970</td>
      <td>21.89</td>
      <td>46.04</td>
      <td>68.31</td>
      <td>68.31</td>
      <td>68.31</td>
      <td>22.27</td>
      <td>267.8514</td>
      <td>267.8514</td>
      <td>267.8514</td>
      <td>180.5292</td>
      <td>85.8311</td>
    </tr>
    <tr>
      <th>6271</th>
      <td>96083.0</td>
      <td>Zumaglia</td>
      <td>Biella</td>
      <td>Piemonte</td>
      <td>261.365071</td>
      <td>14.82</td>
      <td>4.43</td>
      <td>4.43</td>
      <td>26.59</td>
      <td>26.59</td>
      <td>22.16</td>
      <td>69.5047</td>
      <td>69.5047</td>
      <td>11.5807</td>
      <td>11.5807</td>
      <td>38.7374</td>
    </tr>
    <tr>
      <th>3499</th>
      <td>46013.0</td>
      <td>Forte dei Marmi</td>
      <td>Lucca</td>
      <td>Toscana</td>
      <td>918.715130</td>
      <td>56.53</td>
      <td>59.08</td>
      <td>63.30</td>
      <td>80.45</td>
      <td>80.45</td>
      <td>21.37</td>
      <td>739.1208</td>
      <td>739.1208</td>
      <td>581.5429</td>
      <td>542.7534</td>
      <td>519.3559</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
<section id="aree-forestate-1" class="level3">
<h3 class="anchored" data-anchor-id="aree-forestate-1">3.3.2 Aree forestate</h3>
<p>Il gruppo 3.1 della CLC</p>
<div class="cell" data-execution_count="56">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1"><span class="co" style="color: #5E5E5E;"># Dati 1990</span></span>
<span id="cb64-2">forest_surface_naz_1990 <span class="op" style="color: #5E5E5E;">=</span> focus_naz_1990_group[focus_naz_1990_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Broad-leaved forest'</span>, <span class="st" style="color: #20794D;">'Coniferous forest'</span>, <span class="st" style="color: #20794D;">'Mixed forest'</span>])]</span>
<span id="cb64-3">forest_surface_naz_1990_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(forest_surface_naz_1990.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>])[<span class="st" style="color: #20794D;">'surface_ha_1990'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb64-4">forest_surface_naz_1990_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb64-5"></span>
<span id="cb64-6"><span class="co" style="color: #5E5E5E;"># Dati 2000</span></span>
<span id="cb64-7">forest_surface_naz_2000 <span class="op" style="color: #5E5E5E;">=</span> focus_naz_2000_group[focus_naz_2000_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Broad-leaved forest'</span>, <span class="st" style="color: #20794D;">'Coniferous forest'</span>, <span class="st" style="color: #20794D;">'Mixed forest'</span>])]</span>
<span id="cb64-8">forest_surface_naz_2000_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(forest_surface_naz_2000.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2000'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb64-9">forest_surface_naz_2000_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb64-10"></span>
<span id="cb64-11"><span class="co" style="color: #5E5E5E;"># Dati 2006</span></span>
<span id="cb64-12">forest_surface_naz_2006 <span class="op" style="color: #5E5E5E;">=</span> focus_naz_2006_group[focus_naz_2006_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Broad-leaved forest'</span>, <span class="st" style="color: #20794D;">'Coniferous forest'</span>, <span class="st" style="color: #20794D;">'Mixed forest'</span>])]</span>
<span id="cb64-13">forest_surface_naz_2006_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(forest_surface_naz_2006.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2006'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb64-14">forest_surface_naz_2006_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb64-15"></span>
<span id="cb64-16"><span class="co" style="color: #5E5E5E;"># Dati 2012</span></span>
<span id="cb64-17">forest_surface_naz_2012 <span class="op" style="color: #5E5E5E;">=</span> focus_naz_2012_group[focus_naz_2012_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Broad-leaved forest'</span>, <span class="st" style="color: #20794D;">'Coniferous forest'</span>, <span class="st" style="color: #20794D;">'Mixed forest'</span>])]</span>
<span id="cb64-18">forest_surface_naz_2012_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(forest_surface_naz_2012.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2012'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb64-19">forest_surface_naz_2012_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb64-20"></span>
<span id="cb64-21"><span class="co" style="color: #5E5E5E;"># Dati 2018</span></span>
<span id="cb64-22">forest_surface_naz_2018 <span class="op" style="color: #5E5E5E;">=</span> focus_naz_2018_group[focus_naz_2018_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Broad-leaved forest'</span>, <span class="st" style="color: #20794D;">'Coniferous forest'</span>, <span class="st" style="color: #20794D;">'Mixed forest'</span>])]</span>
<span id="cb64-23">forest_surface_naz_2018_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(forest_surface_naz_2018.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>, <span class="st" style="color: #20794D;">'comune'</span>, <span class="st" style="color: #20794D;">'provincia'</span>, <span class="st" style="color: #20794D;">'regione'</span>, <span class="st" style="color: #20794D;">'sup_com_ha'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2018'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb64-24">forest_surface_naz_2018_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb64-25"></span>
<span id="cb64-26"><span class="co" style="color: #5E5E5E;"># Dati aggregati</span></span>
<span id="cb64-27">focus_forest_naz <span class="op" style="color: #5E5E5E;">=</span> [forest_surface_naz_2018_group, forest_surface_naz_2012_group, forest_surface_naz_2006_group, forest_surface_naz_2000_group, forest_surface_naz_1990_group]</span>
<span id="cb64-28">focus_forest_naz_df <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">reduce</span>(<span class="kw" style="color: #003B4F;">lambda</span>  left,right: pd.merge(left,right,on<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'pro_com'</span>], how<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'outer'</span>), focus_forest_naz)</span>
<span id="cb64-29">focus_forest_naz_df <span class="op" style="color: #5E5E5E;">=</span> focus_forest_naz_df[focus_forest_naz_df[<span class="st" style="color: #20794D;">'sup_com_ha'</span>] <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb64-30">focus_forest_naz_df.fillna(<span class="dv" style="color: #AD0000;">0</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb64-31">focus_forest_naz_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_1990'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_forest_naz_df.surface_ha_1990 <span class="op" style="color: #5E5E5E;">/</span> focus_forest_naz_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb64-32">focus_forest_naz_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">6</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_2000'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_forest_naz_df.surface_ha_2000 <span class="op" style="color: #5E5E5E;">/</span> focus_forest_naz_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb64-33">focus_forest_naz_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">7</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_2006'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_forest_naz_df.surface_ha_2006 <span class="op" style="color: #5E5E5E;">/</span> focus_forest_naz_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb64-34">focus_forest_naz_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">8</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_2012'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_forest_naz_df.surface_ha_2012 <span class="op" style="color: #5E5E5E;">/</span> focus_forest_naz_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb64-35">focus_forest_naz_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">9</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_2018'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_forest_naz_df.surface_ha_2018 <span class="op" style="color: #5E5E5E;">/</span> focus_forest_naz_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb64-36">focus_forest_naz_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Perc.Diff. | 2018-2000'</span>, value<span class="op" style="color: #5E5E5E;">=</span>(focus_forest_naz_df.perc_2018 <span class="op" style="color: #5E5E5E;">-</span> focus_forest_naz_df.perc_2000))</span>
<span id="cb64-37">focus_forest_naz_df.sort_values(by<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'Perc.Diff. | 2018-2000'</span>], ascending<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb64-38">focus_forest_naz_df</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="56">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>pro_com</th>
      <th>comune</th>
      <th>provincia</th>
      <th>regione</th>
      <th>sup_com_ha</th>
      <th>perc_1990</th>
      <th>perc_2000</th>
      <th>perc_2006</th>
      <th>perc_2012</th>
      <th>perc_2018</th>
      <th>Perc.Diff. | 2018-2000</th>
      <th>surface_ha_2018</th>
      <th>surface_ha_2012</th>
      <th>surface_ha_2006</th>
      <th>surface_ha_2000</th>
      <th>surface_ha_1990</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>4010</th>
      <td>62073.0</td>
      <td>Solopaca</td>
      <td>Benevento</td>
      <td>Campania</td>
      <td>3112.664003</td>
      <td>43.63</td>
      <td>43.63</td>
      <td>43.46</td>
      <td>11.69</td>
      <td>11.69</td>
      <td>-31.94</td>
      <td>363.9901</td>
      <td>363.9901</td>
      <td>1352.7210</td>
      <td>1358.0359</td>
      <td>1358.0275</td>
    </tr>
    <tr>
      <th>2005</th>
      <td>18162.0</td>
      <td>Travacò Siccomario</td>
      <td>Pavia</td>
      <td>Lombardia</td>
      <td>1704.486441</td>
      <td>35.67</td>
      <td>34.72</td>
      <td>8.46</td>
      <td>6.86</td>
      <td>5.13</td>
      <td>-29.59</td>
      <td>87.4269</td>
      <td>116.9231</td>
      <td>144.1941</td>
      <td>591.7315</td>
      <td>607.9471</td>
    </tr>
    <tr>
      <th>2066</th>
      <td>20022.0</td>
      <td>Dosolo</td>
      <td>Mantova</td>
      <td>Lombardia</td>
      <td>2553.627074</td>
      <td>36.66</td>
      <td>33.26</td>
      <td>15.80</td>
      <td>28.04</td>
      <td>5.45</td>
      <td>-27.81</td>
      <td>139.2560</td>
      <td>716.0698</td>
      <td>403.4684</td>
      <td>849.4448</td>
      <td>936.1148</td>
    </tr>
    <tr>
      <th>5387</th>
      <td>83054.0</td>
      <td>Monforte San Giorgio</td>
      <td>Messina</td>
      <td>Sicilia</td>
      <td>3225.987912</td>
      <td>20.15</td>
      <td>38.03</td>
      <td>11.27</td>
      <td>11.27</td>
      <td>11.27</td>
      <td>-26.76</td>
      <td>363.6191</td>
      <td>363.6191</td>
      <td>363.6193</td>
      <td>1226.7195</td>
      <td>650.1504</td>
    </tr>
    <tr>
      <th>4014</th>
      <td>62077.0</td>
      <td>Vitulano</td>
      <td>Benevento</td>
      <td>Campania</td>
      <td>3599.050416</td>
      <td>50.86</td>
      <td>50.81</td>
      <td>50.81</td>
      <td>26.82</td>
      <td>26.82</td>
      <td>-23.99</td>
      <td>965.1276</td>
      <td>965.1276</td>
      <td>1828.5273</td>
      <td>1828.5272</td>
      <td>1830.3353</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>6035</th>
      <td>97078.0</td>
      <td>Suello</td>
      <td>Lecco</td>
      <td>Lombardia</td>
      <td>262.901636</td>
      <td>3.74</td>
      <td>3.74</td>
      <td>30.07</td>
      <td>30.07</td>
      <td>30.07</td>
      <td>26.33</td>
      <td>79.0515</td>
      <td>79.0515</td>
      <td>79.0515</td>
      <td>9.8363</td>
      <td>9.8363</td>
    </tr>
    <tr>
      <th>4727</th>
      <td>71047.0</td>
      <td>San Marco in Lamis</td>
      <td>Foggia</td>
      <td>Puglia</td>
      <td>23419.726063</td>
      <td>12.66</td>
      <td>12.66</td>
      <td>12.30</td>
      <td>39.01</td>
      <td>39.01</td>
      <td>26.35</td>
      <td>9136.7031</td>
      <td>9136.7031</td>
      <td>2879.7020</td>
      <td>2965.3694</td>
      <td>2965.3412</td>
    </tr>
    <tr>
      <th>5343</th>
      <td>83002.0</td>
      <td>Alì</td>
      <td>Messina</td>
      <td>Sicilia</td>
      <td>1593.861487</td>
      <td>11.13</td>
      <td>11.13</td>
      <td>42.21</td>
      <td>42.20</td>
      <td>42.20</td>
      <td>31.07</td>
      <td>672.5921</td>
      <td>672.5921</td>
      <td>672.7852</td>
      <td>177.3506</td>
      <td>177.3474</td>
    </tr>
    <tr>
      <th>4645</th>
      <td>70041.0</td>
      <td>Montagano</td>
      <td>Campobasso</td>
      <td>Molise</td>
      <td>2662.359533</td>
      <td>12.81</td>
      <td>13.18</td>
      <td>49.30</td>
      <td>49.17</td>
      <td>49.17</td>
      <td>35.99</td>
      <td>1309.1148</td>
      <td>1309.1148</td>
      <td>1312.6691</td>
      <td>350.7878</td>
      <td>341.0156</td>
    </tr>
    <tr>
      <th>5378</th>
      <td>83042.0</td>
      <td>Longi</td>
      <td>Messina</td>
      <td>Sicilia</td>
      <td>4210.989035</td>
      <td>31.58</td>
      <td>31.58</td>
      <td>65.31</td>
      <td>68.51</td>
      <td>68.51</td>
      <td>36.93</td>
      <td>2885.0294</td>
      <td>2885.0294</td>
      <td>2750.1191</td>
      <td>1329.8307</td>
      <td>1329.8237</td>
    </tr>
  </tbody>
</table>
<p>6400 rows × 16 columns</p>
</div>
</div>
</div>
<div class="cell" data-execution_count="57">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb65-1"><span class="co" style="color: #5E5E5E;"># Superfici in arretramento</span></span>
<span id="cb65-2">naz_reduction_forest_area <span class="op" style="color: #5E5E5E;">=</span> focus_forest_naz_df.iloc[<span class="dv" style="color: #AD0000;">0</span>:<span class="dv" style="color: #AD0000;">10</span>]</span>
<span id="cb65-3">naz_reduction_forest_area</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="57">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>pro_com</th>
      <th>comune</th>
      <th>provincia</th>
      <th>regione</th>
      <th>sup_com_ha</th>
      <th>perc_1990</th>
      <th>perc_2000</th>
      <th>perc_2006</th>
      <th>perc_2012</th>
      <th>perc_2018</th>
      <th>Perc.Diff. | 2018-2000</th>
      <th>surface_ha_2018</th>
      <th>surface_ha_2012</th>
      <th>surface_ha_2006</th>
      <th>surface_ha_2000</th>
      <th>surface_ha_1990</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>4010</th>
      <td>62073.0</td>
      <td>Solopaca</td>
      <td>Benevento</td>
      <td>Campania</td>
      <td>3112.664003</td>
      <td>43.63</td>
      <td>43.63</td>
      <td>43.46</td>
      <td>11.69</td>
      <td>11.69</td>
      <td>-31.94</td>
      <td>363.9901</td>
      <td>363.9901</td>
      <td>1352.7210</td>
      <td>1358.0359</td>
      <td>1358.0275</td>
    </tr>
    <tr>
      <th>2005</th>
      <td>18162.0</td>
      <td>Travacò Siccomario</td>
      <td>Pavia</td>
      <td>Lombardia</td>
      <td>1704.486441</td>
      <td>35.67</td>
      <td>34.72</td>
      <td>8.46</td>
      <td>6.86</td>
      <td>5.13</td>
      <td>-29.59</td>
      <td>87.4269</td>
      <td>116.9231</td>
      <td>144.1941</td>
      <td>591.7315</td>
      <td>607.9471</td>
    </tr>
    <tr>
      <th>2066</th>
      <td>20022.0</td>
      <td>Dosolo</td>
      <td>Mantova</td>
      <td>Lombardia</td>
      <td>2553.627074</td>
      <td>36.66</td>
      <td>33.26</td>
      <td>15.80</td>
      <td>28.04</td>
      <td>5.45</td>
      <td>-27.81</td>
      <td>139.2560</td>
      <td>716.0698</td>
      <td>403.4684</td>
      <td>849.4448</td>
      <td>936.1148</td>
    </tr>
    <tr>
      <th>5387</th>
      <td>83054.0</td>
      <td>Monforte San Giorgio</td>
      <td>Messina</td>
      <td>Sicilia</td>
      <td>3225.987912</td>
      <td>20.15</td>
      <td>38.03</td>
      <td>11.27</td>
      <td>11.27</td>
      <td>11.27</td>
      <td>-26.76</td>
      <td>363.6191</td>
      <td>363.6191</td>
      <td>363.6193</td>
      <td>1226.7195</td>
      <td>650.1504</td>
    </tr>
    <tr>
      <th>4014</th>
      <td>62077.0</td>
      <td>Vitulano</td>
      <td>Benevento</td>
      <td>Campania</td>
      <td>3599.050416</td>
      <td>50.86</td>
      <td>50.81</td>
      <td>50.81</td>
      <td>26.82</td>
      <td>26.82</td>
      <td>-23.99</td>
      <td>965.1276</td>
      <td>965.1276</td>
      <td>1828.5273</td>
      <td>1828.5272</td>
      <td>1830.3353</td>
    </tr>
    <tr>
      <th>1354</th>
      <td>13059.0</td>
      <td>Castelnuovo Bozzente</td>
      <td>Como</td>
      <td>Lombardia</td>
      <td>362.195167</td>
      <td>74.76</td>
      <td>74.76</td>
      <td>51.14</td>
      <td>51.14</td>
      <td>51.14</td>
      <td>-23.62</td>
      <td>185.2128</td>
      <td>185.2128</td>
      <td>185.2127</td>
      <td>270.7783</td>
      <td>270.7781</td>
    </tr>
    <tr>
      <th>1975</th>
      <td>18114.0</td>
      <td>Pieve Porto Morone</td>
      <td>Pavia</td>
      <td>Lombardia</td>
      <td>1639.626801</td>
      <td>23.53</td>
      <td>23.53</td>
      <td>24.21</td>
      <td>20.04</td>
      <td>0.00</td>
      <td>-23.53</td>
      <td>0.0002</td>
      <td>328.5814</td>
      <td>396.9912</td>
      <td>385.7940</td>
      <td>385.7940</td>
    </tr>
    <tr>
      <th>1788</th>
      <td>17027.0</td>
      <td>Braone</td>
      <td>Brescia</td>
      <td>Lombardia</td>
      <td>1335.673792</td>
      <td>61.74</td>
      <td>61.74</td>
      <td>61.69</td>
      <td>39.25</td>
      <td>39.25</td>
      <td>-22.49</td>
      <td>524.1978</td>
      <td>524.1978</td>
      <td>823.9188</td>
      <td>824.5857</td>
      <td>824.5859</td>
    </tr>
    <tr>
      <th>5410</th>
      <td>83080.0</td>
      <td>San Pier Niceto</td>
      <td>Messina</td>
      <td>Sicilia</td>
      <td>3667.976954</td>
      <td>27.71</td>
      <td>38.63</td>
      <td>16.27</td>
      <td>16.27</td>
      <td>16.27</td>
      <td>-22.36</td>
      <td>596.7868</td>
      <td>596.7868</td>
      <td>596.7872</td>
      <td>1416.8175</td>
      <td>1016.4019</td>
    </tr>
    <tr>
      <th>1321</th>
      <td>13009.0</td>
      <td>Anzano del Parco</td>
      <td>Como</td>
      <td>Lombardia</td>
      <td>324.503555</td>
      <td>29.46</td>
      <td>29.46</td>
      <td>7.69</td>
      <td>7.69</td>
      <td>7.69</td>
      <td>-21.77</td>
      <td>24.9485</td>
      <td>24.9485</td>
      <td>24.9485</td>
      <td>95.6024</td>
      <td>95.6025</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="58">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1"><span class="co" style="color: #5E5E5E;"># Superfici in avanzamento</span></span>
<span id="cb66-2">naz_increase_forest_area <span class="op" style="color: #5E5E5E;">=</span> focus_forest_naz_df.iloc[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">10</span>:]</span>
<span id="cb66-3">naz_increase_forest_area.sort_values(by<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'Perc.Diff. | 2018-2000'</span>], ascending<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb66-4">naz_increase_forest_area</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="58">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>pro_com</th>
      <th>comune</th>
      <th>provincia</th>
      <th>regione</th>
      <th>sup_com_ha</th>
      <th>perc_1990</th>
      <th>perc_2000</th>
      <th>perc_2006</th>
      <th>perc_2012</th>
      <th>perc_2018</th>
      <th>Perc.Diff. | 2018-2000</th>
      <th>surface_ha_2018</th>
      <th>surface_ha_2012</th>
      <th>surface_ha_2006</th>
      <th>surface_ha_2000</th>
      <th>surface_ha_1990</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>5378</th>
      <td>83042.0</td>
      <td>Longi</td>
      <td>Messina</td>
      <td>Sicilia</td>
      <td>4210.989035</td>
      <td>31.58</td>
      <td>31.58</td>
      <td>65.31</td>
      <td>68.51</td>
      <td>68.51</td>
      <td>36.93</td>
      <td>2885.0294</td>
      <td>2885.0294</td>
      <td>2750.1191</td>
      <td>1329.8307</td>
      <td>1329.8237</td>
    </tr>
    <tr>
      <th>4645</th>
      <td>70041.0</td>
      <td>Montagano</td>
      <td>Campobasso</td>
      <td>Molise</td>
      <td>2662.359533</td>
      <td>12.81</td>
      <td>13.18</td>
      <td>49.30</td>
      <td>49.17</td>
      <td>49.17</td>
      <td>35.99</td>
      <td>1309.1148</td>
      <td>1309.1148</td>
      <td>1312.6691</td>
      <td>350.7878</td>
      <td>341.0156</td>
    </tr>
    <tr>
      <th>5343</th>
      <td>83002.0</td>
      <td>Alì</td>
      <td>Messina</td>
      <td>Sicilia</td>
      <td>1593.861487</td>
      <td>11.13</td>
      <td>11.13</td>
      <td>42.21</td>
      <td>42.20</td>
      <td>42.20</td>
      <td>31.07</td>
      <td>672.5921</td>
      <td>672.5921</td>
      <td>672.7852</td>
      <td>177.3506</td>
      <td>177.3474</td>
    </tr>
    <tr>
      <th>4727</th>
      <td>71047.0</td>
      <td>San Marco in Lamis</td>
      <td>Foggia</td>
      <td>Puglia</td>
      <td>23419.726063</td>
      <td>12.66</td>
      <td>12.66</td>
      <td>12.30</td>
      <td>39.01</td>
      <td>39.01</td>
      <td>26.35</td>
      <td>9136.7031</td>
      <td>9136.7031</td>
      <td>2879.7020</td>
      <td>2965.3694</td>
      <td>2965.3412</td>
    </tr>
    <tr>
      <th>6035</th>
      <td>97078.0</td>
      <td>Suello</td>
      <td>Lecco</td>
      <td>Lombardia</td>
      <td>262.901636</td>
      <td>3.74</td>
      <td>3.74</td>
      <td>30.07</td>
      <td>30.07</td>
      <td>30.07</td>
      <td>26.33</td>
      <td>79.0515</td>
      <td>79.0515</td>
      <td>79.0515</td>
      <td>9.8363</td>
      <td>9.8363</td>
    </tr>
    <tr>
      <th>5383</th>
      <td>83050.0</td>
      <td>Militello Rosmarino</td>
      <td>Messina</td>
      <td>Sicilia</td>
      <td>2953.560321</td>
      <td>30.59</td>
      <td>30.80</td>
      <td>55.18</td>
      <td>56.89</td>
      <td>56.89</td>
      <td>26.09</td>
      <td>1680.4067</td>
      <td>1680.4067</td>
      <td>1629.8563</td>
      <td>909.6290</td>
      <td>903.4505</td>
    </tr>
    <tr>
      <th>1946</th>
      <td>18071.0</td>
      <td>Gerenzago</td>
      <td>Pavia</td>
      <td>Lombardia</td>
      <td>541.125193</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>25.77</td>
      <td>25.77</td>
      <td>25.77</td>
      <td>25.77</td>
      <td>139.4217</td>
      <td>139.4217</td>
      <td>139.4217</td>
      <td>0.0000</td>
      <td>0.0000</td>
    </tr>
    <tr>
      <th>5606</th>
      <td>90044.0</td>
      <td>Nughedu San Nicolò</td>
      <td>Sassari</td>
      <td>Sardegna</td>
      <td>6789.378997</td>
      <td>14.32</td>
      <td>15.66</td>
      <td>39.48</td>
      <td>40.42</td>
      <td>40.42</td>
      <td>24.76</td>
      <td>2744.1430</td>
      <td>2744.1430</td>
      <td>2680.5068</td>
      <td>1062.9248</td>
      <td>972.5207</td>
    </tr>
    <tr>
      <th>5390</th>
      <td>83057.0</td>
      <td>Montalbano Elicona</td>
      <td>Messina</td>
      <td>Sicilia</td>
      <td>6780.082531</td>
      <td>52.78</td>
      <td>30.74</td>
      <td>53.69</td>
      <td>53.50</td>
      <td>55.09</td>
      <td>24.35</td>
      <td>3734.9590</td>
      <td>3627.4330</td>
      <td>3639.9593</td>
      <td>2084.5071</td>
      <td>3578.2554</td>
    </tr>
    <tr>
      <th>5391</th>
      <td>83058.0</td>
      <td>Motta Camastra</td>
      <td>Messina</td>
      <td>Sicilia</td>
      <td>2530.898840</td>
      <td>36.11</td>
      <td>36.11</td>
      <td>54.05</td>
      <td>59.70</td>
      <td>59.70</td>
      <td>23.59</td>
      <td>1510.8548</td>
      <td>1510.8548</td>
      <td>1367.8344</td>
      <td>913.8916</td>
      <td>913.8926</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
<section id="aree-agricole-1" class="level3">
<h3 class="anchored" data-anchor-id="aree-agricole-1">3.3.3 Aree agricole</h3>
<p>Il gruppo 2.1 della CLC</p>
<div class="cell" data-execution_count="59">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb67-1"><span class="co" style="color: #5E5E5E;"># Dati 1990</span></span>
<span id="cb67-2">arable_lands_surface_naz_1990 <span class="op" style="color: #5E5E5E;">=</span> focus_naz_1990_group[focus_naz_1990_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Non-irrigated arable land'</span>, <span class="st" style="color: #20794D;">'Permanently irrigated land'</span>])]</span>
<span id="cb67-3">arable_lands_surface_naz_1990_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(arable_lands_surface_naz_1990.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>])[<span class="st" style="color: #20794D;">'surface_ha_1990'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb67-4">arable_lands_surface_naz_1990_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb67-5"></span>
<span id="cb67-6"><span class="co" style="color: #5E5E5E;"># Dati 2000</span></span>
<span id="cb67-7">arable_lands_surface_naz_2000 <span class="op" style="color: #5E5E5E;">=</span> focus_naz_2000_group[focus_naz_2000_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Non-irrigated arable land'</span>, <span class="st" style="color: #20794D;">'Permanently irrigated land'</span>])]</span>
<span id="cb67-8">arable_lands_surface_naz_2000_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(arable_lands_surface_naz_2000.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2000'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb67-9">arable_lands_surface_naz_2000_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb67-10"></span>
<span id="cb67-11"><span class="co" style="color: #5E5E5E;"># Dati 2006</span></span>
<span id="cb67-12">arable_lands_surface_naz_2006 <span class="op" style="color: #5E5E5E;">=</span> focus_naz_2006_group[focus_naz_2006_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Non-irrigated arable land'</span>, <span class="st" style="color: #20794D;">'Permanently irrigated land'</span>])]</span>
<span id="cb67-13">arable_lands_surface_naz_2006_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(arable_lands_surface_naz_2006.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2006'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb67-14">arable_lands_surface_naz_2006_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb67-15"></span>
<span id="cb67-16"><span class="co" style="color: #5E5E5E;"># Dati 2012</span></span>
<span id="cb67-17">arable_lands_surface_naz_2012 <span class="op" style="color: #5E5E5E;">=</span> focus_naz_2012_group[focus_naz_2012_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Non-irrigated arable land'</span>, <span class="st" style="color: #20794D;">'Permanently irrigated land'</span>])]</span>
<span id="cb67-18">arable_lands_surface_naz_2012_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(arable_lands_surface_naz_2012.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2012'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb67-19">arable_lands_surface_naz_2012_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb67-20"></span>
<span id="cb67-21"><span class="co" style="color: #5E5E5E;"># Dati 2018</span></span>
<span id="cb67-22">arable_lands_surface_naz_2018 <span class="op" style="color: #5E5E5E;">=</span> focus_naz_2018_group[focus_naz_2018_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Non-irrigated arable land'</span>, <span class="st" style="color: #20794D;">'Permanently irrigated land'</span>])]</span>
<span id="cb67-23">arable_lands_surface_naz_2018_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(arable_lands_surface_naz_2018.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>, <span class="st" style="color: #20794D;">'comune'</span>, <span class="st" style="color: #20794D;">'provincia'</span>, <span class="st" style="color: #20794D;">'regione'</span>, <span class="st" style="color: #20794D;">'sup_com_ha'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2018'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb67-24">arable_lands_surface_naz_2018_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb67-25"></span>
<span id="cb67-26"><span class="co" style="color: #5E5E5E;"># Dati aggregati</span></span>
<span id="cb67-27">focus_arable_lands_naz <span class="op" style="color: #5E5E5E;">=</span> [arable_lands_surface_naz_2018_group, arable_lands_surface_naz_2012_group, arable_lands_surface_naz_2006_group, arable_lands_surface_naz_2000_group, arable_lands_surface_naz_1990_group]</span>
<span id="cb67-28">focus_arable_lands_naz_df <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">reduce</span>(<span class="kw" style="color: #003B4F;">lambda</span>  left,right: pd.merge(left,right,on<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'pro_com'</span>], how<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'outer'</span>), focus_arable_lands_naz)</span>
<span id="cb67-29">focus_arable_lands_naz_df <span class="op" style="color: #5E5E5E;">=</span> focus_arable_lands_naz_df[focus_arable_lands_naz_df[<span class="st" style="color: #20794D;">'sup_com_ha'</span>] <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb67-30">focus_arable_lands_naz_df.fillna(<span class="dv" style="color: #AD0000;">0</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb67-31">focus_arable_lands_naz_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_1990'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_arable_lands_naz_df.surface_ha_1990 <span class="op" style="color: #5E5E5E;">/</span> focus_arable_lands_naz_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb67-32">focus_arable_lands_naz_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">6</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_2000'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_arable_lands_naz_df.surface_ha_2000 <span class="op" style="color: #5E5E5E;">/</span> focus_arable_lands_naz_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb67-33">focus_arable_lands_naz_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">7</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_2006'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_arable_lands_naz_df.surface_ha_2006 <span class="op" style="color: #5E5E5E;">/</span> focus_arable_lands_naz_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb67-34">focus_arable_lands_naz_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">8</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_2012'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_arable_lands_naz_df.surface_ha_2012 <span class="op" style="color: #5E5E5E;">/</span> focus_arable_lands_naz_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb67-35">focus_arable_lands_naz_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">9</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_2018'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_arable_lands_naz_df.surface_ha_2018 <span class="op" style="color: #5E5E5E;">/</span> focus_arable_lands_naz_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb67-36">focus_arable_lands_naz_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Perc.Diff. | 2018-2000'</span>, value<span class="op" style="color: #5E5E5E;">=</span>(focus_arable_lands_naz_df.perc_2018 <span class="op" style="color: #5E5E5E;">-</span> focus_arable_lands_naz_df.perc_2000))</span>
<span id="cb67-37">focus_arable_lands_naz_df.sort_values(by<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'Perc.Diff. | 2018-2000'</span>], ascending<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb67-38">focus_arable_lands_naz_df</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="59">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>pro_com</th>
      <th>comune</th>
      <th>provincia</th>
      <th>regione</th>
      <th>sup_com_ha</th>
      <th>perc_1990</th>
      <th>perc_2000</th>
      <th>perc_2006</th>
      <th>perc_2012</th>
      <th>perc_2018</th>
      <th>Perc.Diff. | 2018-2000</th>
      <th>surface_ha_2018</th>
      <th>surface_ha_2012</th>
      <th>surface_ha_2006</th>
      <th>surface_ha_2000</th>
      <th>surface_ha_1990</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1903</th>
      <td>28080.0</td>
      <td>Santa Giustina in Colle</td>
      <td>Padova</td>
      <td>Veneto</td>
      <td>1796.754897</td>
      <td>89.86</td>
      <td>92.50</td>
      <td>91.92</td>
      <td>12.83</td>
      <td>12.83</td>
      <td>-79.67</td>
      <td>230.5114</td>
      <td>230.5115</td>
      <td>1651.6402</td>
      <td>1661.9126</td>
      <td>1614.5434</td>
    </tr>
    <tr>
      <th>1861</th>
      <td>28036.0</td>
      <td>Curtarolo</td>
      <td>Padova</td>
      <td>Veneto</td>
      <td>1472.896746</td>
      <td>89.61</td>
      <td>84.87</td>
      <td>83.69</td>
      <td>9.24</td>
      <td>9.24</td>
      <td>-75.63</td>
      <td>136.0505</td>
      <td>136.0505</td>
      <td>1232.6876</td>
      <td>1250.0597</td>
      <td>1319.9213</td>
    </tr>
    <tr>
      <th>1626</th>
      <td>24026.0</td>
      <td>Cassola</td>
      <td>Vicenza</td>
      <td>Veneto</td>
      <td>1273.950878</td>
      <td>70.93</td>
      <td>69.20</td>
      <td>66.58</td>
      <td>11.82</td>
      <td>11.13</td>
      <td>-58.07</td>
      <td>141.8257</td>
      <td>150.5180</td>
      <td>848.1867</td>
      <td>881.6361</td>
      <td>903.5994</td>
    </tr>
    <tr>
      <th>3451</th>
      <td>64072.0</td>
      <td>Pietradefusi</td>
      <td>Avellino</td>
      <td>Campania</td>
      <td>924.149874</td>
      <td>77.90</td>
      <td>77.90</td>
      <td>20.16</td>
      <td>20.16</td>
      <td>20.16</td>
      <td>-57.74</td>
      <td>186.3344</td>
      <td>186.3344</td>
      <td>186.3345</td>
      <td>719.9375</td>
      <td>719.9308</td>
    </tr>
    <tr>
      <th>3442</th>
      <td>64056.0</td>
      <td>Montefusco</td>
      <td>Avellino</td>
      <td>Campania</td>
      <td>823.823558</td>
      <td>59.13</td>
      <td>59.13</td>
      <td>2.01</td>
      <td>2.01</td>
      <td>2.01</td>
      <td>-57.12</td>
      <td>16.5238</td>
      <td>16.5238</td>
      <td>16.5238</td>
      <td>487.1327</td>
      <td>487.1269</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>3880</th>
      <td>70046.0</td>
      <td>Montenero di Bisaccia</td>
      <td>Campobasso</td>
      <td>Molise</td>
      <td>9331.252115</td>
      <td>27.05</td>
      <td>26.67</td>
      <td>70.13</td>
      <td>70.13</td>
      <td>70.13</td>
      <td>43.46</td>
      <td>6544.4633</td>
      <td>6544.4633</td>
      <td>6544.4634</td>
      <td>2488.5836</td>
      <td>2524.0691</td>
    </tr>
    <tr>
      <th>3230</th>
      <td>61020.0</td>
      <td>Casaluce</td>
      <td>Caserta</td>
      <td>Campania</td>
      <td>955.842829</td>
      <td>0.70</td>
      <td>0.70</td>
      <td>0.70</td>
      <td>60.53</td>
      <td>60.53</td>
      <td>59.83</td>
      <td>578.6141</td>
      <td>578.6141</td>
      <td>6.7225</td>
      <td>6.7226</td>
      <td>6.7222</td>
    </tr>
    <tr>
      <th>3903</th>
      <td>70069.0</td>
      <td>San Martino in Pensilis</td>
      <td>Campobasso</td>
      <td>Molise</td>
      <td>10065.202788</td>
      <td>23.10</td>
      <td>23.10</td>
      <td>83.46</td>
      <td>83.46</td>
      <td>83.46</td>
      <td>60.36</td>
      <td>8400.8974</td>
      <td>8400.8974</td>
      <td>8400.8973</td>
      <td>2324.9437</td>
      <td>2324.9034</td>
    </tr>
    <tr>
      <th>3245</th>
      <td>61037.0</td>
      <td>Frignano</td>
      <td>Caserta</td>
      <td>Campania</td>
      <td>985.795577</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>69.03</td>
      <td>69.03</td>
      <td>69.03</td>
      <td>680.5149</td>
      <td>680.5149</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
    </tr>
    <tr>
      <th>3297</th>
      <td>61098.0</td>
      <td>Villa di Briano</td>
      <td>Caserta</td>
      <td>Campania</td>
      <td>854.692612</td>
      <td>3.91</td>
      <td>3.91</td>
      <td>3.91</td>
      <td>74.03</td>
      <td>74.03</td>
      <td>70.12</td>
      <td>632.7436</td>
      <td>632.7436</td>
      <td>33.4422</td>
      <td>33.4424</td>
      <td>33.4453</td>
    </tr>
  </tbody>
</table>
<p>5585 rows × 16 columns</p>
</div>
</div>
</div>
<div class="cell" data-execution_count="60">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb68-1"><span class="co" style="color: #5E5E5E;"># Superfici in arretramento</span></span>
<span id="cb68-2">naz_reduction_arable_lands_area <span class="op" style="color: #5E5E5E;">=</span> focus_arable_lands_naz_df.iloc[<span class="dv" style="color: #AD0000;">0</span>:<span class="dv" style="color: #AD0000;">10</span>]</span>
<span id="cb68-3">naz_reduction_arable_lands_area</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="60">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>pro_com</th>
      <th>comune</th>
      <th>provincia</th>
      <th>regione</th>
      <th>sup_com_ha</th>
      <th>perc_1990</th>
      <th>perc_2000</th>
      <th>perc_2006</th>
      <th>perc_2012</th>
      <th>perc_2018</th>
      <th>Perc.Diff. | 2018-2000</th>
      <th>surface_ha_2018</th>
      <th>surface_ha_2012</th>
      <th>surface_ha_2006</th>
      <th>surface_ha_2000</th>
      <th>surface_ha_1990</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1903</th>
      <td>28080.0</td>
      <td>Santa Giustina in Colle</td>
      <td>Padova</td>
      <td>Veneto</td>
      <td>1796.754897</td>
      <td>89.86</td>
      <td>92.50</td>
      <td>91.92</td>
      <td>12.83</td>
      <td>12.83</td>
      <td>-79.67</td>
      <td>230.5114</td>
      <td>230.5115</td>
      <td>1651.6402</td>
      <td>1661.9126</td>
      <td>1614.5434</td>
    </tr>
    <tr>
      <th>1861</th>
      <td>28036.0</td>
      <td>Curtarolo</td>
      <td>Padova</td>
      <td>Veneto</td>
      <td>1472.896746</td>
      <td>89.61</td>
      <td>84.87</td>
      <td>83.69</td>
      <td>9.24</td>
      <td>9.24</td>
      <td>-75.63</td>
      <td>136.0505</td>
      <td>136.0505</td>
      <td>1232.6876</td>
      <td>1250.0597</td>
      <td>1319.9213</td>
    </tr>
    <tr>
      <th>1626</th>
      <td>24026.0</td>
      <td>Cassola</td>
      <td>Vicenza</td>
      <td>Veneto</td>
      <td>1273.950878</td>
      <td>70.93</td>
      <td>69.20</td>
      <td>66.58</td>
      <td>11.82</td>
      <td>11.13</td>
      <td>-58.07</td>
      <td>141.8257</td>
      <td>150.5180</td>
      <td>848.1867</td>
      <td>881.6361</td>
      <td>903.5994</td>
    </tr>
    <tr>
      <th>3451</th>
      <td>64072.0</td>
      <td>Pietradefusi</td>
      <td>Avellino</td>
      <td>Campania</td>
      <td>924.149874</td>
      <td>77.90</td>
      <td>77.90</td>
      <td>20.16</td>
      <td>20.16</td>
      <td>20.16</td>
      <td>-57.74</td>
      <td>186.3344</td>
      <td>186.3344</td>
      <td>186.3345</td>
      <td>719.9375</td>
      <td>719.9308</td>
    </tr>
    <tr>
      <th>3442</th>
      <td>64056.0</td>
      <td>Montefusco</td>
      <td>Avellino</td>
      <td>Campania</td>
      <td>823.823558</td>
      <td>59.13</td>
      <td>59.13</td>
      <td>2.01</td>
      <td>2.01</td>
      <td>2.01</td>
      <td>-57.12</td>
      <td>16.5238</td>
      <td>16.5238</td>
      <td>16.5238</td>
      <td>487.1327</td>
      <td>487.1269</td>
    </tr>
    <tr>
      <th>1923</th>
      <td>28101.0</td>
      <td>Villa del Conte</td>
      <td>Padova</td>
      <td>Veneto</td>
      <td>1734.840442</td>
      <td>96.57</td>
      <td>96.39</td>
      <td>92.42</td>
      <td>39.87</td>
      <td>39.87</td>
      <td>-56.52</td>
      <td>691.7159</td>
      <td>691.7159</td>
      <td>1603.3313</td>
      <td>1672.1357</td>
      <td>1675.4122</td>
    </tr>
    <tr>
      <th>2545</th>
      <td>44036.0</td>
      <td>Montefiore dell'Aso</td>
      <td>Ascoli Piceno</td>
      <td>Marche</td>
      <td>2820.740109</td>
      <td>31.58</td>
      <td>52.36</td>
      <td>51.94</td>
      <td>1.96</td>
      <td>1.96</td>
      <td>-50.40</td>
      <td>55.4167</td>
      <td>55.4167</td>
      <td>1465.2004</td>
      <td>1477.0519</td>
      <td>890.6685</td>
    </tr>
    <tr>
      <th>1847</th>
      <td>28020.0</td>
      <td>Campo San Martino</td>
      <td>Padova</td>
      <td>Veneto</td>
      <td>1315.986365</td>
      <td>89.89</td>
      <td>89.56</td>
      <td>87.50</td>
      <td>39.25</td>
      <td>39.25</td>
      <td>-50.31</td>
      <td>516.4652</td>
      <td>516.4652</td>
      <td>1151.4484</td>
      <td>1178.6033</td>
      <td>1182.9783</td>
    </tr>
    <tr>
      <th>4097</th>
      <td>75041.0</td>
      <td>Martignano</td>
      <td>Lecce</td>
      <td>Puglia</td>
      <td>649.212863</td>
      <td>55.63</td>
      <td>55.62</td>
      <td>7.23</td>
      <td>7.23</td>
      <td>7.23</td>
      <td>-48.39</td>
      <td>46.9307</td>
      <td>46.9307</td>
      <td>46.9307</td>
      <td>361.0667</td>
      <td>361.1841</td>
    </tr>
    <tr>
      <th>4147</th>
      <td>75094.0</td>
      <td>Zollino</td>
      <td>Lecce</td>
      <td>Puglia</td>
      <td>995.447907</td>
      <td>73.07</td>
      <td>73.07</td>
      <td>25.56</td>
      <td>25.56</td>
      <td>25.56</td>
      <td>-47.51</td>
      <td>254.4702</td>
      <td>254.4702</td>
      <td>254.4701</td>
      <td>727.3750</td>
      <td>727.3907</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="61">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb69-1"><span class="co" style="color: #5E5E5E;"># Superfici in avanzamento</span></span>
<span id="cb69-2">naz_increase_arable_lands_area <span class="op" style="color: #5E5E5E;">=</span> focus_arable_lands_naz_df.iloc[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">10</span>:]</span>
<span id="cb69-3">naz_increase_arable_lands_area.sort_values(by<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'Perc.Diff. | 2018-2000'</span>], ascending<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb69-4">naz_increase_arable_lands_area</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="61">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>pro_com</th>
      <th>comune</th>
      <th>provincia</th>
      <th>regione</th>
      <th>sup_com_ha</th>
      <th>perc_1990</th>
      <th>perc_2000</th>
      <th>perc_2006</th>
      <th>perc_2012</th>
      <th>perc_2018</th>
      <th>Perc.Diff. | 2018-2000</th>
      <th>surface_ha_2018</th>
      <th>surface_ha_2012</th>
      <th>surface_ha_2006</th>
      <th>surface_ha_2000</th>
      <th>surface_ha_1990</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>3297</th>
      <td>61098.0</td>
      <td>Villa di Briano</td>
      <td>Caserta</td>
      <td>Campania</td>
      <td>854.692612</td>
      <td>3.91</td>
      <td>3.91</td>
      <td>3.91</td>
      <td>74.03</td>
      <td>74.03</td>
      <td>70.12</td>
      <td>632.7436</td>
      <td>632.7436</td>
      <td>33.4422</td>
      <td>33.4424</td>
      <td>33.4453</td>
    </tr>
    <tr>
      <th>3245</th>
      <td>61037.0</td>
      <td>Frignano</td>
      <td>Caserta</td>
      <td>Campania</td>
      <td>985.795577</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>69.03</td>
      <td>69.03</td>
      <td>69.03</td>
      <td>680.5149</td>
      <td>680.5149</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
    </tr>
    <tr>
      <th>3903</th>
      <td>70069.0</td>
      <td>San Martino in Pensilis</td>
      <td>Campobasso</td>
      <td>Molise</td>
      <td>10065.202788</td>
      <td>23.10</td>
      <td>23.10</td>
      <td>83.46</td>
      <td>83.46</td>
      <td>83.46</td>
      <td>60.36</td>
      <td>8400.8974</td>
      <td>8400.8974</td>
      <td>8400.8973</td>
      <td>2324.9437</td>
      <td>2324.9034</td>
    </tr>
    <tr>
      <th>3230</th>
      <td>61020.0</td>
      <td>Casaluce</td>
      <td>Caserta</td>
      <td>Campania</td>
      <td>955.842829</td>
      <td>0.70</td>
      <td>0.70</td>
      <td>0.70</td>
      <td>60.53</td>
      <td>60.53</td>
      <td>59.83</td>
      <td>578.6141</td>
      <td>578.6141</td>
      <td>6.7225</td>
      <td>6.7226</td>
      <td>6.7222</td>
    </tr>
    <tr>
      <th>3880</th>
      <td>70046.0</td>
      <td>Montenero di Bisaccia</td>
      <td>Campobasso</td>
      <td>Molise</td>
      <td>9331.252115</td>
      <td>27.05</td>
      <td>26.67</td>
      <td>70.13</td>
      <td>70.13</td>
      <td>70.13</td>
      <td>43.46</td>
      <td>6544.4633</td>
      <td>6544.4633</td>
      <td>6544.4634</td>
      <td>2488.5836</td>
      <td>2524.0691</td>
    </tr>
    <tr>
      <th>3912</th>
      <td>70078.0</td>
      <td>Termoli</td>
      <td>Campobasso</td>
      <td>Molise</td>
      <td>5563.450730</td>
      <td>16.95</td>
      <td>16.76</td>
      <td>57.90</td>
      <td>59.83</td>
      <td>59.83</td>
      <td>43.07</td>
      <td>3328.3420</td>
      <td>3328.3420</td>
      <td>3221.2335</td>
      <td>932.5081</td>
      <td>942.8076</td>
    </tr>
    <tr>
      <th>5205</th>
      <td>97072.0</td>
      <td>Rogeno</td>
      <td>Lecco</td>
      <td>Lombardia</td>
      <td>482.482168</td>
      <td>0.70</td>
      <td>0.70</td>
      <td>42.34</td>
      <td>42.34</td>
      <td>42.34</td>
      <td>41.64</td>
      <td>204.2863</td>
      <td>204.2863</td>
      <td>204.2863</td>
      <td>3.3881</td>
      <td>3.3881</td>
    </tr>
    <tr>
      <th>4668</th>
      <td>83090.0</td>
      <td>San Teodoro</td>
      <td>Messina</td>
      <td>Sicilia</td>
      <td>1397.402292</td>
      <td>29.16</td>
      <td>29.16</td>
      <td>67.97</td>
      <td>67.97</td>
      <td>67.97</td>
      <td>38.81</td>
      <td>949.7711</td>
      <td>949.7711</td>
      <td>949.7711</td>
      <td>407.4871</td>
      <td>407.4882</td>
    </tr>
    <tr>
      <th>3889</th>
      <td>70055.0</td>
      <td>Portocannone</td>
      <td>Campobasso</td>
      <td>Molise</td>
      <td>1311.357120</td>
      <td>19.86</td>
      <td>19.86</td>
      <td>57.15</td>
      <td>57.15</td>
      <td>57.15</td>
      <td>37.29</td>
      <td>749.4987</td>
      <td>749.4987</td>
      <td>749.4987</td>
      <td>260.4368</td>
      <td>260.4467</td>
    </tr>
    <tr>
      <th>3931</th>
      <td>71014.0</td>
      <td>Casalvecchio di Puglia</td>
      <td>Foggia</td>
      <td>Puglia</td>
      <td>3193.205814</td>
      <td>45.71</td>
      <td>48.78</td>
      <td>48.78</td>
      <td>84.11</td>
      <td>84.11</td>
      <td>35.33</td>
      <td>2685.9620</td>
      <td>2685.9620</td>
      <td>1557.6443</td>
      <td>1557.6441</td>
      <td>1459.5313</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
<section id="aree-bruciate-1" class="level3">
<h3 class="anchored" data-anchor-id="aree-bruciate-1">3.3.4 Aree bruciate</h3>
<div class="cell" data-execution_count="62">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb70-1"><span class="co" style="color: #5E5E5E;"># Dati 1990</span></span>
<span id="cb70-2">burnt_surface_naz_1990 <span class="op" style="color: #5E5E5E;">=</span> focus_naz_1990_group[focus_naz_1990_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Burnt areas'</span>])]</span>
<span id="cb70-3">burnt_surface_naz_1990_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(burnt_surface_naz_1990.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>])[<span class="st" style="color: #20794D;">'surface_ha_1990'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb70-4">burnt_surface_naz_1990_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb70-5"></span>
<span id="cb70-6"><span class="co" style="color: #5E5E5E;"># Dati 2000</span></span>
<span id="cb70-7">burnt_surface_naz_2000 <span class="op" style="color: #5E5E5E;">=</span> focus_naz_2000_group[focus_naz_2000_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Burnt areas'</span>])]</span>
<span id="cb70-8">burnt_surface_naz_2000_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(burnt_surface_naz_2000.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2000'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb70-9">burnt_surface_naz_2000_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb70-10"></span>
<span id="cb70-11"><span class="co" style="color: #5E5E5E;"># Dati 2006</span></span>
<span id="cb70-12">burnt_surface_naz_2006 <span class="op" style="color: #5E5E5E;">=</span> focus_naz_2006_group[focus_naz_2006_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Burnt areas'</span>])]</span>
<span id="cb70-13">burnt_surface_naz_2006_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(burnt_surface_naz_2006.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2006'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb70-14">burnt_surface_naz_2006_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb70-15"></span>
<span id="cb70-16"><span class="co" style="color: #5E5E5E;"># Dati 2012</span></span>
<span id="cb70-17">burnt_surface_naz_2012 <span class="op" style="color: #5E5E5E;">=</span> focus_naz_2012_group[focus_naz_2012_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Burnt areas'</span>])]</span>
<span id="cb70-18">burnt_surface_naz_2012_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(burnt_surface_naz_2012.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2012'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb70-19">burnt_surface_naz_2012_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb70-20"></span>
<span id="cb70-21"><span class="co" style="color: #5E5E5E;"># Dati 2018</span></span>
<span id="cb70-22">burnt_surface_naz_2018 <span class="op" style="color: #5E5E5E;">=</span> focus_naz_2018_group[focus_naz_2018_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Burnt areas'</span>])]</span>
<span id="cb70-23">burnt_surface_naz_2018_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(burnt_surface_naz_2018.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>, <span class="st" style="color: #20794D;">'comune'</span>, <span class="st" style="color: #20794D;">'provincia'</span>, <span class="st" style="color: #20794D;">'regione'</span>, <span class="st" style="color: #20794D;">'sup_com_ha'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2018'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb70-24">burnt_surface_naz_2018_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb70-25"></span>
<span id="cb70-26"><span class="co" style="color: #5E5E5E;"># Dati aggregati</span></span>
<span id="cb70-27">focus_burnt_naz <span class="op" style="color: #5E5E5E;">=</span> [burnt_surface_naz_2018_group, burnt_surface_naz_2012_group, burnt_surface_naz_2006_group, burnt_surface_naz_2000_group, burnt_surface_naz_1990_group]</span>
<span id="cb70-28">focus_burnt_naz_df <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">reduce</span>(<span class="kw" style="color: #003B4F;">lambda</span>  left,right: pd.merge(left,right,on<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'pro_com'</span>], how<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'outer'</span>), focus_burnt_naz)</span>
<span id="cb70-29">focus_burnt_naz_df <span class="op" style="color: #5E5E5E;">=</span> focus_burnt_naz_df[focus_burnt_naz_df[<span class="st" style="color: #20794D;">'sup_com_ha'</span>] <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb70-30">focus_burnt_naz_df.fillna(<span class="dv" style="color: #AD0000;">0</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb70-31">focus_burnt_naz_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_1990'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_burnt_naz_df.surface_ha_1990 <span class="op" style="color: #5E5E5E;">/</span> focus_burnt_naz_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb70-32">focus_burnt_naz_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">6</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_2000'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_burnt_naz_df.surface_ha_2000 <span class="op" style="color: #5E5E5E;">/</span> focus_burnt_naz_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb70-33">focus_burnt_naz_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">7</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_2006'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_burnt_naz_df.surface_ha_2006 <span class="op" style="color: #5E5E5E;">/</span> focus_burnt_naz_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb70-34">focus_burnt_naz_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">8</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_2012'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_burnt_naz_df.surface_ha_2012 <span class="op" style="color: #5E5E5E;">/</span> focus_burnt_naz_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb70-35">focus_burnt_naz_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">9</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_2018'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_burnt_naz_df.surface_ha_2018 <span class="op" style="color: #5E5E5E;">/</span> focus_burnt_naz_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb70-36">focus_burnt_naz_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Perc.Diff. | 2018-2000'</span>, value<span class="op" style="color: #5E5E5E;">=</span>(focus_burnt_naz_df.perc_2018 <span class="op" style="color: #5E5E5E;">-</span> focus_burnt_naz_df.perc_2000))</span>
<span id="cb70-37">focus_burnt_naz_df.sort_values(by<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'Perc.Diff. | 2018-2000'</span>], ascending<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb70-38">focus_burnt_naz_df</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="62">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>pro_com</th>
      <th>comune</th>
      <th>provincia</th>
      <th>regione</th>
      <th>sup_com_ha</th>
      <th>perc_1990</th>
      <th>perc_2000</th>
      <th>perc_2006</th>
      <th>perc_2012</th>
      <th>perc_2018</th>
      <th>Perc.Diff. | 2018-2000</th>
      <th>surface_ha_2018</th>
      <th>surface_ha_2012</th>
      <th>surface_ha_2006</th>
      <th>surface_ha_2000</th>
      <th>surface_ha_1990</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>114</th>
      <td>81020.0</td>
      <td>San Vito Lo Capo</td>
      <td>Trapani</td>
      <td>Sicilia</td>
      <td>6011.867192</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>42.65</td>
      <td>42.65</td>
      <td>2564.0387</td>
      <td>0.0000</td>
      <td>0.0</td>
      <td>0.0000</td>
      <td>0.0000</td>
    </tr>
    <tr>
      <th>141</th>
      <td>83063.0</td>
      <td>Oliveri</td>
      <td>Messina</td>
      <td>Sicilia</td>
      <td>1043.475159</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>36.58</td>
      <td>36.58</td>
      <td>381.7231</td>
      <td>0.0000</td>
      <td>0.0</td>
      <td>0.0000</td>
      <td>0.0000</td>
    </tr>
    <tr>
      <th>49</th>
      <td>63082.0</td>
      <td>Terzigno</td>
      <td>Napoli</td>
      <td>Campania</td>
      <td>2346.480829</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>18.50</td>
      <td>18.50</td>
      <td>434.1155</td>
      <td>0.0000</td>
      <td>0.0</td>
      <td>0.0000</td>
      <td>0.0000</td>
    </tr>
    <tr>
      <th>45</th>
      <td>63064.0</td>
      <td>Ercolano</td>
      <td>Napoli</td>
      <td>Campania</td>
      <td>1989.359843</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.0</td>
      <td>8.49</td>
      <td>17.54</td>
      <td>17.54</td>
      <td>348.9169</td>
      <td>168.9727</td>
      <td>0.0</td>
      <td>0.0000</td>
      <td>0.0000</td>
    </tr>
    <tr>
      <th>223</th>
      <td>111046.0</td>
      <td>Nurallao</td>
      <td>Sud Sardegna</td>
      <td>Sardegna</td>
      <td>3476.167353</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>17.40</td>
      <td>17.40</td>
      <td>604.7035</td>
      <td>0.0000</td>
      <td>0.0</td>
      <td>0.0000</td>
      <td>0.0000</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>140</th>
      <td>83061.0</td>
      <td>Nizza di Sicilia</td>
      <td>Messina</td>
      <td>Sicilia</td>
      <td>1341.538156</td>
      <td>0.00</td>
      <td>1.97</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.02</td>
      <td>-1.95</td>
      <td>0.3277</td>
      <td>0.0000</td>
      <td>0.0</td>
      <td>26.3822</td>
      <td>0.0000</td>
    </tr>
    <tr>
      <th>203</th>
      <td>100003.0</td>
      <td>Montemurlo</td>
      <td>Prato</td>
      <td>Toscana</td>
      <td>3077.584750</td>
      <td>0.00</td>
      <td>3.78</td>
      <td>0.0</td>
      <td>1.64</td>
      <td>1.64</td>
      <td>-2.14</td>
      <td>50.4463</td>
      <td>50.4463</td>
      <td>0.0</td>
      <td>116.4644</td>
      <td>0.0000</td>
    </tr>
    <tr>
      <th>66</th>
      <td>65052.0</td>
      <td>Fisciano</td>
      <td>Salerno</td>
      <td>Campania</td>
      <td>3168.742849</td>
      <td>0.00</td>
      <td>4.15</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>1.43</td>
      <td>-2.72</td>
      <td>45.1761</td>
      <td>0.0000</td>
      <td>0.0</td>
      <td>131.4723</td>
      <td>0.0000</td>
    </tr>
    <tr>
      <th>4</th>
      <td>10059.0</td>
      <td>Sestri Levante</td>
      <td>Genova</td>
      <td>Liguria</td>
      <td>3361.625421</td>
      <td>12.95</td>
      <td>9.23</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>3.04</td>
      <td>-6.19</td>
      <td>102.1619</td>
      <td>0.0000</td>
      <td>0.0</td>
      <td>310.3360</td>
      <td>435.4819</td>
    </tr>
    <tr>
      <th>134</th>
      <td>83045.0</td>
      <td>Mandanici</td>
      <td>Messina</td>
      <td>Sicilia</td>
      <td>1185.361172</td>
      <td>0.00</td>
      <td>27.54</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>5.16</td>
      <td>-22.38</td>
      <td>61.1878</td>
      <td>0.0000</td>
      <td>0.0</td>
      <td>326.4113</td>
      <td>0.0000</td>
    </tr>
  </tbody>
</table>
<p>235 rows × 16 columns</p>
</div>
</div>
</div>
</section>
<section id="aree-adibite-a-discarica-1" class="level3">
<h3 class="anchored" data-anchor-id="aree-adibite-a-discarica-1">3.3.5 Aree adibite a discarica</h3>
<div class="cell" data-execution_count="63">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb71-1"><span class="co" style="color: #5E5E5E;"># Dati 1990</span></span>
<span id="cb71-2">dump_surface_naz_1990 <span class="op" style="color: #5E5E5E;">=</span> focus_naz_1990_group[focus_naz_1990_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Dump sites'</span>])]</span>
<span id="cb71-3">dump_surface_naz_1990_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(dump_surface_naz_1990.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>])[<span class="st" style="color: #20794D;">'surface_ha_1990'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb71-4">dump_surface_naz_1990_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb71-5"></span>
<span id="cb71-6"><span class="co" style="color: #5E5E5E;"># Dati 2000</span></span>
<span id="cb71-7">dump_surface_naz_2000 <span class="op" style="color: #5E5E5E;">=</span> focus_naz_2000_group[focus_naz_2000_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Dump sites'</span>])]</span>
<span id="cb71-8">dump_surface_naz_2000_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(dump_surface_naz_2000.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2000'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb71-9">dump_surface_naz_2000_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb71-10"></span>
<span id="cb71-11"><span class="co" style="color: #5E5E5E;"># Dati 2006</span></span>
<span id="cb71-12">dump_surface_naz_2006 <span class="op" style="color: #5E5E5E;">=</span> focus_naz_2006_group[focus_naz_2006_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Dump sites'</span>])]</span>
<span id="cb71-13">dump_surface_naz_2006_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(dump_surface_naz_2006.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2006'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb71-14">dump_surface_naz_2006_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb71-15"></span>
<span id="cb71-16"><span class="co" style="color: #5E5E5E;"># Dati 2012</span></span>
<span id="cb71-17">dump_surface_naz_2012 <span class="op" style="color: #5E5E5E;">=</span> focus_naz_2012_group[focus_naz_2012_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Dump sites'</span>])]</span>
<span id="cb71-18">dump_surface_naz_2012_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(dump_surface_naz_2012.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2012'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb71-19">dump_surface_naz_2012_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb71-20"></span>
<span id="cb71-21"><span class="co" style="color: #5E5E5E;"># Dati 2018</span></span>
<span id="cb71-22">dump_surface_naz_2018 <span class="op" style="color: #5E5E5E;">=</span> focus_naz_2018_group[focus_naz_2018_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Dump sites'</span>])]</span>
<span id="cb71-23">dump_surface_naz_2018_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(dump_surface_naz_2018.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>, <span class="st" style="color: #20794D;">'comune'</span>, <span class="st" style="color: #20794D;">'provincia'</span>, <span class="st" style="color: #20794D;">'regione'</span>, <span class="st" style="color: #20794D;">'sup_com_ha'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2018'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb71-24">dump_surface_naz_2018_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb71-25"></span>
<span id="cb71-26"><span class="co" style="color: #5E5E5E;"># Dati aggregati</span></span>
<span id="cb71-27">focus_dump_naz <span class="op" style="color: #5E5E5E;">=</span> [dump_surface_naz_2018_group, dump_surface_naz_2012_group, dump_surface_naz_2006_group, dump_surface_naz_2000_group, dump_surface_naz_1990_group]</span>
<span id="cb71-28">focus_dump_naz_df <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">reduce</span>(<span class="kw" style="color: #003B4F;">lambda</span>  left,right: pd.merge(left,right,on<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'pro_com'</span>], how<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'outer'</span>), focus_dump_naz)</span>
<span id="cb71-29">focus_dump_naz_df <span class="op" style="color: #5E5E5E;">=</span> focus_dump_naz_df[focus_dump_naz_df[<span class="st" style="color: #20794D;">'sup_com_ha'</span>] <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb71-30">focus_dump_naz_df.fillna(<span class="dv" style="color: #AD0000;">0</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb71-31">focus_dump_naz_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_1990'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_dump_naz_df.surface_ha_1990 <span class="op" style="color: #5E5E5E;">/</span> focus_dump_naz_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb71-32">focus_dump_naz_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">6</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_2000'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_dump_naz_df.surface_ha_2000 <span class="op" style="color: #5E5E5E;">/</span> focus_dump_naz_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb71-33">focus_dump_naz_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">7</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_2006'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_dump_naz_df.surface_ha_2006 <span class="op" style="color: #5E5E5E;">/</span> focus_dump_naz_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb71-34">focus_dump_naz_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">8</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_2012'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_dump_naz_df.surface_ha_2012 <span class="op" style="color: #5E5E5E;">/</span> focus_dump_naz_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb71-35">focus_dump_naz_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">9</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_2018'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_dump_naz_df.surface_ha_2018 <span class="op" style="color: #5E5E5E;">/</span> focus_dump_naz_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb71-36">focus_dump_naz_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Perc.Diff. | 2018-2000'</span>, value<span class="op" style="color: #5E5E5E;">=</span>(focus_dump_naz_df.perc_2018 <span class="op" style="color: #5E5E5E;">-</span> focus_dump_naz_df.perc_2000))</span>
<span id="cb71-37">focus_dump_naz_df.sort_values(by<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'Perc.Diff. | 2018-2000'</span>], ascending<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb71-38">focus_dump_naz_df</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="63">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>pro_com</th>
      <th>comune</th>
      <th>provincia</th>
      <th>regione</th>
      <th>sup_com_ha</th>
      <th>perc_1990</th>
      <th>perc_2000</th>
      <th>perc_2006</th>
      <th>perc_2012</th>
      <th>perc_2018</th>
      <th>Perc.Diff. | 2018-2000</th>
      <th>surface_ha_2018</th>
      <th>surface_ha_2012</th>
      <th>surface_ha_2006</th>
      <th>surface_ha_2000</th>
      <th>surface_ha_1990</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2</th>
      <td>1273.0</td>
      <td>Torrazza Piemonte</td>
      <td>Torino</td>
      <td>Piemonte</td>
      <td>982.382979</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>6.72</td>
      <td>7.64</td>
      <td>7.64</td>
      <td>75.0599</td>
      <td>66.0309</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
    </tr>
    <tr>
      <th>13</th>
      <td>20034.0</td>
      <td>Medole</td>
      <td>Mantova</td>
      <td>Lombardia</td>
      <td>2572.857637</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>6.66</td>
      <td>6.66</td>
      <td>6.66</td>
      <td>171.3837</td>
      <td>171.3837</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
    </tr>
    <tr>
      <th>82</th>
      <td>87030.0</td>
      <td>Motta Sant'Anastasia</td>
      <td>Catania</td>
      <td>Sicilia</td>
      <td>3569.989125</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>1.62</td>
      <td>2.16</td>
      <td>2.16</td>
      <td>2.16</td>
      <td>77.0713</td>
      <td>77.0713</td>
      <td>57.8396</td>
      <td>0.0000</td>
      <td>0.0000</td>
    </tr>
    <tr>
      <th>25</th>
      <td>34041.0</td>
      <td>Torrile</td>
      <td>Parma</td>
      <td>Emilia-Romagna</td>
      <td>3714.699293</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>2.10</td>
      <td>2.10</td>
      <td>2.10</td>
      <td>77.8524</td>
      <td>77.8524</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
    </tr>
    <tr>
      <th>52</th>
      <td>57027.0</td>
      <td>Fara in Sabina</td>
      <td>Rieti</td>
      <td>Lazio</td>
      <td>5496.235909</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>1.98</td>
      <td>1.98</td>
      <td>1.98</td>
      <td>108.5511</td>
      <td>108.5511</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>16</th>
      <td>26010.0</td>
      <td>Casier</td>
      <td>Treviso</td>
      <td>Veneto</td>
      <td>1342.173767</td>
      <td>0.0</td>
      <td>1.25</td>
      <td>1.25</td>
      <td>1.25</td>
      <td>1.25</td>
      <td>0.00</td>
      <td>16.8000</td>
      <td>16.8000</td>
      <td>16.8000</td>
      <td>16.8000</td>
      <td>0.0000</td>
    </tr>
    <tr>
      <th>35</th>
      <td>37032.0</td>
      <td>Imola</td>
      <td>Bologna</td>
      <td>Emilia-Romagna</td>
      <td>20502.134650</td>
      <td>0.0</td>
      <td>0.18</td>
      <td>0.18</td>
      <td>0.18</td>
      <td>0.18</td>
      <td>0.00</td>
      <td>37.1468</td>
      <td>37.1468</td>
      <td>37.1468</td>
      <td>37.1468</td>
      <td>0.0000</td>
    </tr>
    <tr>
      <th>36</th>
      <td>38006.0</td>
      <td>Comacchio</td>
      <td>Ferrara</td>
      <td>Emilia-Romagna</td>
      <td>28374.611068</td>
      <td>0.1</td>
      <td>0.10</td>
      <td>0.10</td>
      <td>0.10</td>
      <td>0.10</td>
      <td>0.00</td>
      <td>28.5891</td>
      <td>28.5891</td>
      <td>28.5891</td>
      <td>28.5898</td>
      <td>28.5892</td>
    </tr>
    <tr>
      <th>20</th>
      <td>27042.0</td>
      <td>Venezia</td>
      <td>Venezia</td>
      <td>Veneto</td>
      <td>41589.266300</td>
      <td>0.0</td>
      <td>0.09</td>
      <td>0.09</td>
      <td>0.09</td>
      <td>0.09</td>
      <td>0.00</td>
      <td>36.2536</td>
      <td>36.2536</td>
      <td>36.2536</td>
      <td>36.2536</td>
      <td>0.0000</td>
    </tr>
    <tr>
      <th>80</th>
      <td>85007.0</td>
      <td>Gela</td>
      <td>Caltanissetta</td>
      <td>Sicilia</td>
      <td>27921.954881</td>
      <td>0.0</td>
      <td>0.17</td>
      <td>0.24</td>
      <td>0.11</td>
      <td>0.11</td>
      <td>-0.06</td>
      <td>29.9715</td>
      <td>29.9715</td>
      <td>65.9464</td>
      <td>47.9113</td>
      <td>0.0000</td>
    </tr>
  </tbody>
</table>
<p>94 rows × 16 columns</p>
</div>
</div>
</div>
<div class="cell" data-execution_count="64">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb72-1"><span class="co" style="color: #5E5E5E;"># Dati 1990</span></span>
<span id="cb72-2">green_urban_surface_surface_naz_1990 <span class="op" style="color: #5E5E5E;">=</span> focus_naz_1990_group[focus_naz_1990_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Green urban areas'</span>])]</span>
<span id="cb72-3">green_urban_surface_surface_naz_1990_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(green_urban_surface_surface_naz_1990.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>])[<span class="st" style="color: #20794D;">'surface_ha_1990'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb72-4">green_urban_surface_surface_naz_1990_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb72-5"></span>
<span id="cb72-6"><span class="co" style="color: #5E5E5E;"># Dati 2000</span></span>
<span id="cb72-7">green_urban_surface_surface_naz_2000 <span class="op" style="color: #5E5E5E;">=</span> focus_naz_2000_group[focus_naz_2000_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Green urban areas'</span>])]</span>
<span id="cb72-8">green_urban_surface_surface_naz_2000_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(green_urban_surface_surface_naz_2000.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2000'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb72-9">green_urban_surface_surface_naz_2000_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb72-10"></span>
<span id="cb72-11"><span class="co" style="color: #5E5E5E;"># Dati 2006</span></span>
<span id="cb72-12">green_urban_surface_surface_naz_2006 <span class="op" style="color: #5E5E5E;">=</span> focus_naz_2006_group[focus_naz_2006_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Green urban areas'</span>])]</span>
<span id="cb72-13">green_urban_surface_surface_naz_2006_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(green_urban_surface_surface_naz_2006.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2006'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb72-14">green_urban_surface_surface_naz_2006_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb72-15"></span>
<span id="cb72-16"><span class="co" style="color: #5E5E5E;"># Dati 2012</span></span>
<span id="cb72-17">green_urban_surface_surface_naz_2012 <span class="op" style="color: #5E5E5E;">=</span> focus_naz_2012_group[focus_naz_2012_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Green urban areas'</span>])]</span>
<span id="cb72-18">green_urban_surface_surface_naz_2012_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(green_urban_surface_surface_naz_2012.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2012'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb72-19">green_urban_surface_surface_naz_2012_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb72-20"></span>
<span id="cb72-21"><span class="co" style="color: #5E5E5E;"># Dati 2018</span></span>
<span id="cb72-22">green_urban_surface_surface_naz_2018 <span class="op" style="color: #5E5E5E;">=</span> focus_naz_2018_group[focus_naz_2018_group[<span class="st" style="color: #20794D;">'label3'</span>].isin([<span class="st" style="color: #20794D;">'Green urban areas'</span>])]</span>
<span id="cb72-23">green_urban_surface_surface_naz_2018_group <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(green_urban_surface_surface_naz_2018.groupby([<span class="st" style="color: #20794D;">'pro_com'</span>, <span class="st" style="color: #20794D;">'comune'</span>, <span class="st" style="color: #20794D;">'provincia'</span>, <span class="st" style="color: #20794D;">'regione'</span>, <span class="st" style="color: #20794D;">'sup_com_ha'</span>])[<span class="st" style="color: #20794D;">'surface_ha_2018'</span>].<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb72-24">green_urban_surface_surface_naz_2018_group.reset_index(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb72-25"></span>
<span id="cb72-26"><span class="co" style="color: #5E5E5E;"># Dati aggregati</span></span>
<span id="cb72-27">focus_green_urban_surface_naz <span class="op" style="color: #5E5E5E;">=</span> [green_urban_surface_surface_naz_2018_group, green_urban_surface_surface_naz_2012_group, green_urban_surface_surface_naz_2006_group, green_urban_surface_surface_naz_2000_group, green_urban_surface_surface_naz_1990_group]</span>
<span id="cb72-28">focus_green_urban_surface_naz_df <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">reduce</span>(<span class="kw" style="color: #003B4F;">lambda</span>  left,right: pd.merge(left,right,on<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'pro_com'</span>], how<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'outer'</span>), focus_green_urban_surface_naz)</span>
<span id="cb72-29">focus_green_urban_surface_naz_df <span class="op" style="color: #5E5E5E;">=</span> focus_green_urban_surface_naz_df[focus_green_urban_surface_naz_df[<span class="st" style="color: #20794D;">'sup_com_ha'</span>] <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb72-30">focus_green_urban_surface_naz_df.fillna(<span class="dv" style="color: #AD0000;">0</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb72-31">focus_green_urban_surface_naz_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_1990'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_green_urban_surface_naz_df.surface_ha_1990 <span class="op" style="color: #5E5E5E;">/</span> focus_green_urban_surface_naz_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb72-32">focus_green_urban_surface_naz_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">6</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_2000'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_green_urban_surface_naz_df.surface_ha_2000 <span class="op" style="color: #5E5E5E;">/</span> focus_green_urban_surface_naz_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb72-33">focus_green_urban_surface_naz_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">7</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_2006'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_green_urban_surface_naz_df.surface_ha_2006 <span class="op" style="color: #5E5E5E;">/</span> focus_green_urban_surface_naz_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb72-34">focus_green_urban_surface_naz_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">8</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_2012'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_green_urban_surface_naz_df.surface_ha_2012 <span class="op" style="color: #5E5E5E;">/</span> focus_green_urban_surface_naz_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb72-35">focus_green_urban_surface_naz_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">9</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'perc_2018'</span>, value<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">round</span>(focus_green_urban_surface_naz_df.surface_ha_2018 <span class="op" style="color: #5E5E5E;">/</span> focus_green_urban_surface_naz_df.sup_com_ha, <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb72-36">focus_green_urban_surface_naz_df.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Perc.Diff. | 2018-2000'</span>, value<span class="op" style="color: #5E5E5E;">=</span>(focus_green_urban_surface_naz_df.perc_2018 <span class="op" style="color: #5E5E5E;">-</span> focus_green_urban_surface_naz_df.perc_2000))</span>
<span id="cb72-37">focus_green_urban_surface_naz_df.sort_values(by<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'Perc.Diff. | 2018-2000'</span>], ascending<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb72-38">focus_green_urban_surface_naz_df</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="64">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>pro_com</th>
      <th>comune</th>
      <th>provincia</th>
      <th>regione</th>
      <th>sup_com_ha</th>
      <th>perc_1990</th>
      <th>perc_2000</th>
      <th>perc_2006</th>
      <th>perc_2012</th>
      <th>perc_2018</th>
      <th>Perc.Diff. | 2018-2000</th>
      <th>surface_ha_2018</th>
      <th>surface_ha_2012</th>
      <th>surface_ha_2006</th>
      <th>surface_ha_2000</th>
      <th>surface_ha_1990</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>19</th>
      <td>15032.0</td>
      <td>Bresso</td>
      <td>Milano</td>
      <td>Lombardia</td>
      <td>338.236565</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>10.09</td>
      <td>19.93</td>
      <td>19.93</td>
      <td>19.93</td>
      <td>67.4045</td>
      <td>67.4045</td>
      <td>34.1411</td>
      <td>0.0000</td>
      <td>0.0000</td>
    </tr>
    <tr>
      <th>127</th>
      <td>108046.0</td>
      <td>Vedano al Lambro</td>
      <td>Monza e della Brianza</td>
      <td>Lombardia</td>
      <td>197.928997</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>19.70</td>
      <td>19.70</td>
      <td>19.70</td>
      <td>19.70</td>
      <td>38.9824</td>
      <td>38.9824</td>
      <td>38.9825</td>
      <td>0.0000</td>
      <td>0.0000</td>
    </tr>
    <tr>
      <th>125</th>
      <td>108033.0</td>
      <td>Monza</td>
      <td>Monza e della Brianza</td>
      <td>Lombardia</td>
      <td>3308.665453</td>
      <td>1.07</td>
      <td>1.07</td>
      <td>13.58</td>
      <td>13.58</td>
      <td>13.58</td>
      <td>12.51</td>
      <td>449.4274</td>
      <td>449.4274</td>
      <td>449.4274</td>
      <td>35.4254</td>
      <td>35.4254</td>
    </tr>
    <tr>
      <th>95</th>
      <td>62062.0</td>
      <td>San Lorenzo Maggiore</td>
      <td>Benevento</td>
      <td>Campania</td>
      <td>1629.550368</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>11.89</td>
      <td>11.89</td>
      <td>193.6792</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
    </tr>
    <tr>
      <th>20</th>
      <td>15077.0</td>
      <td>Cinisello Balsamo</td>
      <td>Milano</td>
      <td>Lombardia</td>
      <td>1272.408112</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>9.68</td>
      <td>9.68</td>
      <td>9.68</td>
      <td>123.1662</td>
      <td>123.1662</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1090.0</td>
      <td>Collegno</td>
      <td>Torino</td>
      <td>Piemonte</td>
      <td>1809.931733</td>
      <td>3.36</td>
      <td>3.22</td>
      <td>3.48</td>
      <td>2.76</td>
      <td>2.76</td>
      <td>-0.46</td>
      <td>50.0311</td>
      <td>50.0311</td>
      <td>62.9144</td>
      <td>58.3309</td>
      <td>60.8457</td>
    </tr>
    <tr>
      <th>50</th>
      <td>30027.0</td>
      <td>Codroipo</td>
      <td>Udine</td>
      <td>Friuli Venezia Giulia</td>
      <td>7520.098015</td>
      <td>1.09</td>
      <td>1.09</td>
      <td>0.40</td>
      <td>0.40</td>
      <td>0.40</td>
      <td>-0.69</td>
      <td>30.4123</td>
      <td>30.4123</td>
      <td>30.4123</td>
      <td>81.8193</td>
      <td>81.8197</td>
    </tr>
    <tr>
      <th>126</th>
      <td>108040.0</td>
      <td>Seveso</td>
      <td>Monza e della Brianza</td>
      <td>Lombardia</td>
      <td>740.240733</td>
      <td>0.00</td>
      <td>8.95</td>
      <td>8.23</td>
      <td>8.23</td>
      <td>8.23</td>
      <td>-0.72</td>
      <td>60.8857</td>
      <td>60.8857</td>
      <td>60.8857</td>
      <td>66.2372</td>
      <td>0.0000</td>
    </tr>
    <tr>
      <th>82</th>
      <td>48017.0</td>
      <td>Firenze</td>
      <td>Firenze</td>
      <td>Toscana</td>
      <td>10231.561540</td>
      <td>3.25</td>
      <td>3.09</td>
      <td>2.44</td>
      <td>2.14</td>
      <td>2.14</td>
      <td>-0.95</td>
      <td>218.9329</td>
      <td>218.9329</td>
      <td>249.9431</td>
      <td>315.8389</td>
      <td>332.8009</td>
    </tr>
    <tr>
      <th>70</th>
      <td>42002.0</td>
      <td>Ancona</td>
      <td>Ancona</td>
      <td>Marche</td>
      <td>12486.826920</td>
      <td>1.71</td>
      <td>1.70</td>
      <td>0.74</td>
      <td>0.74</td>
      <td>0.74</td>
      <td>-0.96</td>
      <td>92.4984</td>
      <td>92.4984</td>
      <td>92.1039</td>
      <td>211.9722</td>
      <td>213.0332</td>
    </tr>
  </tbody>
</table>
<p>130 rows × 16 columns</p>
</div>
</div>
</div>
</section>
</section>
</section>
<section id="conclusione" class="level1">
<h1>Conclusione</h1>
<p>Sembra abbastanza chiaro che in Italia negli ultimi trenta anni circa si sia preferito sacrificare il paesaggio agricolo e forestale in favore di quello urbano. Si parla molto di <a href="https://www.epa.gov/green-infrastructure/reduce-urban-heat-island-effect#:~:text=%22Urban%20heat%20islands%22%20occur%20when,heat%2Drelated%20illness%20and%20mortality.">Urban Heat Island</a> e della <a href="https://www.sciencedirect.com/science/article/pii/S2210670721008301">riduzione di questi fenomeni</a> tipici delle aree urbane. Magari, se si fosse riammodernato il costruito negli ultimi trenta anni al posto di edificare in nuovi luoghi, il fenomeno delle isole urbane di calore ci avrebbe colpito in maniera molto minore di quanto non ci colpisca adesso(e nei prossimi anni!). Avremmo così preservato il nostro patrimonio boschivo ed agricolo rendendo il <em>Bel Paese</em> ancora più bello.</p>
<p>Hai commenti, indicazioni o soluzioni alternative in Python? Scrivi nella sezione <a href="https://github.com/MaxDragonheart/PyGIS-Blog/discussions/24">Discussioni</a>.</p>
<section id="newsletter" class="level2">
<h2 class="anchored" data-anchor-id="newsletter">Newsletter</h2>
<p>Se vuoi ricevere aggiornamenti sui prossimi articoli <a href="https://massimilianomoraca.it/newsletter/">iscriviti alla newsletter</a>!</p>
</section>
<section id="telegram" class="level2">
<h2 class="anchored" data-anchor-id="telegram">Telegram</h2>
<p>Segui il canale Telegram <strong><a href="https://t.me/caffegis">CaffèGIS - I GIS a supporto dei processi evolutivi territoriali</a></strong> per ricevere aggiornamenti su iniziative ed informazioni a tema GIS.</p>
</section>
<section id="offrimi-una-birra" class="level2">
<h2 class="anchored" data-anchor-id="offrimi-una-birra">Offrimi una birra!</h2>
<p><strong>Se trovi interessanti i miei articoli <a href="https://www.paypal.com/paypalme/MassimilianoMoraca">offrimi una birra</a>!</strong></p>
<p>Alla prossima!</p>


</section>
</section>

 ]]></description>
  <category>vector</category>
  <category>geoprocessing</category>
  <guid>https://pygisblog.massimilianomoraca.me/posts/2022-08-26/analisi-della-copertura-del-suolo-in-italia.html</guid>
  <pubDate>Thu, 25 Aug 2022 22:00:00 GMT</pubDate>
  <media:content url="https://pygisblog.massimilianomoraca.me/project_logo.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Verificare il potenziale fotovoltaico di un tetto</title>
  <link>https://pygisblog.massimilianomoraca.me/posts/2022-05-22/verificare-il-potenziale-fotovoltaico-di-un-tetto.html</link>
  <description><![CDATA[ 




<p>Un po’ di tempo fa ho effettuato un’analisi finalizzata a stimare il <a href="https://massimilianomoraca.it/blog/gis/fotovoltaico-e-gis-come-individuare-lutilizzabilita-di-un-tetto/">potenziale fotovoltaico</a> di un tetto usando QGIS. Con questo articolo voglio ripercorrere lo stesso flusso di lavoro usando però Python!</p>
<section id="prima-di-iniziare" class="level2">
<h2 class="anchored" data-anchor-id="prima-di-iniziare">Prima di iniziare</h2>
<section id="librerie" class="level3">
<h3 class="anchored" data-anchor-id="librerie">Librerie</h3>
<p>Per raggiungere l’obiettivo userò le librerie che seguono:</p>
<div class="cell" data-execution_count="1">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> pathlib</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> geopandas <span class="im" style="color: #00769E;">as</span> gpd</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> rioxarray <span class="im" style="color: #00769E;">as</span> rxr</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> contextily <span class="im" style="color: #00769E;">as</span> cx</span>
<span id="cb1-5"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-6"><span class="im" style="color: #00769E;">from</span> xrspatial.aspect <span class="im" style="color: #00769E;">import</span> aspect</span>
<span id="cb1-7"><span class="im" style="color: #00769E;">from</span> xrspatial.slope <span class="im" style="color: #00769E;">import</span> slope</span></code></pre></div>
</details>
</div>
</section>
<section id="fonti-dati" class="level3">
<h3 class="anchored" data-anchor-id="fonti-dati">Fonti dati</h3>
<div class="cell" data-execution_count="2">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">sample_data <span class="op" style="color: #5E5E5E;">=</span> pathlib.Path.cwd().parent.joinpath(<span class="st" style="color: #20794D;">'sample_data/photovoltaic_potential_analysis'</span>)</span>
<span id="cb2-2">dsm <span class="op" style="color: #5E5E5E;">=</span> sample_data.joinpath(<span class="st" style="color: #20794D;">'dsm.tif'</span>)</span>
<span id="cb2-3">buildings <span class="op" style="color: #5E5E5E;">=</span> sample_data.joinpath(<span class="st" style="color: #20794D;">'buildings_footprint.shp'</span>)</span></code></pre></div>
</details>
</div>
</section>
</section>
<section id="lettura-dei-dati" class="level1">
<h1>1. Lettura dei dati</h1>
<div class="cell" data-execution_count="3">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">raster <span class="op" style="color: #5E5E5E;">=</span> rxr.open_rasterio(dsm, masked<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>).squeeze()</span>
<span id="cb3-2">raster</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="3">

<div><svg style="position: absolute; width: 0; height: 0; overflow: hidden">
<defs>
<symbol id="icon-database" viewbox="0 0 32 32">
<path d="M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z"></path>
<path d="M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
<path d="M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
</symbol>
<symbol id="icon-file-text2" viewbox="0 0 32 32">
<path d="M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z"></path>
<path d="M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
<path d="M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
<path d="M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
</symbol>
</defs>
</svg>
<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.
 *
 */

:root {
  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));
  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));
  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));
  --xr-border-color: var(--jp-border-color2, #e0e0e0);
  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);
  --xr-background-color: var(--jp-layout-color0, white);
  --xr-background-color-row-even: var(--jp-layout-color1, white);
  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);
}

html[theme=dark],
body[data-theme=dark],
body.vscode-dark {
  --xr-font-color0: rgba(255, 255, 255, 1);
  --xr-font-color2: rgba(255, 255, 255, 0.54);
  --xr-font-color3: rgba(255, 255, 255, 0.38);
  --xr-border-color: #1F1F1F;
  --xr-disabled-color: #515151;
  --xr-background-color: #111111;
  --xr-background-color-row-even: #111111;
  --xr-background-color-row-odd: #313131;
}

.xr-wrap {
  display: block !important;
  min-width: 300px;
  max-width: 700px;
}

.xr-text-repr-fallback {
  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */
  display: none;
}

.xr-header {
  padding-top: 6px;
  padding-bottom: 6px;
  margin-bottom: 4px;
  border-bottom: solid 1px var(--xr-border-color);
}

.xr-header > div,
.xr-header > ul {
  display: inline;
  margin-top: 0;
  margin-bottom: 0;
}

.xr-obj-type,
.xr-array-name {
  margin-left: 2px;
  margin-right: 10px;
}

.xr-obj-type {
  color: var(--xr-font-color2);
}

.xr-sections {
  padding-left: 0 !important;
  display: grid;
  grid-template-columns: 150px auto auto 1fr 20px 20px;
}

.xr-section-item {
  display: contents;
}

.xr-section-item input {
  display: none;
}

.xr-section-item input + label {
  color: var(--xr-disabled-color);
}

.xr-section-item input:enabled + label {
  cursor: pointer;
  color: var(--xr-font-color2);
}

.xr-section-item input:enabled + label:hover {
  color: var(--xr-font-color0);
}

.xr-section-summary {
  grid-column: 1;
  color: var(--xr-font-color2);
  font-weight: 500;
}

.xr-section-summary > span {
  display: inline-block;
  padding-left: 0.5em;
}

.xr-section-summary-in:disabled + label {
  color: var(--xr-font-color2);
}

.xr-section-summary-in + label:before {
  display: inline-block;
  content: '►';
  font-size: 11px;
  width: 15px;
  text-align: center;
}

.xr-section-summary-in:disabled + label:before {
  color: var(--xr-disabled-color);
}

.xr-section-summary-in:checked + label:before {
  content: '▼';
}

.xr-section-summary-in:checked + label > span {
  display: none;
}

.xr-section-summary,
.xr-section-inline-details {
  padding-top: 4px;
  padding-bottom: 4px;
}

.xr-section-inline-details {
  grid-column: 2 / -1;
}

.xr-section-details {
  display: none;
  grid-column: 1 / -1;
  margin-bottom: 5px;
}

.xr-section-summary-in:checked ~ .xr-section-details {
  display: contents;
}

.xr-array-wrap {
  grid-column: 1 / -1;
  display: grid;
  grid-template-columns: 20px auto;
}

.xr-array-wrap > label {
  grid-column: 1;
  vertical-align: top;
}

.xr-preview {
  color: var(--xr-font-color3);
}

.xr-array-preview,
.xr-array-data {
  padding: 0 5px !important;
  grid-column: 2;
}

.xr-array-data,
.xr-array-in:checked ~ .xr-array-preview {
  display: none;
}

.xr-array-in:checked ~ .xr-array-data,
.xr-array-preview {
  display: inline-block;
}

.xr-dim-list {
  display: inline-block !important;
  list-style: none;
  padding: 0 !important;
  margin: 0;
}

.xr-dim-list li {
  display: inline-block;
  padding: 0;
  margin: 0;
}

.xr-dim-list:before {
  content: '(';
}

.xr-dim-list:after {
  content: ')';
}

.xr-dim-list li:not(:last-child):after {
  content: ',';
  padding-right: 5px;
}

.xr-has-index {
  font-weight: bold;
}

.xr-var-list,
.xr-var-item {
  display: contents;
}

.xr-var-item > div,
.xr-var-item label,
.xr-var-item > .xr-var-name span {
  background-color: var(--xr-background-color-row-even);
  margin-bottom: 0;
}

.xr-var-item > .xr-var-name:hover span {
  padding-right: 5px;
}

.xr-var-list > li:nth-child(odd) > div,
.xr-var-list > li:nth-child(odd) > label,
.xr-var-list > li:nth-child(odd) > .xr-var-name span {
  background-color: var(--xr-background-color-row-odd);
}

.xr-var-name {
  grid-column: 1;
}

.xr-var-dims {
  grid-column: 2;
}

.xr-var-dtype {
  grid-column: 3;
  text-align: right;
  color: var(--xr-font-color2);
}

.xr-var-preview {
  grid-column: 4;
}

.xr-var-name,
.xr-var-dims,
.xr-var-dtype,
.xr-preview,
.xr-attrs dt {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  padding-right: 10px;
}

.xr-var-name:hover,
.xr-var-dims:hover,
.xr-var-dtype:hover,
.xr-attrs dt:hover {
  overflow: visible;
  width: auto;
  z-index: 1;
}

.xr-var-attrs,
.xr-var-data {
  display: none;
  background-color: var(--xr-background-color) !important;
  padding-bottom: 5px !important;
}

.xr-var-attrs-in:checked ~ .xr-var-attrs,
.xr-var-data-in:checked ~ .xr-var-data {
  display: block;
}

.xr-var-data > table {
  float: right;
}

.xr-var-name span,
.xr-var-data,
.xr-attrs {
  padding-left: 25px !important;
}

.xr-attrs,
.xr-var-attrs,
.xr-var-data {
  grid-column: 1 / -1;
}

dl.xr-attrs {
  padding: 0;
  margin: 0;
  display: grid;
  grid-template-columns: 125px auto;
}

.xr-attrs dt,
.xr-attrs dd {
  padding: 0;
  margin: 0;
  float: left;
  padding-right: 10px;
  width: auto;
}

.xr-attrs dt {
  font-weight: normal;
  grid-column: 1;
}

.xr-attrs dt:hover span {
  display: inline-block;
  background: var(--xr-background-color);
  padding-right: 10px;
}

.xr-attrs dd {
  grid-column: 2;
  white-space: pre-wrap;
  word-break: break-all;
}

.xr-icon-database,
.xr-icon-file-text2 {
  display: inline-block;
  vertical-align: middle;
  width: 1em;
  height: 1.5em !important;
  stroke-width: 0;
  stroke: currentColor;
  fill: currentColor;
}
</style><pre class="xr-text-repr-fallback">&lt;xarray.DataArray (y: 500, x: 500)&gt;
[250000 values with dtype=float32]
Coordinates:
    band         int64 1
  * x            (x) float64 4.445e+05 4.445e+05 4.445e+05 ... 4.45e+05 4.45e+05
  * y            (y) float64 4.529e+06 4.529e+06 ... 4.529e+06 4.529e+06
    spatial_ref  int64 0
Attributes:
    scale_factor:  1.0
    add_offset:    0.0</pre><div class="xr-wrap" style="display:none"><div class="xr-header"><div class="xr-obj-type">xarray.DataArray</div><div class="xr-array-name"></div><ul class="xr-dim-list"><li><span class="xr-has-index">y</span>: 500</li><li><span class="xr-has-index">x</span>: 500</li></ul></div><ul class="xr-sections"><li class="xr-section-item"><div class="xr-array-wrap"><input id="section-2c81b2fc-05f8-4d25-b614-d738f3775551" class="xr-array-in" type="checkbox" checked=""><label for="section-2c81b2fc-05f8-4d25-b614-d738f3775551" title="Show/hide data repr"><svg class="icon xr-icon-database"><use href="#icon-database"></use></svg></label><div class="xr-array-preview xr-preview"><span>...</span></div><div class="xr-array-data"><pre>[250000 values with dtype=float32]</pre></div></div></li><li class="xr-section-item"><input id="section-c57ea8f2-104e-466f-b22d-6ac03dd7ce64" class="xr-section-summary-in" type="checkbox" checked=""><label for="section-c57ea8f2-104e-466f-b22d-6ac03dd7ce64" class="xr-section-summary">Coordinates: <span>(4)</span></label><div class="xr-section-inline-details"></div><div class="xr-section-details"><ul class="xr-var-list"><li class="xr-var-item"><div class="xr-var-name"><span>band</span></div><div class="xr-var-dims">()</div><div class="xr-var-dtype">int64</div><div class="xr-var-preview xr-preview">1</div><input id="attrs-6b15e360-7885-49a4-821a-f3df8402ca82" class="xr-var-attrs-in" type="checkbox" disabled=""><label for="attrs-6b15e360-7885-49a4-821a-f3df8402ca82" title="Show/Hide attributes"><svg class="icon xr-icon-file-text2"><use href="#icon-file-text2"></use></svg></label><input id="data-5bdc8114-ff26-4cd4-a4be-fcc7f6305f36" class="xr-var-data-in" type="checkbox"><label for="data-5bdc8114-ff26-4cd4-a4be-fcc7f6305f36" title="Show/Hide data repr"><svg class="icon xr-icon-database"><use href="#icon-database"></use></svg></label><div class="xr-var-attrs"><dl class="xr-attrs"></dl></div><div class="xr-var-data"><pre>array(1)</pre></div></li><li class="xr-var-item"><div class="xr-var-name"><span class="xr-has-index">x</span></div><div class="xr-var-dims">(x)</div><div class="xr-var-dtype">float64</div><div class="xr-var-preview xr-preview">4.445e+05 4.445e+05 ... 4.45e+05</div><input id="attrs-cfaacc14-8109-4815-b0db-94ab6210e73a" class="xr-var-attrs-in" type="checkbox" disabled=""><label for="attrs-cfaacc14-8109-4815-b0db-94ab6210e73a" title="Show/Hide attributes"><svg class="icon xr-icon-file-text2"><use href="#icon-file-text2"></use></svg></label><input id="data-1b19f403-7ec5-4c5d-8f59-29e0d4142707" class="xr-var-data-in" type="checkbox"><label for="data-1b19f403-7ec5-4c5d-8f59-29e0d4142707" title="Show/Hide data repr"><svg class="icon xr-icon-database"><use href="#icon-database"></use></svg></label><div class="xr-var-attrs"><dl class="xr-attrs"></dl></div><div class="xr-var-data"><pre>array([444495.808, 444496.808, 444497.808, ..., 444992.808, 444993.808,
       444994.808])</pre></div></li><li class="xr-var-item"><div class="xr-var-name"><span class="xr-has-index">y</span></div><div class="xr-var-dims">(y)</div><div class="xr-var-dtype">float64</div><div class="xr-var-preview xr-preview">4.529e+06 4.529e+06 ... 4.529e+06</div><input id="attrs-6f6e1fa7-075b-4974-be29-caa301f67c4c" class="xr-var-attrs-in" type="checkbox" disabled=""><label for="attrs-6f6e1fa7-075b-4974-be29-caa301f67c4c" title="Show/Hide attributes"><svg class="icon xr-icon-file-text2"><use href="#icon-file-text2"></use></svg></label><input id="data-cf34748f-9393-46a0-998c-d6fd5fdafda8" class="xr-var-data-in" type="checkbox"><label for="data-cf34748f-9393-46a0-998c-d6fd5fdafda8" title="Show/Hide data repr"><svg class="icon xr-icon-database"><use href="#icon-database"></use></svg></label><div class="xr-var-attrs"><dl class="xr-attrs"></dl></div><div class="xr-var-data"><pre>array([4529407.911, 4529406.911, 4529405.911, ..., 4528910.911, 4528909.911,
       4528908.911])</pre></div></li><li class="xr-var-item"><div class="xr-var-name"><span>spatial_ref</span></div><div class="xr-var-dims">()</div><div class="xr-var-dtype">int64</div><div class="xr-var-preview xr-preview">0</div><input id="attrs-cfa31464-7f51-43ea-ac8d-f386498b23e0" class="xr-var-attrs-in" type="checkbox"><label for="attrs-cfa31464-7f51-43ea-ac8d-f386498b23e0" title="Show/Hide attributes"><svg class="icon xr-icon-file-text2"><use href="#icon-file-text2"></use></svg></label><input id="data-bc7ddbab-a126-4c2c-a91a-ddf275976b37" class="xr-var-data-in" type="checkbox"><label for="data-bc7ddbab-a126-4c2c-a91a-ddf275976b37" title="Show/Hide data repr"><svg class="icon xr-icon-database"><use href="#icon-database"></use></svg></label><div class="xr-var-attrs"><dl class="xr-attrs"><dt><span>crs_wkt :</span></dt><dd>PROJCS["WGS 84 / UTM zone 33N",GEOGCS["WGS 84",DATUM["WGS_1984",SPHEROID["WGS 84",6378137,298.257223563,AUTHORITY["EPSG","7030"]],AUTHORITY["EPSG","6326"]],PRIMEM["Greenwich",0,AUTHORITY["EPSG","8901"]],UNIT["degree",0.0174532925199433,AUTHORITY["EPSG","9122"]],AUTHORITY["EPSG","4326"]],PROJECTION["Transverse_Mercator"],PARAMETER["latitude_of_origin",0],PARAMETER["central_meridian",15],PARAMETER["scale_factor",0.9996],PARAMETER["false_easting",500000],PARAMETER["false_northing",0],UNIT["metre",1,AUTHORITY["EPSG","9001"]],AXIS["Easting",EAST],AXIS["Northing",NORTH],AUTHORITY["EPSG","32633"]]</dd><dt><span>semi_major_axis :</span></dt><dd>6378137.0</dd><dt><span>semi_minor_axis :</span></dt><dd>6356752.314245179</dd><dt><span>inverse_flattening :</span></dt><dd>298.257223563</dd><dt><span>reference_ellipsoid_name :</span></dt><dd>WGS 84</dd><dt><span>longitude_of_prime_meridian :</span></dt><dd>0.0</dd><dt><span>prime_meridian_name :</span></dt><dd>Greenwich</dd><dt><span>geographic_crs_name :</span></dt><dd>WGS 84</dd><dt><span>horizontal_datum_name :</span></dt><dd>World Geodetic System 1984</dd><dt><span>projected_crs_name :</span></dt><dd>WGS 84 / UTM zone 33N</dd><dt><span>grid_mapping_name :</span></dt><dd>transverse_mercator</dd><dt><span>latitude_of_projection_origin :</span></dt><dd>0.0</dd><dt><span>longitude_of_central_meridian :</span></dt><dd>15.0</dd><dt><span>false_easting :</span></dt><dd>500000.0</dd><dt><span>false_northing :</span></dt><dd>0.0</dd><dt><span>scale_factor_at_central_meridian :</span></dt><dd>0.9996</dd><dt><span>spatial_ref :</span></dt><dd>PROJCS["WGS 84 / UTM zone 33N",GEOGCS["WGS 84",DATUM["WGS_1984",SPHEROID["WGS 84",6378137,298.257223563,AUTHORITY["EPSG","7030"]],AUTHORITY["EPSG","6326"]],PRIMEM["Greenwich",0,AUTHORITY["EPSG","8901"]],UNIT["degree",0.0174532925199433,AUTHORITY["EPSG","9122"]],AUTHORITY["EPSG","4326"]],PROJECTION["Transverse_Mercator"],PARAMETER["latitude_of_origin",0],PARAMETER["central_meridian",15],PARAMETER["scale_factor",0.9996],PARAMETER["false_easting",500000],PARAMETER["false_northing",0],UNIT["metre",1,AUTHORITY["EPSG","9001"]],AXIS["Easting",EAST],AXIS["Northing",NORTH],AUTHORITY["EPSG","32633"]]</dd><dt><span>GeoTransform :</span></dt><dd>444495.308 1.0 0.0 4529408.411 0.0 -1.0</dd></dl></div><div class="xr-var-data"><pre>array(0)</pre></div></li></ul></div></li><li class="xr-section-item"><input id="section-d6646e20-2a33-4f0b-a165-fc8afe03619b" class="xr-section-summary-in" type="checkbox" checked=""><label for="section-d6646e20-2a33-4f0b-a165-fc8afe03619b" class="xr-section-summary">Attributes: <span>(2)</span></label><div class="xr-section-inline-details"></div><div class="xr-section-details"><dl class="xr-attrs"><dt><span>scale_factor :</span></dt><dd>1.0</dd><dt><span>add_offset :</span></dt><dd>0.0</dd></dl></div></li></ul></div></div>
</div>
</div>
<div class="cell" data-execution_count="4">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">vector <span class="op" style="color: #5E5E5E;">=</span> gpd.read_file(buildings)</span>
<span id="cb4-2">vector</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="4">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>id</th>
      <th>layer</th>
      <th>tipoedific</th>
      <th>uso</th>
      <th>sup_m2</th>
      <th>altezza</th>
      <th>altez_dsm</th>
      <th>geometry</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0</td>
      <td>0201N-Edificio Generico Nuovo</td>
      <td>Edificio generico</td>
      <td>Abitazione</td>
      <td>54</td>
      <td>4.67</td>
      <td>36.77</td>
      <td>POLYGON ((444654.507 4529354.495, 444651.839 4...</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>0201N-Edificio Generico Nuovo</td>
      <td>Edificio generico</td>
      <td>Abitazione</td>
      <td>49</td>
      <td>7.60</td>
      <td>40.79</td>
      <td>POLYGON ((444639.838 4529162.951, 444638.794 4...</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2</td>
      <td>0208N-Baracca Nuovo</td>
      <td>Baracca</td>
      <td>Altro</td>
      <td>23</td>
      <td>3.30</td>
      <td>38.11</td>
      <td>POLYGON ((444726.330 4529069.704, 444730.929 4...</td>
    </tr>
    <tr>
      <th>3</th>
      <td>3</td>
      <td>0208I-Baracca Invariato</td>
      <td>Baracca</td>
      <td>Altro</td>
      <td>22</td>
      <td>3.19</td>
      <td>37.95</td>
      <td>POLYGON ((444523.992 4529241.197, 444523.992 4...</td>
    </tr>
    <tr>
      <th>4</th>
      <td>4</td>
      <td>0208I-Baracca Invariato</td>
      <td>Baracca</td>
      <td>Altro</td>
      <td>55</td>
      <td>3.96</td>
      <td>38.68</td>
      <td>POLYGON ((444518.076 4529233.077, 444518.192 4...</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>312</th>
      <td>312</td>
      <td>0201I-Edificio Generico Invariato</td>
      <td>Edificio generico</td>
      <td>Abitazione</td>
      <td>187</td>
      <td>10.57</td>
      <td>42.86</td>
      <td>POLYGON ((444676.418 4529355.727, 444676.008 4...</td>
    </tr>
    <tr>
      <th>313</th>
      <td>313</td>
      <td>0201M-Edificio Generico Modificato</td>
      <td>Edificio generico</td>
      <td>Abitazione</td>
      <td>323</td>
      <td>7.41</td>
      <td>42.35</td>
      <td>POLYGON ((444545.683 4529221.436, 444524.605 4...</td>
    </tr>
    <tr>
      <th>314</th>
      <td>314</td>
      <td>0201I-Edificio Generico Invariato</td>
      <td>Edificio generico</td>
      <td>Abitazione</td>
      <td>370</td>
      <td>2.88</td>
      <td>35.15</td>
      <td>POLYGON ((444723.780 4529165.567, 444719.890 4...</td>
    </tr>
    <tr>
      <th>315</th>
      <td>315</td>
      <td>0201M-Edificio Generico Modificato</td>
      <td>Edificio generico</td>
      <td>Abitazione</td>
      <td>2389</td>
      <td>11.78</td>
      <td>45.07</td>
      <td>POLYGON ((444848.335 4529111.537, 444850.324 4...</td>
    </tr>
    <tr>
      <th>316</th>
      <td>316</td>
      <td>0201M-Edificio Generico Modificato</td>
      <td>Edificio generico</td>
      <td>Abitazione</td>
      <td>2389</td>
      <td>11.78</td>
      <td>45.07</td>
      <td>POLYGON ((444860.572 4529113.825, 444863.015 4...</td>
    </tr>
  </tbody>
</table>
<p>317 rows × 8 columns</p>
</div>
</div>
</div>
<section id="visualizzazione-dei-dati-grezzi" class="level2">
<h2 class="anchored" data-anchor-id="visualizzazione-dei-dati-grezzi">1.1 Visualizzazione dei dati grezzi</h2>
<div class="cell" data-execution_count="5">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>))</span>
<span id="cb5-2">raster.plot.imshow(</span>
<span id="cb5-3">    cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Blues'</span>,</span>
<span id="cb5-4">)</span>
<span id="cb5-5">plt.title(<span class="st" style="color: #20794D;">"DSM"</span>)</span>
<span id="cb5-6">plt.ylabel(<span class="st" style="color: #20794D;">"Y coordinates (meters)"</span>)</span>
<span id="cb5-7">plt.xlabel(<span class="st" style="color: #20794D;">"X coordinates (meters)"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>Text(0.5, 0, 'X coordinates (meters)')</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://pygisblog.massimilianomoraca.me/posts/2022-05-22/verificare-il-potenziale-fotovoltaico-di-un-tetto_files/figure-html/cell-6-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="6">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">aoi <span class="op" style="color: #5E5E5E;">=</span> vector.plot(alpha<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.75</span>, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"blue"</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>))</span>
<span id="cb7-2">cx.add_basemap(aoi, crs<span class="op" style="color: #5E5E5E;">=</span>vector.crs.to_string(), source<span class="op" style="color: #5E5E5E;">=</span>cx.providers.OpenStreetMap.Mapnik)</span>
<span id="cb7-3">aoi.set_title(<span class="st" style="color: #20794D;">"Area of Interest"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>Text(0.5, 1.0, 'Area of Interest')</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://pygisblog.massimilianomoraca.me/posts/2022-05-22/verificare-il-potenziale-fotovoltaico-di-un-tetto_files/figure-html/cell-7-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
</section>
<section id="analisi-dellinclinazione-dei-tetti" class="level1">
<h1>2. Analisi dell’inclinazione dei tetti</h1>
<p>Come primo passo in questa analisi estrarrò dal DSM i soli edifici.</p>
<div class="cell" data-execution_count="7">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">raster_clipped <span class="op" style="color: #5E5E5E;">=</span> raster.rio.clip(</span>
<span id="cb9-2">    geometries<span class="op" style="color: #5E5E5E;">=</span>vector.geometry, crs<span class="op" style="color: #5E5E5E;">=</span>raster.rio.crs, all_touched<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, drop<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span></span>
<span id="cb9-3">).squeeze()</span>
<span id="cb9-4"></span>
<span id="cb9-5">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>))</span>
<span id="cb9-6"></span>
<span id="cb9-7">raster_clipped.plot.imshow(</span>
<span id="cb9-8">    cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Blues'</span>,</span>
<span id="cb9-9">)</span>
<span id="cb9-10">plt.title(<span class="st" style="color: #20794D;">"DEM of buildings footprint"</span>)</span>
<span id="cb9-11">plt.ylabel(<span class="st" style="color: #20794D;">"Y coordinates (meters)"</span>)</span>
<span id="cb9-12">plt.xlabel(<span class="st" style="color: #20794D;">"X coordinates (meters)"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>Text(0.5, 0, 'X coordinates (meters)')</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://pygisblog.massimilianomoraca.me/posts/2022-05-22/verificare-il-potenziale-fotovoltaico-di-un-tetto_files/figure-html/cell-8-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>A questo punto posso concentrarmi solo sui tetti calcolando la loro pendenza.</p>
<div class="cell" data-execution_count="8">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">rooftop_slope <span class="op" style="color: #5E5E5E;">=</span> slope(raster_clipped)</span>
<span id="cb11-2"></span>
<span id="cb11-3">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>))</span>
<span id="cb11-4">colormap <span class="op" style="color: #5E5E5E;">=</span> plt.cm.get_cmap(<span class="st" style="color: #20794D;">'RdYlGn'</span>)</span>
<span id="cb11-5"></span>
<span id="cb11-6">rooftop_slope.plot.imshow(</span>
<span id="cb11-7">    cmap<span class="op" style="color: #5E5E5E;">=</span>colormap.<span class="bu" style="color: null;">reversed</span>(),</span>
<span id="cb11-8">)</span>
<span id="cb11-9">plt.title(<span class="st" style="color: #20794D;">"Rooftop's slope"</span>)</span>
<span id="cb11-10">plt.ylabel(<span class="st" style="color: #20794D;">"Y coordinates (meters)"</span>)</span>
<span id="cb11-11">plt.xlabel(<span class="st" style="color: #20794D;">"X coordinates (meters)"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>Text(0.5, 0, 'X coordinates (meters)')</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://pygisblog.massimilianomoraca.me/posts/2022-05-22/verificare-il-potenziale-fotovoltaico-di-un-tetto_files/figure-html/cell-9-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>Le pendenze fanno riferimento al piano cartografico. Quindi 0° fa riferimento ad un tetto piano, con 85.8° di pendenza abbiamo un tetto quasi verticale e quindi ortogonale al piano cartografico.</p>
<p>La resa di un pannello fotovoltaico varia in base all’inclinazione rispetto ai raggi solari. Alle latitudini italiane la resa ottimale in fase di produzione di energia si ha quando i pannelli sono installati con una pendenza che varia tra i 30° ed i 40°. La pendenza ottimale è direttamente proporzionale alla <a href="https://it.wikipedia.org/wiki/Latitudine">latitudine</a>; più ci allontaniamo dall’equatore, più essa aumenta. Quindi nel sud Italia la pendenza ottimale si aggira intorno ai 30° mentre nel nord è intorno ai 40°. Non mi interessa entrare troppo nel dettaglio tecnico legato all’installazione di un impianto fotovoltaico ma dare una stima, una indicazione di produzione energetica, ma il passaggio sull’inclinazione è importante perchè con queste informazioni andrò ad effettuare le analisi successive suddividendo le pendenze dei tetti in tre classi: - 0 - 3° - 3° - 40° - 40° - 90°</p>
<p>Questa suddivisione mi consentirà di individuare sia i tetti piani(quelli che rientrano nella prima classe) che i tetti con la giusta inclinazione per una installazione in pendenza ottimale dell’impianto, consentendomi di escludere quelli con pendenze non ottimali(terza ed ultima classe).</p>
<p>Qui magari, con questa esclusione, storce il naso un installatore di impianti fotovoltaici perchè ci sono soluzioni tecniche che consentono di ovviare il problema della pendenza eccessiva del tetto. Conosco questi aspetti ma a me interessa dare una visione di metodologia di analisi con questo articolo.</p>
<section id="tetti-piani" class="level2">
<h2 class="anchored" data-anchor-id="tetti-piani">2.1 Tetti piani</h2>
<div class="cell" data-execution_count="9">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">plane_rooftop <span class="op" style="color: #5E5E5E;">=</span> rooftop_slope.where(rooftop_slope <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb13-2"></span>
<span id="cb13-3">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>))</span>
<span id="cb13-4">colormap <span class="op" style="color: #5E5E5E;">=</span> plt.cm.get_cmap(<span class="st" style="color: #20794D;">'RdYlGn'</span>)</span>
<span id="cb13-5"></span>
<span id="cb13-6">plane_rooftop.plot.imshow(</span>
<span id="cb13-7">    cmap<span class="op" style="color: #5E5E5E;">=</span>colormap.<span class="bu" style="color: null;">reversed</span>(),</span>
<span id="cb13-8">)</span>
<span id="cb13-9">plt.title(<span class="st" style="color: #20794D;">"Plane rooftops"</span>)</span>
<span id="cb13-10">plt.ylabel(<span class="st" style="color: #20794D;">"Y coordinates (meters)"</span>)</span>
<span id="cb13-11">plt.xlabel(<span class="st" style="color: #20794D;">"X coordinates (meters)"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>Text(0.5, 0, 'X coordinates (meters)')</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://pygisblog.massimilianomoraca.me/posts/2022-05-22/verificare-il-potenziale-fotovoltaico-di-un-tetto_files/figure-html/cell-10-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="tetti-con-inclinazione-ottimale" class="level2">
<h2 class="anchored" data-anchor-id="tetti-con-inclinazione-ottimale">2.2 Tetti con inclinazione ottimale</h2>
<div class="cell" data-execution_count="10">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">optimum_rooftop_inclination <span class="op" style="color: #5E5E5E;">=</span> rooftop_slope.where((rooftop_slope <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">3</span>) <span class="op" style="color: #5E5E5E;">&amp;</span> (rooftop_slope <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="dv" style="color: #AD0000;">40</span>))</span>
<span id="cb15-2"></span>
<span id="cb15-3">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>))</span>
<span id="cb15-4">colormap <span class="op" style="color: #5E5E5E;">=</span> plt.cm.get_cmap(<span class="st" style="color: #20794D;">'RdYlGn'</span>)</span>
<span id="cb15-5"></span>
<span id="cb15-6">optimum_rooftop_inclination.plot.imshow(</span>
<span id="cb15-7">    cmap<span class="op" style="color: #5E5E5E;">=</span>colormap.<span class="bu" style="color: null;">reversed</span>(),</span>
<span id="cb15-8">)</span>
<span id="cb15-9">plt.title(<span class="st" style="color: #20794D;">"Rooftops with slope between 3° and 40°"</span>)</span>
<span id="cb15-10">plt.ylabel(<span class="st" style="color: #20794D;">"Y coordinates (meters)"</span>)</span>
<span id="cb15-11">plt.xlabel(<span class="st" style="color: #20794D;">"X coordinates (meters)"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>Text(0.5, 0, 'X coordinates (meters)')</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://pygisblog.massimilianomoraca.me/posts/2022-05-22/verificare-il-potenziale-fotovoltaico-di-un-tetto_files/figure-html/cell-11-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
</section>
<section id="analisi-dellorientamento-dei-tetti" class="level1">
<h1>3. Analisi dell’orientamento dei tetti</h1>
<p>Individuate le pendenze del tetto, passiamo a considerare l’aspetto relativo all’esposizione, o orientamento, del tetto.</p>
<p>Per il discorso lagato alla resa migliore in fase di produzione di energia, anche l’orientamento del tetto è un fattore chiave. Per un tetto piano è insignificante parlare di esposizione, concetto che diventa fondamentale per un tetto inclinato. Anche qui ci sono soluzioni tecniche che possono risolvere problemi di esposizione ma, come scritto poco sopra, non è questo il luogo per approfondire questi aspetti.</p>
<div class="cell" data-execution_count="11">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">rooftop_aspect <span class="op" style="color: #5E5E5E;">=</span> aspect(raster_clipped)</span>
<span id="cb17-2"></span>
<span id="cb17-3">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>))</span>
<span id="cb17-4"></span>
<span id="cb17-5">rooftop_aspect.plot.imshow(</span>
<span id="cb17-6">    cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Set2'</span>,</span>
<span id="cb17-7">)</span>
<span id="cb17-8">plt.title(<span class="st" style="color: #20794D;">"Rooftop's aspect"</span>)</span>
<span id="cb17-9">plt.ylabel(<span class="st" style="color: #20794D;">"Y coordinates (meters)"</span>)</span>
<span id="cb17-10">plt.xlabel(<span class="st" style="color: #20794D;">"X coordinates (meters)"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>Text(0.5, 0, 'X coordinates (meters)')</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://pygisblog.massimilianomoraca.me/posts/2022-05-22/verificare-il-potenziale-fotovoltaico-di-un-tetto_files/figure-html/cell-12-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>L’esposizione ottimale è il SUD(<em>tra 135° e 225°</em>), quella sicuramente da scartare è il NORD(<em>tra 0° e 45°, tra 315° e 360°</em>). <img src="https://pygisblog.massimilianomoraca.me/posts/2022-05-22/https:/as1.ftcdn.net/v2/jpg/01/74/27/88/500_F_174278831_b9BzZLu9tZNFKyT72vxL4TQuuEXmc7e4.jpg" title="Rosa dei venti | Immagine concessa con Licenza Standard Adobe" class="img-fluid" alt="Rosa dei venti"></p>
<p>Io andrò ad estrarre solo i tetti con esposizione da <strong>EST</strong> a <strong>SUD-EST</strong>, da <strong>SUD-EST</strong> a <strong>SUD-OVEST</strong> ad <strong>OVEST</strong>, quindi: - 90° - 135° - 135° - 225° - 225° - 270°</p>
<section id="tetti-esposti-a-sud" class="level2">
<h2 class="anchored" data-anchor-id="tetti-esposti-a-sud">3.1 Tetti esposti a SUD</h2>
<div class="cell" data-execution_count="12">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">sud_rooftop_aspect <span class="op" style="color: #5E5E5E;">=</span> rooftop_aspect.where((rooftop_aspect <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">135</span>) <span class="op" style="color: #5E5E5E;">&amp;</span> (rooftop_aspect <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="dv" style="color: #AD0000;">225</span>))</span>
<span id="cb19-2"></span>
<span id="cb19-3">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>))</span>
<span id="cb19-4"></span>
<span id="cb19-5">sud_rooftop_aspect.plot.imshow(</span>
<span id="cb19-6">    cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Set2'</span>,</span>
<span id="cb19-7">)</span>
<span id="cb19-8">plt.title(<span class="st" style="color: #20794D;">"Rooftops facing to SUD"</span>)</span>
<span id="cb19-9">plt.ylabel(<span class="st" style="color: #20794D;">"Y coordinates (meters)"</span>)</span>
<span id="cb19-10">plt.xlabel(<span class="st" style="color: #20794D;">"X coordinates (meters)"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>Text(0.5, 0, 'X coordinates (meters)')</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://pygisblog.massimilianomoraca.me/posts/2022-05-22/verificare-il-potenziale-fotovoltaico-di-un-tetto_files/figure-html/cell-13-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="tetti-esposti-ad-est" class="level2">
<h2 class="anchored" data-anchor-id="tetti-esposti-ad-est">3.2 Tetti esposti ad EST</h2>
<div class="cell" data-execution_count="13">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">est_rooftop_aspect <span class="op" style="color: #5E5E5E;">=</span> rooftop_aspect.where((rooftop_aspect <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">90</span>) <span class="op" style="color: #5E5E5E;">&amp;</span> (rooftop_aspect <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">135</span>))</span>
<span id="cb21-2"></span>
<span id="cb21-3">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>))</span>
<span id="cb21-4"></span>
<span id="cb21-5">est_rooftop_aspect.plot.imshow(</span>
<span id="cb21-6">    cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Set2'</span>,</span>
<span id="cb21-7">)</span>
<span id="cb21-8">plt.title(<span class="st" style="color: #20794D;">"Rooftops facing to EST"</span>)</span>
<span id="cb21-9">plt.ylabel(<span class="st" style="color: #20794D;">"Y coordinates (meters)"</span>)</span>
<span id="cb21-10">plt.xlabel(<span class="st" style="color: #20794D;">"X coordinates (meters)"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>Text(0.5, 0, 'X coordinates (meters)')</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://pygisblog.massimilianomoraca.me/posts/2022-05-22/verificare-il-potenziale-fotovoltaico-di-un-tetto_files/figure-html/cell-14-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="tetti-esposti-ad-ovest" class="level2">
<h2 class="anchored" data-anchor-id="tetti-esposti-ad-ovest">3.2 Tetti esposti ad OVEST</h2>
<div class="cell" data-execution_count="14">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">ovest_rooftop_aspect <span class="op" style="color: #5E5E5E;">=</span> rooftop_aspect.where((rooftop_aspect <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">225</span>) <span class="op" style="color: #5E5E5E;">&amp;</span> (rooftop_aspect <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="dv" style="color: #AD0000;">270</span>))</span>
<span id="cb23-2"></span>
<span id="cb23-3">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>))</span>
<span id="cb23-4"></span>
<span id="cb23-5">ovest_rooftop_aspect.plot.imshow(</span>
<span id="cb23-6">    cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Set2'</span>,</span>
<span id="cb23-7">)</span>
<span id="cb23-8">plt.title(<span class="st" style="color: #20794D;">"Rooftops facing to OVEST"</span>)</span>
<span id="cb23-9">plt.ylabel(<span class="st" style="color: #20794D;">"Y coordinates (meters)"</span>)</span>
<span id="cb23-10">plt.xlabel(<span class="st" style="color: #20794D;">"X coordinates (meters)"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>Text(0.5, 0, 'X coordinates (meters)')</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://pygisblog.massimilianomoraca.me/posts/2022-05-22/verificare-il-potenziale-fotovoltaico-di-un-tetto_files/figure-html/cell-15-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
</section>
<section id="produzione-energetica-stimata" class="level1">
<h1>4. Produzione energetica stimata</h1>
<p>Ora che ho una chiara idea delle aree di intervento procederò a stimare la produzione energetica dei tetti presenti nell’area in esame. Prima però è necessario affinare ulteriormente i dati.</p>
<section id="put-them-all-togheter" class="level2">
<h2 class="anchored" data-anchor-id="put-them-all-togheter">4.1 Put them all togheter</h2>
<div class="cell" data-execution_count="15">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">target_slope_rooftop <span class="op" style="color: #5E5E5E;">=</span> rooftop_slope.where(rooftop_slope <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="dv" style="color: #AD0000;">40</span>)</span>
<span id="cb25-2"></span>
<span id="cb25-3">fig, axs <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">10</span>))</span>
<span id="cb25-4">colormap <span class="op" style="color: #5E5E5E;">=</span> plt.cm.get_cmap(<span class="st" style="color: #20794D;">'RdYlGn'</span>)</span>
<span id="cb25-5"></span>
<span id="cb25-6">target_slope_rooftop.plot.imshow(</span>
<span id="cb25-7">    cmap<span class="op" style="color: #5E5E5E;">=</span>colormap.<span class="bu" style="color: null;">reversed</span>(),</span>
<span id="cb25-8">    ax<span class="op" style="color: #5E5E5E;">=</span>axs[<span class="dv" style="color: #AD0000;">0</span>],</span>
<span id="cb25-9">)</span>
<span id="cb25-10">axs[<span class="dv" style="color: #AD0000;">0</span>].set_title(<span class="st" style="color: #20794D;">"Target rooftops based on slope"</span>)</span>
<span id="cb25-11"></span>
<span id="cb25-12">rooftop_slope.plot.imshow(</span>
<span id="cb25-13">    cmap<span class="op" style="color: #5E5E5E;">=</span>colormap.<span class="bu" style="color: null;">reversed</span>(),</span>
<span id="cb25-14">    ax<span class="op" style="color: #5E5E5E;">=</span>axs[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb25-15">)</span>
<span id="cb25-16">axs[<span class="dv" style="color: #AD0000;">1</span>].set_title(<span class="st" style="color: #20794D;">"Rooftop's slope"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>Text(0.5, 1.0, "Rooftop's slope")</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://pygisblog.massimilianomoraca.me/posts/2022-05-22/verificare-il-potenziale-fotovoltaico-di-un-tetto_files/figure-html/cell-16-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="16">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">target_aspect_rooftop <span class="op" style="color: #5E5E5E;">=</span> rooftop_aspect.where((rooftop_aspect <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">90</span>) <span class="op" style="color: #5E5E5E;">&amp;</span> (rooftop_aspect <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="dv" style="color: #AD0000;">270</span>))</span>
<span id="cb27-2"></span>
<span id="cb27-3">fig, axs <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">10</span>))</span>
<span id="cb27-4"></span>
<span id="cb27-5">target_aspect_rooftop.plot.imshow(</span>
<span id="cb27-6">    cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Set2'</span>,</span>
<span id="cb27-7">    ax<span class="op" style="color: #5E5E5E;">=</span>axs[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb27-8">)</span>
<span id="cb27-9">axs[<span class="dv" style="color: #AD0000;">0</span>].set_title(<span class="st" style="color: #20794D;">"Target rooftops based on aspect"</span>)</span>
<span id="cb27-10"></span>
<span id="cb27-11">rooftop_aspect.plot.imshow(</span>
<span id="cb27-12">    cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Set2'</span>,</span>
<span id="cb27-13">    ax<span class="op" style="color: #5E5E5E;">=</span>axs[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb27-14">)</span>
<span id="cb27-15">axs[<span class="dv" style="color: #AD0000;">1</span>].set_title(<span class="st" style="color: #20794D;">"Rooftop's aspect"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>Text(0.5, 1.0, "Rooftop's aspect")</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://pygisblog.massimilianomoraca.me/posts/2022-05-22/verificare-il-potenziale-fotovoltaico-di-un-tetto_files/figure-html/cell-17-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="individuazione-dei-tetti-con-pendenza-ed-esposizione-ottimali" class="level2">
<h2 class="anchored" data-anchor-id="individuazione-dei-tetti-con-pendenza-ed-esposizione-ottimali">4.2 Individuazione dei tetti con pendenza ed esposizione ottimali</h2>
<div class="cell" data-execution_count="17">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">target_slope_rooftop_mask <span class="op" style="color: #5E5E5E;">=</span> ((target_slope_rooftop <span class="op" style="color: #5E5E5E;">/</span> target_slope_rooftop) <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">1</span>).astype(<span class="st" style="color: #20794D;">'uint8'</span>)</span>
<span id="cb29-2">target_aspect_rooftop_mask <span class="op" style="color: #5E5E5E;">=</span> ((target_aspect_rooftop <span class="op" style="color: #5E5E5E;">/</span> target_aspect_rooftop) <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">1</span>).astype(<span class="st" style="color: #20794D;">'uint8'</span>)</span>
<span id="cb29-3"></span>
<span id="cb29-4">fig, axs <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">10</span>))</span>
<span id="cb29-5"></span>
<span id="cb29-6">target_slope_rooftop_mask.plot.imshow(</span>
<span id="cb29-7">    cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"gray"</span>,</span>
<span id="cb29-8">    ax<span class="op" style="color: #5E5E5E;">=</span>axs[<span class="dv" style="color: #AD0000;">0</span>],</span>
<span id="cb29-9"></span>
<span id="cb29-10">)</span>
<span id="cb29-11">axs[<span class="dv" style="color: #AD0000;">0</span>].set_title(<span class="st" style="color: #20794D;">"Target rooftops based on slope"</span>)</span>
<span id="cb29-12"></span>
<span id="cb29-13">target_aspect_rooftop_mask.plot.imshow(</span>
<span id="cb29-14">    cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"gray"</span>,</span>
<span id="cb29-15">    ax<span class="op" style="color: #5E5E5E;">=</span>axs[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb29-16">)</span>
<span id="cb29-17">axs[<span class="dv" style="color: #AD0000;">1</span>].set_title(<span class="st" style="color: #20794D;">"Target rooftops based on aspect"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>Text(0.5, 1.0, 'Target rooftops based on aspect')</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://pygisblog.massimilianomoraca.me/posts/2022-05-22/verificare-il-potenziale-fotovoltaico-di-un-tetto_files/figure-html/cell-18-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="18">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">target_rooftop <span class="op" style="color: #5E5E5E;">=</span> target_slope_rooftop_mask <span class="op" style="color: #5E5E5E;">*</span> target_aspect_rooftop_mask</span>
<span id="cb31-2"></span>
<span id="cb31-3">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>))</span>
<span id="cb31-4"></span>
<span id="cb31-5">target_rooftop.plot.imshow(</span>
<span id="cb31-6">    cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'gray'</span>,</span>
<span id="cb31-7">)</span>
<span id="cb31-8">plt.title(<span class="st" style="color: #20794D;">"Target rooftops"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>Text(0.5, 1.0, 'Target rooftops')</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://pygisblog.massimilianomoraca.me/posts/2022-05-22/verificare-il-potenziale-fotovoltaico-di-un-tetto_files/figure-html/cell-19-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="stima-del-potenziale-produttivo" class="level2">
<h2 class="anchored" data-anchor-id="stima-del-potenziale-produttivo">4.3 Stima del potenziale produttivo</h2>
<p>Ora che è chiaro quali sono i tetti potenzialmente utilizzabili è possibile calcolarne la produzione.</p>
<p>Il primo passo da seguire è convertire il <code>DataArray</code> creato in precedenza in un <code>DataFrame</code>.</p>
<div class="cell" data-execution_count="19">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">target_rooftop_df <span class="op" style="color: #5E5E5E;">=</span> target_rooftop.to_dataframe(name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"value"</span>).reset_index()</span>
<span id="cb33-2">target_rooftop_df <span class="op" style="color: #5E5E5E;">=</span> target_rooftop_df[target_rooftop_df[<span class="st" style="color: #20794D;">'value'</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb33-3">target_rooftop_df <span class="op" style="color: #5E5E5E;">=</span> target_rooftop_df[[<span class="st" style="color: #20794D;">'x'</span>, <span class="st" style="color: #20794D;">'y'</span>, <span class="st" style="color: #20794D;">'value'</span>]]</span>
<span id="cb33-4">target_rooftop_df</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="19">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>x</th>
      <th>y</th>
      <th>value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1951</th>
      <td>444946.808</td>
      <td>4529404.911</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1952</th>
      <td>444947.808</td>
      <td>4529404.911</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1953</th>
      <td>444948.808</td>
      <td>4529404.911</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1954</th>
      <td>444949.808</td>
      <td>4529404.911</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2455</th>
      <td>444950.808</td>
      <td>4529403.911</td>
      <td>1</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>248266</th>
      <td>444761.808</td>
      <td>4528911.911</td>
      <td>1</td>
    </tr>
    <tr>
      <th>248267</th>
      <td>444762.808</td>
      <td>4528911.911</td>
      <td>1</td>
    </tr>
    <tr>
      <th>248268</th>
      <td>444763.808</td>
      <td>4528911.911</td>
      <td>1</td>
    </tr>
    <tr>
      <th>248269</th>
      <td>444764.808</td>
      <td>4528911.911</td>
      <td>1</td>
    </tr>
    <tr>
      <th>248767</th>
      <td>444762.808</td>
      <td>4528910.911</td>
      <td>1</td>
    </tr>
  </tbody>
</table>
<p>25141 rows × 3 columns</p>
</div>
</div>
</div>
<p>In questo modo si è ottenuto un oggetto che contiene i centroidi dei pixel del raster precedente, con i soli valori di interesse. Il passo successivo è convertire in <code>GeoDataFrame</code> il dataset ottenuto in precedenza.</p>
<div class="cell" data-execution_count="20">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">gdf_point <span class="op" style="color: #5E5E5E;">=</span> gpd.GeoDataFrame(</span>
<span id="cb34-2">    target_rooftop_df.value,</span>
<span id="cb34-3">    geometry<span class="op" style="color: #5E5E5E;">=</span>gpd.points_from_xy(target_rooftop_df.x,target_rooftop_df.y),</span>
<span id="cb34-4">    crs<span class="op" style="color: #5E5E5E;">=</span>raster.rio.crs.to_string()</span>
<span id="cb34-5">)</span>
<span id="cb34-6">gdf_point</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="20">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>value</th>
      <th>geometry</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1951</th>
      <td>1</td>
      <td>POINT (444946.808 4529404.911)</td>
    </tr>
    <tr>
      <th>1952</th>
      <td>1</td>
      <td>POINT (444947.808 4529404.911)</td>
    </tr>
    <tr>
      <th>1953</th>
      <td>1</td>
      <td>POINT (444948.808 4529404.911)</td>
    </tr>
    <tr>
      <th>1954</th>
      <td>1</td>
      <td>POINT (444949.808 4529404.911)</td>
    </tr>
    <tr>
      <th>2455</th>
      <td>1</td>
      <td>POINT (444950.808 4529403.911)</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>248266</th>
      <td>1</td>
      <td>POINT (444761.808 4528911.911)</td>
    </tr>
    <tr>
      <th>248267</th>
      <td>1</td>
      <td>POINT (444762.808 4528911.911)</td>
    </tr>
    <tr>
      <th>248268</th>
      <td>1</td>
      <td>POINT (444763.808 4528911.911)</td>
    </tr>
    <tr>
      <th>248269</th>
      <td>1</td>
      <td>POINT (444764.808 4528911.911)</td>
    </tr>
    <tr>
      <th>248767</th>
      <td>1</td>
      <td>POINT (444762.808 4528910.911)</td>
    </tr>
  </tbody>
</table>
<p>25141 rows × 2 columns</p>
</div>
</div>
</div>
<p>Si è ottenuto un GeoDataFrame di punti, ma a me interessano i poligoni, quindi creo un buffer intorno ai punti in modo da riprodurre i pixel del raster con cui ho iniziato l’analisi. Quindi devo andare ad individuare la risoluzione del mio raster di partenza:</p>
<div class="cell" data-execution_count="21">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">x, y <span class="op" style="color: #5E5E5E;">=</span> raster.rio.resolution()</span>
<span id="cb35-2"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Il raster di partenza ha una risoluzione di </span><span class="sc" style="color: #5E5E5E;">{</span>x<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> x </span><span class="sc" style="color: #5E5E5E;">{</span>y<span class="op" style="color: #5E5E5E;">*-</span><span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> metri"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Il raster di partenza ha una risoluzione di 1.0 x 1.0 metri</code></pre>
</div>
</div>
<p>Ora posso creare i miei poligoni.</p>
<div class="cell" data-execution_count="22">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">gdf_polygon <span class="op" style="color: #5E5E5E;">=</span> gdf_point.<span class="bu" style="color: null;">buffer</span>(distance<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>, cap_style<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb37-2">polygons <span class="op" style="color: #5E5E5E;">=</span> gdf_polygon.unary_union</span>
<span id="cb37-3"></span>
<span id="cb37-4">gdf <span class="op" style="color: #5E5E5E;">=</span> gpd.GeoDataFrame(geometry<span class="op" style="color: #5E5E5E;">=</span>gpd.GeoSeries(polygons), crs<span class="op" style="color: #5E5E5E;">=</span>gdf_polygon.crs).explode(index_parts<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb37-5">gdf.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"superficie_mq"</span>, value<span class="op" style="color: #5E5E5E;">=</span>gdf.geometry.area)</span>
<span id="cb37-6">gdf</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="22">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th></th>
      <th>geometry</th>
      <th>superficie_mq</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th rowspan="11" valign="top">0</th>
      <th>0</th>
      <td>POLYGON ((444503.308 4528932.411, 444503.308 4...</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>POLYGON ((444505.308 4528934.411, 444506.308 4...</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>POLYGON ((444501.308 4528936.411, 444501.308 4...</td>
      <td>2.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>POLYGON ((444504.308 4528937.411, 444504.308 4...</td>
      <td>5.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>POLYGON ((444500.308 4528947.411, 444500.308 4...</td>
      <td>8.0</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>2284</th>
      <td>POLYGON ((444989.308 4529288.411, 444989.308 4...</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>2285</th>
      <td>POLYGON ((444980.308 4529322.411, 444980.308 4...</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>2286</th>
      <td>POLYGON ((444980.308 4529325.411, 444981.308 4...</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>2287</th>
      <td>POLYGON ((444992.308 4529354.411, 444992.308 4...</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>2288</th>
      <td>POLYGON ((444985.308 4529360.411, 444984.308 4...</td>
      <td>18.0</td>
    </tr>
  </tbody>
</table>
<p>2289 rows × 2 columns</p>
</div>
</div>
</div>
<p>Ho ottenuto un GeoDataFrame con i dati di mio interesse. Quando scrissi l’articolo del <a href="https://massimilianomoraca.it/blog/gis/fotovoltaico-e-gis-come-individuare-lutilizzabilita-di-un-tetto/">blog</a>, oramai 6 annifa, 1 kwp occupava 7 metri quadri; non conosco i risvolti del mercato attuale ma ricordo che con la minuaturizzazione si andava verso la riduzione della superficie utile per produrre 1 kwp. Anche per questo articolo mi atterrò al dato del 2018 ma, prima di calcolare la produzione potenziale di energia dell’are in esame, andrò a filtrare tutto ciò che è inferiore a 7 metri quadri.</p>
<div class="cell" data-execution_count="23">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">final_analysis <span class="op" style="color: #5E5E5E;">=</span> gdf[gdf.superficie_mq <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">7</span>].reset_index()</span>
<span id="cb38-2">final_analysis <span class="op" style="color: #5E5E5E;">=</span> final_analysis[[<span class="st" style="color: #20794D;">'geometry'</span>, <span class="st" style="color: #20794D;">'superficie_mq'</span>]]</span>
<span id="cb38-3">final_analysis.insert(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>, column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"potential_production_kw"</span>, value<span class="op" style="color: #5E5E5E;">=</span>final_analysis.superficie_mq<span class="op" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">7</span>)</span>
<span id="cb38-4">final_analysis</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="23">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>geometry</th>
      <th>superficie_mq</th>
      <th>potential_production_kw</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>POLYGON ((444500.308 4528947.411, 444500.308 4...</td>
      <td>8.0</td>
      <td>56.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>POLYGON ((444506.308 4528961.411, 444507.308 4...</td>
      <td>8.0</td>
      <td>56.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>POLYGON ((444518.308 4528970.411, 444519.308 4...</td>
      <td>35.0</td>
      <td>245.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>POLYGON ((444518.308 4528967.411, 444519.308 4...</td>
      <td>9.0</td>
      <td>63.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>POLYGON ((444524.308 4529036.411, 444525.308 4...</td>
      <td>24.0</td>
      <td>168.0</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>641</th>
      <td>POLYGON ((444988.308 4529225.411, 444989.308 4...</td>
      <td>12.0</td>
      <td>84.0</td>
    </tr>
    <tr>
      <th>642</th>
      <td>POLYGON ((444985.308 4529260.411, 444986.308 4...</td>
      <td>16.0</td>
      <td>112.0</td>
    </tr>
    <tr>
      <th>643</th>
      <td>POLYGON ((444985.308 4529279.411, 444986.308 4...</td>
      <td>9.0</td>
      <td>63.0</td>
    </tr>
    <tr>
      <th>644</th>
      <td>POLYGON ((444987.308 4529283.411, 444987.308 4...</td>
      <td>22.0</td>
      <td>154.0</td>
    </tr>
    <tr>
      <th>645</th>
      <td>POLYGON ((444985.308 4529360.411, 444984.308 4...</td>
      <td>18.0</td>
      <td>126.0</td>
    </tr>
  </tbody>
</table>
<p>646 rows × 3 columns</p>
</div>
</div>
</div>
<div class="cell" data-execution_count="24">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>))</span>
<span id="cb39-2"></span>
<span id="cb39-3">final_view <span class="op" style="color: #5E5E5E;">=</span> final_analysis.plot(column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"potential_production_kw"</span>, cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"gnuplot"</span>, ax<span class="op" style="color: #5E5E5E;">=</span>ax, legend<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb39-4">cx.add_basemap(final_view, crs<span class="op" style="color: #5E5E5E;">=</span>final_analysis.crs.to_string(), source<span class="op" style="color: #5E5E5E;">=</span>cx.providers.OpenStreetMap.Mapnik)</span>
<span id="cb39-5">final_view.set_title(<span class="st" style="color: #20794D;">"Energy production map KWP"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="24">
<pre><code>Text(0.5, 1.0, 'Energy production map KWP')</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://pygisblog.massimilianomoraca.me/posts/2022-05-22/verificare-il-potenziale-fotovoltaico-di-un-tetto_files/figure-html/cell-25-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
</section>
<section id="conclusione" class="level1">
<h1>Conclusione</h1>
<p>La stima del potenziale produttivo di un tetto è sicuramente un passo fondamentale per capire se il tetto in esame è da considerare per una analisi più approfondita o meno. Nel processo di analisi che ho esposto ho volutamente evitato di scendere troppo nel dettaglio di analisi proprio perchè: 1. avevo interesse ad esporre un flusso di analisi; 2. avevo interesse a stimare dei valori.</p>
<p>Ad esempio un aspetto su cui ho volutamente sorvolato è il calcolo delle superfici inclinate che mi avrebbe restituito un valore di produttività per tetto differente.</p>
<p>Hai commenti, indicazioni o soluzioni alternative in Python? Scrivi nella sezione <a href="https://github.com/MaxDragonheart/PyGIS-Blog/discussions">Discussioni</a>.</p>
<section id="newsletter" class="level2">
<h2 class="anchored" data-anchor-id="newsletter">Newsletter</h2>
<p>Se vuoi ricevere aggiornamenti sui prossimi articoli <a href="https://massimilianomoraca.it/newsletter/">iscriviti alla newsletter</a>!</p>
</section>
<section id="telegram" class="level2">
<h2 class="anchored" data-anchor-id="telegram">Telegram</h2>
<p>Segui il canale Telegram <strong><a href="https://t.me/caffegis">CaffèGIS - I GIS a supporto dei processi evolutivi territoriali</a></strong> per ricevere aggiornamenti su iniziative ed informazioni a tema GIS.</p>
</section>
<section id="offrimi-una-birra" class="level2">
<h2 class="anchored" data-anchor-id="offrimi-una-birra">Offrimi una birra!</h2>
<p><strong>Se trovi interessanti i miei articoli <a href="https://www.paypal.com/paypalme/MassimilianoMoraca">offrimi una birra</a>!</strong></p>
<p>Alla prossima!</p>


</section>
</section>

 ]]></description>
  <category>line</category>
  <guid>https://pygisblog.massimilianomoraca.me/posts/2022-05-22/verificare-il-potenziale-fotovoltaico-di-un-tetto.html</guid>
  <pubDate>Sat, 21 May 2022 22:00:00 GMT</pubDate>
  <media:content url="https://pygisblog.massimilianomoraca.me/project_logo.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Tagliare una linea con un punto</title>
  <link>https://pygisblog.massimilianomoraca.me/posts/2022-04-18/tagliare-una-linea-con-un-punto.html</link>
  <description><![CDATA[ 




<p>Questa volta l’argomento trattato non nasce da una attività simile fatta con QGIS come per gli altri <a href="https://maxdragonheart.github.io/PyGIS-Blog/">post</a> precedenti ma dalla soluzione ad un problema in cui mi sono imbattuto e che mi ha portato via un po’ di tempo con non pochi grattacapi!</p>
<p>La richiesta era semplice, all’apparenza, ma non avevo fatto i conti con i <em><a href="https://docs.python.org/3/tutorial/floatingpoint.html">Floating Point</a> problems</em>. In pratica, avendo una linea ed un punto lontano da essa dovevo trovare la distanza minima tra punto e lina e spezzare la linea sul punto di contatto tra la congiungente tra punto e linea.</p>
<section id="prima-di-iniziare" class="level2">
<h2 class="anchored" data-anchor-id="prima-di-iniziare">Prima di iniziare</h2>
<section id="librerie" class="level3">
<h3 class="anchored" data-anchor-id="librerie">Librerie</h3>
<p>Per raggiungere l’obiettivo userò le librerie che seguono:</p>
<div class="cell" data-execution_count="1">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">from</span> matplotlib <span class="im" style="color: #00769E;">import</span> pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">from</span> shapely <span class="im" style="color: #00769E;">import</span> wkt</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">from</span> shapely.ops <span class="im" style="color: #00769E;">import</span> substring, nearest_points, snap, split</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">from</span> shapely.geometry <span class="im" style="color: #00769E;">import</span> Point, LineString</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="im" style="color: #00769E;">import</span> warnings</span>
<span id="cb1-7">warnings.filterwarnings(<span class="st" style="color: #20794D;">'ignore'</span>)</span>
<span id="cb1-8">warnings.simplefilter(<span class="st" style="color: #20794D;">'ignore'</span>)</span></code></pre></div>
</details>
</div>
</section>
<section id="fonti-dati" class="level3">
<h3 class="anchored" data-anchor-id="fonti-dati">Fonti dati</h3>
<div class="cell" data-execution_count="2">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">point <span class="op" style="color: #5E5E5E;">=</span> wkt.loads(<span class="st" style="color: #20794D;">'POINT (437845.7257845374 4529752.584581757)'</span>)</span>
<span id="cb2-2">line <span class="op" style="color: #5E5E5E;">=</span> wkt.loads(<span class="st" style="color: #20794D;">'LINESTRING (438260.8093535866 4528121.6968436185, 442844.8639858717 4531930.850183684)'</span>)</span>
<span id="cb2-3"></span>
<span id="cb2-4">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>))</span>
<span id="cb2-5">ax.set_xlabel(<span class="st" style="color: #20794D;">'X coordinate'</span>, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">15</span>)</span>
<span id="cb2-6">ax.set_ylabel(<span class="st" style="color: #20794D;">'Y coordinate'</span>, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">15</span>)</span>
<span id="cb2-7"></span>
<span id="cb2-8">ax.scatter(</span>
<span id="cb2-9">    <span class="op" style="color: #5E5E5E;">*</span>point.xy,</span>
<span id="cb2-10">    label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Point'</span>,</span>
<span id="cb2-11">    s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>,</span>
<span id="cb2-12">    facecolor<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'orange'</span>,</span>
<span id="cb2-13">    edgecolor<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'black'</span></span>
<span id="cb2-14">)</span>
<span id="cb2-15">plt.plot(<span class="op" style="color: #5E5E5E;">*</span>line.xy, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Line'</span>, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'blue'</span>)</span>
<span id="cb2-16"></span>
<span id="cb2-17">plt.legend()</span>
<span id="cb2-18"></span>
<span id="cb2-19">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://pygisblog.massimilianomoraca.me/posts/2022-04-18/tagliare-una-linea-con-un-punto_files/figure-html/cell-3-output-1.png" width="857" height="820"></p>
</div>
</div>
</section>
</section>
<section id="premessa" class="level1">
<h1>Premessa</h1>
<p>Ho capito delle difficoltà legate ai <em>floating point</em> dopo questa esperienza:</p>
<div class="cell" data-execution_count="3">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">minimum_distance <span class="op" style="color: #5E5E5E;">=</span> nearest_points(point, line)[<span class="dv" style="color: #AD0000;">1</span>]</span></code></pre></div>
</details>
</div>
<p>Con <code>nearest_points()</code> ottengo il punto sulla linea più prossimo al mio punto di riferimento, a questo punto è naturale tagliare la linea con questo punto:</p>
<div class="cell" data-execution_count="4">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">splitted_line <span class="op" style="color: #5E5E5E;">=</span> split(line, minimum_distance)</span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="cf" style="color: #003B4F;">for</span> line <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">list</span>(splitted_line):</span>
<span id="cb4-4">    <span class="bu" style="color: null;">print</span>(line)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>LINESTRING (438260.8093535866 4528121.6968436185, 442844.8639858717 4531930.850183684)</code></pre>
</div>
</div>
<p>La funzione <code>split()</code> restiuisce una <em>geometry collection</em> composta da due <em>LineString</em>. Almeno questo è quello che mi sarei aspettato leggendo anche la documentazione della libreria usata, ma purtroppo anzicchè ottenere due linee ne ho ottenuta una, la linea in ingresso. Quindi mi è sorto un dubbio: <strong>ma il punto con cui ho provato a tagliare la linea è realmente sulla linea?</strong></p>
<div class="cell" data-execution_count="5">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">snap_point <span class="op" style="color: #5E5E5E;">=</span> snap(minimum_distance, line, <span class="fl" style="color: #AD0000;">1e-8</span>)</span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="cf" style="color: #003B4F;">assert</span> minimum_distance.wkt <span class="op" style="color: #5E5E5E;">==</span> snap_point.wkt</span>
<span id="cb6-4"><span class="cf" style="color: #003B4F;">assert</span> line.distance(minimum_distance) <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="fl" style="color: #AD0000;">1e-8</span></span></code></pre></div>
</details>
</div>
<p>Gli <code>assert</code> non hanno dato esito negativo, quindi il punto è sulla linea. <strong>E allora perchè non riesco a tagliarla??</strong></p>
<p>Facendo un po’ di ricerche ho capito che il problema è legato ai <em>floating point</em> e così mi sono dato da fare per trovare una soluzione senza però trascurare altre possibili strade nel dubbio che magari potesse esserci un’altra strada o più di una. Infatti chiedendo un po’ in giro ho trovato altre due soluzioni oltre la mia.</p>
</section>
<section id="soluzione-mia" class="level1">
<h1>1. Soluzione mia</h1>
<p>Uso <code>nearest_points()</code> per trovare il punto più prossimo alla linea, quindi prendo il <em>from_node</em> ed il <em>to_node</em> della mia linea e li uso per creare due linee:</p>
<div class="cell" data-execution_count="6">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">first_linestring <span class="op" style="color: #5E5E5E;">=</span> LineString([Point(line.coords[<span class="dv" style="color: #AD0000;">0</span>]), minimum_distance])</span>
<span id="cb7-2">last_linestring <span class="op" style="color: #5E5E5E;">=</span> LineString([minimum_distance, Point(line.coords[<span class="dv" style="color: #AD0000;">1</span>])])</span>
<span id="cb7-3">minimum_distance_line <span class="op" style="color: #5E5E5E;">=</span> LineString([point, minimum_distance])</span></code></pre></div>
</details>
</div>
<p>In questo modo ho tagliato la linea ed ho creato la linea congiungente il mio punto iniziale con la linea stessa.</p>
<div class="cell" data-execution_count="7">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>))</span>
<span id="cb8-2">ax.set_xlabel(<span class="st" style="color: #20794D;">'X coordinate'</span>, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">15</span>)</span>
<span id="cb8-3">ax.set_ylabel(<span class="st" style="color: #20794D;">'Y coordinate'</span>, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">15</span>)</span>
<span id="cb8-4"></span>
<span id="cb8-5">plt.plot(<span class="op" style="color: #5E5E5E;">*</span>first_linestring.xy, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Line'</span>, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'blue'</span>)</span>
<span id="cb8-6">plt.plot(<span class="op" style="color: #5E5E5E;">*</span>last_linestring.xy, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Splitted line'</span>, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'green'</span>)</span>
<span id="cb8-7">plt.plot(<span class="op" style="color: #5E5E5E;">*</span>minimum_distance_line.xy, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Minimum distance line'</span>, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'grey'</span>)</span>
<span id="cb8-8">ax.scatter(</span>
<span id="cb8-9">    <span class="op" style="color: #5E5E5E;">*</span>point.xy,</span>
<span id="cb8-10">    label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Point'</span>,</span>
<span id="cb8-11">    s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>,</span>
<span id="cb8-12">    facecolor<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'orange'</span>,</span>
<span id="cb8-13">    edgecolor<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'black'</span></span>
<span id="cb8-14">)</span>
<span id="cb8-15">ax.scatter(</span>
<span id="cb8-16">    <span class="op" style="color: #5E5E5E;">*</span>minimum_distance.xy,</span>
<span id="cb8-17">    label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Point on linestring'</span>,</span>
<span id="cb8-18">    s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>,</span>
<span id="cb8-19">    facecolor<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'red'</span>,</span>
<span id="cb8-20">    edgecolor<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'black'</span></span>
<span id="cb8-21">)</span>
<span id="cb8-22"></span>
<span id="cb8-23">plt.legend()</span>
<span id="cb8-24"></span>
<span id="cb8-25">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://pygisblog.massimilianomoraca.me/posts/2022-04-18/tagliare-una-linea-con-un-punto_files/figure-html/cell-8-output-1.png" width="857" height="820"></p>
</div>
</div>
</section>
<section id="soluzione-basata-su-projection" class="level1">
<h1>2. Soluzione basata su <code>projection()</code></h1>
<p>Soluzione suggerita da due utenti sui social. In pratica si proietta il punto sulla linea andando ad individuare il punto di proiezione sulla stessa con cui si costruiscono le linee risultanti dal taglio.</p>
<div class="cell" data-execution_count="8">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">distance <span class="op" style="color: #5E5E5E;">=</span> line.project(point, normalized<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb9-2">distance</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>0.12131606906976151</code></pre>
</div>
</div>
<div class="cell" data-execution_count="9">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">line_length <span class="op" style="color: #5E5E5E;">=</span> line.length</span>
<span id="cb11-2"></span>
<span id="cb11-3">first_linestring2 <span class="op" style="color: #5E5E5E;">=</span> substring(</span>
<span id="cb11-4">    geom<span class="op" style="color: #5E5E5E;">=</span>line,</span>
<span id="cb11-5">    start_dist<span class="op" style="color: #5E5E5E;">=</span>line_length<span class="op" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb11-6">    end_dist<span class="op" style="color: #5E5E5E;">=</span>line_length<span class="op" style="color: #5E5E5E;">*</span>distance</span>
<span id="cb11-7">)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="10">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>))</span>
<span id="cb12-2">ax.set_xlabel(<span class="st" style="color: #20794D;">'X coordinate'</span>, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">15</span>)</span>
<span id="cb12-3">ax.set_ylabel(<span class="st" style="color: #20794D;">'Y coordinate'</span>, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">15</span>)</span>
<span id="cb12-4"></span>
<span id="cb12-5">ax.scatter(</span>
<span id="cb12-6">    <span class="op" style="color: #5E5E5E;">*</span>point.xy,</span>
<span id="cb12-7">    label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Point'</span>,</span>
<span id="cb12-8">    s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>,</span>
<span id="cb12-9">    facecolor<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'orange'</span>,</span>
<span id="cb12-10">    edgecolor<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'black'</span></span>
<span id="cb12-11">)</span>
<span id="cb12-12">plt.plot(<span class="op" style="color: #5E5E5E;">*</span>line.xy, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Line'</span>, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'blue'</span>)</span>
<span id="cb12-13">plt.plot(<span class="op" style="color: #5E5E5E;">*</span>first_linestring.xy, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Splitted line'</span>, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'green'</span>)</span>
<span id="cb12-14"></span>
<span id="cb12-15">plt.legend()</span>
<span id="cb12-16"></span>
<span id="cb12-17">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://pygisblog.massimilianomoraca.me/posts/2022-04-18/tagliare-una-linea-con-un-punto_files/figure-html/cell-11-output-1.png" width="857" height="820"></p>
</div>
</div>
<p>L’altra linea ed il punto di taglio si estraggono facilmente con procedimenti simili a quelli precedenti.</p>
</section>
<section id="soluzione-basata-su-snap" class="level1">
<h1>3. Soluzione basata su <code>snap()</code></h1>
<p>Soluzione suggerita da <a href="https://github.com/mlaloux">M.Laloux</a> <a href="https://gis.stackexchange.com/a/428987/72195">qui</a>. In realtà ce ne è anche un’altra basata su <code>buffer()</code> ma avevo già incontrato precedetemente problemi legati ai <em>floating point</em> con quella funzione per cui l’ho scartata. La funzione usata per questa soluzione aggancia il punto di taglio alla linea e quindi effettua il taglio.</p>
<div class="cell" data-execution_count="11">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">splitted_lines <span class="op" style="color: #5E5E5E;">=</span> split(snap(line, minimum_distance, <span class="fl" style="color: #AD0000;">0.0001</span>), minimum_distance)</span>
<span id="cb13-2"></span>
<span id="cb13-3">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>))</span>
<span id="cb13-4">ax.set_xlabel(<span class="st" style="color: #20794D;">'X coordinate'</span>, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">15</span>)</span>
<span id="cb13-5">ax.set_ylabel(<span class="st" style="color: #20794D;">'Y coordinate'</span>, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">15</span>)</span>
<span id="cb13-6"></span>
<span id="cb13-7">new_lines <span class="op" style="color: #5E5E5E;">=</span> [minimum_distance_line]</span>
<span id="cb13-8"><span class="cf" style="color: #003B4F;">for</span> line <span class="kw" style="color: #003B4F;">in</span> splitted_lines:</span>
<span id="cb13-9">    plt.plot(<span class="op" style="color: #5E5E5E;">*</span>line.xy, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Splitted line'</span>, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'blue'</span>)</span>
<span id="cb13-10">    new_lines.append(line)</span>
<span id="cb13-11">plt.plot(<span class="op" style="color: #5E5E5E;">*</span>minimum_distance_line.xy, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Minimum distance line'</span>, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'grey'</span>)</span>
<span id="cb13-12">ax.scatter(</span>
<span id="cb13-13">    <span class="op" style="color: #5E5E5E;">*</span>point.xy,</span>
<span id="cb13-14">    label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Point'</span>,</span>
<span id="cb13-15">    s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>,</span>
<span id="cb13-16">    facecolor<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'orange'</span>,</span>
<span id="cb13-17">    edgecolor<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'black'</span></span>
<span id="cb13-18">)</span>
<span id="cb13-19">ax.scatter(</span>
<span id="cb13-20">    <span class="op" style="color: #5E5E5E;">*</span>minimum_distance.xy,</span>
<span id="cb13-21">    label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Point on linestring'</span>,</span>
<span id="cb13-22">    s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>,</span>
<span id="cb13-23">    facecolor<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'red'</span>,</span>
<span id="cb13-24">    edgecolor<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'black'</span></span>
<span id="cb13-25">)</span>
<span id="cb13-26"></span>
<span id="cb13-27">plt.legend()</span>
<span id="cb13-28"></span>
<span id="cb13-29">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://pygisblog.massimilianomoraca.me/posts/2022-04-18/tagliare-una-linea-con-un-punto_files/figure-html/cell-12-output-1.png" width="857" height="820"></p>
</div>
</div>
</section>
<section id="conclusione" class="level1">
<h1>Conclusione</h1>
<p>Purtroppo i problemi legati ai floating points in <a href="https://github.com/shapely/shapely/issues?q=is%3Aissue+is%3Aopen+floating+point">shapely</a> restano irrisolti da un po’ di anni. Le soluzioni proproste si pongoo nel caso più semplice: una linea composta da soli due vertex e cioè il <em>from_node</em> ed il <em>to_node</em>. Per situazioni più complesse si potrebbe iterare il discorso andando a segmentare la linea per poi ricongiungere i segmenti che fanno parte delle linee risultati dal taglio.</p>
<p><strong>PS</strong>: i riquadri di warning che si vedono ogni tanto <em>fanno parte del gioco</em>, sono avvertimenti per prossime modifiche da fare al codice per poter essere utilizzabile con la prossima versione della libreria di turno.</p>
<p>Hai commenti, indicazioni o soluzioni alternative in Python? Scrivi nella sezione <a href="https://github.com/MaxDragonheart/PyGIS-Blog/discussions">Discussioni</a>.</p>
<section id="newsletter" class="level2">
<h2 class="anchored" data-anchor-id="newsletter">Newsletter</h2>
<p>Se vuoi ricevere aggiornamenti sui prossimi articoli <a href="https://massimilianomoraca.it/newsletter/">iscriviti alla newsletter</a>!</p>
</section>
<section id="telegram" class="level2">
<h2 class="anchored" data-anchor-id="telegram">Telegram</h2>
<p>Segui il canale Telegram <strong><a href="https://t.me/caffegis">CaffèGIS - I GIS a supporto dei processi evolutivi territoriali</a></strong> per ricevere aggiornamenti su iniziative ed informazioni a tema GIS.</p>
</section>
<section id="offrimi-una-birra" class="level2">
<h2 class="anchored" data-anchor-id="offrimi-una-birra">Offrimi una birra!</h2>
<p><strong>Se trovi interessanti i miei articoli <a href="https://www.paypal.com/paypalme/MassimilianoMoraca">offrimi una birra</a>!</strong></p>
<p>Alla prossima!</p>


</section>
</section>

 ]]></description>
  <category>point</category>
  <guid>https://pygisblog.massimilianomoraca.me/posts/2022-04-18/tagliare-una-linea-con-un-punto.html</guid>
  <pubDate>Sun, 17 Apr 2022 22:00:00 GMT</pubDate>
  <media:content url="https://pygisblog.massimilianomoraca.me/project_logo.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Analisi di visibilità</title>
  <link>https://pygisblog.massimilianomoraca.me/posts/2022-04-07/analisi-di-visibilita.html</link>
  <description><![CDATA[ 




<p>L’analisi di visibilità è un argomento molto interessante da trattare con Python. In un <a href="https://massimilianomoraca.it/blog/gis/analisi-di-visibilita/">mio articolo</a> l’ho affrontata usando QGIS, qui oggi vediamo come raggiungere lo stesso obiettivo con Python.</p>
<section id="prima-di-iniziare" class="level2">
<h2 class="anchored" data-anchor-id="prima-di-iniziare">Prima di iniziare</h2>
<section id="librerie" class="level3">
<h3 class="anchored" data-anchor-id="librerie">Librerie</h3>
<p>Per raggiungere l’obiettivo userò le librerie che seguono:</p>
<div class="cell" data-execution_count="1">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> pathlib</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> geopandas <span class="im" style="color: #00769E;">as</span> gpd</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> rioxarray <span class="im" style="color: #00769E;">as</span> rxr</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> rasterio <span class="im" style="color: #00769E;">as</span> rio</span>
<span id="cb1-5"><span class="im" style="color: #00769E;">from</span> rasterio.plot <span class="im" style="color: #00769E;">import</span> show</span>
<span id="cb1-6"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-7"><span class="im" style="color: #00769E;">from</span> xrspatial <span class="im" style="color: #00769E;">import</span> hillshade, viewshed</span>
<span id="cb1-8"><span class="im" style="color: #00769E;">from</span> xarray.plot <span class="im" style="color: #00769E;">import</span> imshow</span></code></pre></div>
</details>
</div>
</section>
<section id="fonti-dati" class="level3">
<h3 class="anchored" data-anchor-id="fonti-dati">Fonti dati</h3>
<p>Come <a href="https://massimilianomoraca.it/blog/gis/3d-open-source/">DEM</a> ho usato un ritaglio del progetto <a href="http://www.sinanet.isprambiente.it/it/sia-ispra/download-mais/dem20/view">DEM20 di ISPRA</a> su cui ho posizionato con QGIS undici punti; nell’articolo del blog uso l’undicesimo, qui proverò ad usarli tutti.</p>
<div class="cell" data-execution_count="2">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">sample_data <span class="op" style="color: #5E5E5E;">=</span> pathlib.Path.cwd().parent.joinpath(<span class="st" style="color: #20794D;">'sample_data/viewshed'</span>)</span>
<span id="cb2-2">dem <span class="op" style="color: #5E5E5E;">=</span> sample_data.joinpath(<span class="st" style="color: #20794D;">'ispra_dtm_20.tif'</span>)</span>
<span id="cb2-3">points <span class="op" style="color: #5E5E5E;">=</span> sample_data.joinpath(<span class="st" style="color: #20794D;">'poi.shp'</span>)</span></code></pre></div>
</details>
</div>
</section>
</section>
<section id="lettura-dei-dati" class="level1">
<h1>1. Lettura dei dati</h1>
<div class="cell" data-execution_count="3">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">points_data <span class="op" style="color: #5E5E5E;">=</span> gpd.read_file(points)</span>
<span id="cb3-2">points_data</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="3">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>fid</th>
      <th>geometry</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>POINT (458757.920 4498413.572)</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>POINT (462111.858 4502990.699)</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>POINT (459359.399 4506106.798)</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4</td>
      <td>POINT (457577.922 4495996.256)</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5</td>
      <td>POINT (447422.726 4500303.775)</td>
    </tr>
    <tr>
      <th>5</th>
      <td>6</td>
      <td>POINT (461931.392 4502754.454)</td>
    </tr>
    <tr>
      <th>6</th>
      <td>7</td>
      <td>POINT (464694.875 4495428.963)</td>
    </tr>
    <tr>
      <th>7</th>
      <td>8</td>
      <td>POINT (457380.393 4500985.601)</td>
    </tr>
    <tr>
      <th>8</th>
      <td>9</td>
      <td>POINT (452798.980 4493684.317)</td>
    </tr>
    <tr>
      <th>9</th>
      <td>10</td>
      <td>POINT (455753.530 4496944.529)</td>
    </tr>
    <tr>
      <th>10</th>
      <td>11</td>
      <td>POINT (456914.431 4498265.587)</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="4">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">raster <span class="op" style="color: #5E5E5E;">=</span> rxr.open_rasterio(dem).squeeze()</span>
<span id="cb4-2">raster</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="4">

<div><svg style="position: absolute; width: 0; height: 0; overflow: hidden">
<defs>
<symbol id="icon-database" viewbox="0 0 32 32">
<path d="M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z"></path>
<path d="M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
<path d="M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
</symbol>
<symbol id="icon-file-text2" viewbox="0 0 32 32">
<path d="M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z"></path>
<path d="M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
<path d="M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
<path d="M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
</symbol>
</defs>
</svg>
<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.
 *
 */

:root {
  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));
  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));
  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));
  --xr-border-color: var(--jp-border-color2, #e0e0e0);
  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);
  --xr-background-color: var(--jp-layout-color0, white);
  --xr-background-color-row-even: var(--jp-layout-color1, white);
  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);
}

html[theme=dark],
body.vscode-dark {
  --xr-font-color0: rgba(255, 255, 255, 1);
  --xr-font-color2: rgba(255, 255, 255, 0.54);
  --xr-font-color3: rgba(255, 255, 255, 0.38);
  --xr-border-color: #1F1F1F;
  --xr-disabled-color: #515151;
  --xr-background-color: #111111;
  --xr-background-color-row-even: #111111;
  --xr-background-color-row-odd: #313131;
}

.xr-wrap {
  display: block !important;
  min-width: 300px;
  max-width: 700px;
}

.xr-text-repr-fallback {
  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */
  display: none;
}

.xr-header {
  padding-top: 6px;
  padding-bottom: 6px;
  margin-bottom: 4px;
  border-bottom: solid 1px var(--xr-border-color);
}

.xr-header > div,
.xr-header > ul {
  display: inline;
  margin-top: 0;
  margin-bottom: 0;
}

.xr-obj-type,
.xr-array-name {
  margin-left: 2px;
  margin-right: 10px;
}

.xr-obj-type {
  color: var(--xr-font-color2);
}

.xr-sections {
  padding-left: 0 !important;
  display: grid;
  grid-template-columns: 150px auto auto 1fr 20px 20px;
}

.xr-section-item {
  display: contents;
}

.xr-section-item input {
  display: none;
}

.xr-section-item input + label {
  color: var(--xr-disabled-color);
}

.xr-section-item input:enabled + label {
  cursor: pointer;
  color: var(--xr-font-color2);
}

.xr-section-item input:enabled + label:hover {
  color: var(--xr-font-color0);
}

.xr-section-summary {
  grid-column: 1;
  color: var(--xr-font-color2);
  font-weight: 500;
}

.xr-section-summary > span {
  display: inline-block;
  padding-left: 0.5em;
}

.xr-section-summary-in:disabled + label {
  color: var(--xr-font-color2);
}

.xr-section-summary-in + label:before {
  display: inline-block;
  content: '►';
  font-size: 11px;
  width: 15px;
  text-align: center;
}

.xr-section-summary-in:disabled + label:before {
  color: var(--xr-disabled-color);
}

.xr-section-summary-in:checked + label:before {
  content: '▼';
}

.xr-section-summary-in:checked + label > span {
  display: none;
}

.xr-section-summary,
.xr-section-inline-details {
  padding-top: 4px;
  padding-bottom: 4px;
}

.xr-section-inline-details {
  grid-column: 2 / -1;
}

.xr-section-details {
  display: none;
  grid-column: 1 / -1;
  margin-bottom: 5px;
}

.xr-section-summary-in:checked ~ .xr-section-details {
  display: contents;
}

.xr-array-wrap {
  grid-column: 1 / -1;
  display: grid;
  grid-template-columns: 20px auto;
}

.xr-array-wrap > label {
  grid-column: 1;
  vertical-align: top;
}

.xr-preview {
  color: var(--xr-font-color3);
}

.xr-array-preview,
.xr-array-data {
  padding: 0 5px !important;
  grid-column: 2;
}

.xr-array-data,
.xr-array-in:checked ~ .xr-array-preview {
  display: none;
}

.xr-array-in:checked ~ .xr-array-data,
.xr-array-preview {
  display: inline-block;
}

.xr-dim-list {
  display: inline-block !important;
  list-style: none;
  padding: 0 !important;
  margin: 0;
}

.xr-dim-list li {
  display: inline-block;
  padding: 0;
  margin: 0;
}

.xr-dim-list:before {
  content: '(';
}

.xr-dim-list:after {
  content: ')';
}

.xr-dim-list li:not(:last-child):after {
  content: ',';
  padding-right: 5px;
}

.xr-has-index {
  font-weight: bold;
}

.xr-var-list,
.xr-var-item {
  display: contents;
}

.xr-var-item > div,
.xr-var-item label,
.xr-var-item > .xr-var-name span {
  background-color: var(--xr-background-color-row-even);
  margin-bottom: 0;
}

.xr-var-item > .xr-var-name:hover span {
  padding-right: 5px;
}

.xr-var-list > li:nth-child(odd) > div,
.xr-var-list > li:nth-child(odd) > label,
.xr-var-list > li:nth-child(odd) > .xr-var-name span {
  background-color: var(--xr-background-color-row-odd);
}

.xr-var-name {
  grid-column: 1;
}

.xr-var-dims {
  grid-column: 2;
}

.xr-var-dtype {
  grid-column: 3;
  text-align: right;
  color: var(--xr-font-color2);
}

.xr-var-preview {
  grid-column: 4;
}

.xr-var-name,
.xr-var-dims,
.xr-var-dtype,
.xr-preview,
.xr-attrs dt {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  padding-right: 10px;
}

.xr-var-name:hover,
.xr-var-dims:hover,
.xr-var-dtype:hover,
.xr-attrs dt:hover {
  overflow: visible;
  width: auto;
  z-index: 1;
}

.xr-var-attrs,
.xr-var-data {
  display: none;
  background-color: var(--xr-background-color) !important;
  padding-bottom: 5px !important;
}

.xr-var-attrs-in:checked ~ .xr-var-attrs,
.xr-var-data-in:checked ~ .xr-var-data {
  display: block;
}

.xr-var-data > table {
  float: right;
}

.xr-var-name span,
.xr-var-data,
.xr-attrs {
  padding-left: 25px !important;
}

.xr-attrs,
.xr-var-attrs,
.xr-var-data {
  grid-column: 1 / -1;
}

dl.xr-attrs {
  padding: 0;
  margin: 0;
  display: grid;
  grid-template-columns: 125px auto;
}

.xr-attrs dt,
.xr-attrs dd {
  padding: 0;
  margin: 0;
  float: left;
  padding-right: 10px;
  width: auto;
}

.xr-attrs dt {
  font-weight: normal;
  grid-column: 1;
}

.xr-attrs dt:hover span {
  display: inline-block;
  background: var(--xr-background-color);
  padding-right: 10px;
}

.xr-attrs dd {
  grid-column: 2;
  white-space: pre-wrap;
  word-break: break-all;
}

.xr-icon-database,
.xr-icon-file-text2 {
  display: inline-block;
  vertical-align: middle;
  width: 1em;
  height: 1.5em !important;
  stroke-width: 0;
  stroke: currentColor;
  fill: currentColor;
}
</style><pre class="xr-text-repr-fallback">&lt;xarray.DataArray (y: 1176, x: 1464)&gt;
[1721664 values with dtype=int16]
Coordinates:
    band         int64 1
  * x            (x) float64 4.386e+05 4.387e+05 ... 4.679e+05 4.679e+05
  * y            (y) float64 4.513e+06 4.513e+06 ... 4.489e+06 4.489e+06
    spatial_ref  int64 0
Attributes:
    _FillValue:    -32768.0
    scale_factor:  1.0
    add_offset:    0.0</pre><div class="xr-wrap" style="display:none"><div class="xr-header"><div class="xr-obj-type">xarray.DataArray</div><div class="xr-array-name"></div><ul class="xr-dim-list"><li><span class="xr-has-index">y</span>: 1176</li><li><span class="xr-has-index">x</span>: 1464</li></ul></div><ul class="xr-sections"><li class="xr-section-item"><div class="xr-array-wrap"><input id="section-e014094f-1c17-49bd-9871-2f2de5a81e18" class="xr-array-in" type="checkbox" checked=""><label for="section-e014094f-1c17-49bd-9871-2f2de5a81e18" title="Show/hide data repr"><svg class="icon xr-icon-database"><use href="#icon-database"></use></svg></label><div class="xr-array-preview xr-preview"><span>...</span></div><div class="xr-array-data"><pre>[1721664 values with dtype=int16]</pre></div></div></li><li class="xr-section-item"><input id="section-56d72029-2147-4120-9bc3-21c90fc3d706" class="xr-section-summary-in" type="checkbox" checked=""><label for="section-56d72029-2147-4120-9bc3-21c90fc3d706" class="xr-section-summary">Coordinates: <span>(4)</span></label><div class="xr-section-inline-details"></div><div class="xr-section-details"><ul class="xr-var-list"><li class="xr-var-item"><div class="xr-var-name"><span>band</span></div><div class="xr-var-dims">()</div><div class="xr-var-dtype">int64</div><div class="xr-var-preview xr-preview">1</div><input id="attrs-325dbb1e-6d6e-49e6-bd7a-f1f6ca5d1fb8" class="xr-var-attrs-in" type="checkbox" disabled=""><label for="attrs-325dbb1e-6d6e-49e6-bd7a-f1f6ca5d1fb8" title="Show/Hide attributes"><svg class="icon xr-icon-file-text2"><use href="#icon-file-text2"></use></svg></label><input id="data-1178b7e4-e33f-47c8-8ab7-c8064eaf5a54" class="xr-var-data-in" type="checkbox"><label for="data-1178b7e4-e33f-47c8-8ab7-c8064eaf5a54" title="Show/Hide data repr"><svg class="icon xr-icon-database"><use href="#icon-database"></use></svg></label><div class="xr-var-attrs"><dl class="xr-attrs"></dl></div><div class="xr-var-data"><pre>array(1)</pre></div></li><li class="xr-var-item"><div class="xr-var-name"><span class="xr-has-index">x</span></div><div class="xr-var-dims">(x)</div><div class="xr-var-dtype">float64</div><div class="xr-var-preview xr-preview">4.386e+05 4.387e+05 ... 4.679e+05</div><input id="attrs-3e81945b-cb9d-48f0-b1a6-44278f908246" class="xr-var-attrs-in" type="checkbox" disabled=""><label for="attrs-3e81945b-cb9d-48f0-b1a6-44278f908246" title="Show/Hide attributes"><svg class="icon xr-icon-file-text2"><use href="#icon-file-text2"></use></svg></label><input id="data-f53c2bba-1547-42e1-826d-680c347b81a7" class="xr-var-data-in" type="checkbox"><label for="data-f53c2bba-1547-42e1-826d-680c347b81a7" title="Show/Hide data repr"><svg class="icon xr-icon-database"><use href="#icon-database"></use></svg></label><div class="xr-var-attrs"><dl class="xr-attrs"></dl></div><div class="xr-var-data"><pre>array([438642.315702, 438662.322106, 438682.328509, ..., 467871.671491,
       467891.677894, 467911.684298])</pre></div></li><li class="xr-var-item"><div class="xr-var-name"><span class="xr-has-index">y</span></div><div class="xr-var-dims">(y)</div><div class="xr-var-dtype">float64</div><div class="xr-var-preview xr-preview">4.513e+06 4.513e+06 ... 4.489e+06</div><input id="attrs-dfe782d7-2494-4721-958a-020f303bd691" class="xr-var-attrs-in" type="checkbox" disabled=""><label for="attrs-dfe782d7-2494-4721-958a-020f303bd691" title="Show/Hide attributes"><svg class="icon xr-icon-file-text2"><use href="#icon-file-text2"></use></svg></label><input id="data-ab6b2635-1e43-4c83-92ac-1fbc40dc403b" class="xr-var-data-in" type="checkbox"><label for="data-ab6b2635-1e43-4c83-92ac-1fbc40dc403b" title="Show/Hide data repr"><svg class="icon xr-icon-database"><use href="#icon-database"></use></svg></label><div class="xr-var-attrs"><dl class="xr-attrs"></dl></div><div class="xr-var-data"><pre>array([4512700.72858, 4512680.72734, 4512660.7261 , ..., 4489239.2739 ,
       4489219.27266, 4489199.27142])</pre></div></li><li class="xr-var-item"><div class="xr-var-name"><span>spatial_ref</span></div><div class="xr-var-dims">()</div><div class="xr-var-dtype">int64</div><div class="xr-var-preview xr-preview">0</div><input id="attrs-4fb5df32-9f9c-4e1b-997a-57645c910fad" class="xr-var-attrs-in" type="checkbox"><label for="attrs-4fb5df32-9f9c-4e1b-997a-57645c910fad" title="Show/Hide attributes"><svg class="icon xr-icon-file-text2"><use href="#icon-file-text2"></use></svg></label><input id="data-b473d0d3-55e1-4a7e-93ae-d7c8b1bb3717" class="xr-var-data-in" type="checkbox"><label for="data-b473d0d3-55e1-4a7e-93ae-d7c8b1bb3717" title="Show/Hide data repr"><svg class="icon xr-icon-database"><use href="#icon-database"></use></svg></label><div class="xr-var-attrs"><dl class="xr-attrs"><dt><span>crs_wkt :</span></dt><dd>PROJCS["WGS 84 / UTM zone 33N",GEOGCS["WGS 84",DATUM["WGS_1984",SPHEROID["WGS 84",6378137,298.257223563,AUTHORITY["EPSG","7030"]],AUTHORITY["EPSG","6326"]],PRIMEM["Greenwich",0,AUTHORITY["EPSG","8901"]],UNIT["degree",0.0174532925199433,AUTHORITY["EPSG","9122"]],AUTHORITY["EPSG","4326"]],PROJECTION["Transverse_Mercator"],PARAMETER["latitude_of_origin",0],PARAMETER["central_meridian",15],PARAMETER["scale_factor",0.9996],PARAMETER["false_easting",500000],PARAMETER["false_northing",0],UNIT["metre",1,AUTHORITY["EPSG","9001"]],AXIS["Easting",EAST],AXIS["Northing",NORTH],AUTHORITY["EPSG","32633"]]</dd><dt><span>semi_major_axis :</span></dt><dd>6378137.0</dd><dt><span>semi_minor_axis :</span></dt><dd>6356752.314245179</dd><dt><span>inverse_flattening :</span></dt><dd>298.257223563</dd><dt><span>reference_ellipsoid_name :</span></dt><dd>WGS 84</dd><dt><span>longitude_of_prime_meridian :</span></dt><dd>0.0</dd><dt><span>prime_meridian_name :</span></dt><dd>Greenwich</dd><dt><span>geographic_crs_name :</span></dt><dd>WGS 84</dd><dt><span>horizontal_datum_name :</span></dt><dd>World Geodetic System 1984</dd><dt><span>projected_crs_name :</span></dt><dd>WGS 84 / UTM zone 33N</dd><dt><span>grid_mapping_name :</span></dt><dd>transverse_mercator</dd><dt><span>latitude_of_projection_origin :</span></dt><dd>0.0</dd><dt><span>longitude_of_central_meridian :</span></dt><dd>15.0</dd><dt><span>false_easting :</span></dt><dd>500000.0</dd><dt><span>false_northing :</span></dt><dd>0.0</dd><dt><span>scale_factor_at_central_meridian :</span></dt><dd>0.9996</dd><dt><span>spatial_ref :</span></dt><dd>PROJCS["WGS 84 / UTM zone 33N",GEOGCS["WGS 84",DATUM["WGS_1984",SPHEROID["WGS 84",6378137,298.257223563,AUTHORITY["EPSG","7030"]],AUTHORITY["EPSG","6326"]],PRIMEM["Greenwich",0,AUTHORITY["EPSG","8901"]],UNIT["degree",0.0174532925199433,AUTHORITY["EPSG","9122"]],AUTHORITY["EPSG","4326"]],PROJECTION["Transverse_Mercator"],PARAMETER["latitude_of_origin",0],PARAMETER["central_meridian",15],PARAMETER["scale_factor",0.9996],PARAMETER["false_easting",500000],PARAMETER["false_northing",0],UNIT["metre",1,AUTHORITY["EPSG","9001"]],AXIS["Easting",EAST],AXIS["Northing",NORTH],AUTHORITY["EPSG","32633"]]</dd><dt><span>GeoTransform :</span></dt><dd>438632.3125 20.00640368852459 0.0 4512710.7292 0.0 -20.001240136054324</dd></dl></div><div class="xr-var-data"><pre>array(0)</pre></div></li></ul></div></li><li class="xr-section-item"><input id="section-6aa4d46a-9d06-46ed-b324-34ea68a3d8f6" class="xr-section-summary-in" type="checkbox" checked=""><label for="section-6aa4d46a-9d06-46ed-b324-34ea68a3d8f6" class="xr-section-summary">Attributes: <span>(3)</span></label><div class="xr-section-inline-details"></div><div class="xr-section-details"><dl class="xr-attrs"><dt><span>_FillValue :</span></dt><dd>-32768.0</dd><dt><span>scale_factor :</span></dt><dd>1.0</dd><dt><span>add_offset :</span></dt><dd>0.0</dd></dl></div></li></ul></div></div>
</div>
</div>
<p>Il vettore dei punti è molto semplice, ha una colonna con le geometrie ed una che identifica il singolo punto; quest’ultima informazione la userò più avanti. Il DEM è rettangolare e monobanda ed in effetti mi aspetto che sia monobanda poichè è quella che contiene le informazioni altimetriche in questo caso, con <code>squeeze()</code> estraggo la banda.</p>
<p>Il DEM ha come valore minimo di quota 0 metri, ma quale è la quota massima?</p>
<div class="cell" data-execution_count="5">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">max_h <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">int</span>(raster.<span class="bu" style="color: null;">max</span>().data)</span>
<span id="cb5-2"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'La quota massima è </span><span class="sc" style="color: #5E5E5E;">{</span>max_h<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> metri'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>La quota massima è 1429 metri</code></pre>
</div>
</div>
<section id="visualizzazione-dei-dati-grezzi" class="level2">
<h2 class="anchored" data-anchor-id="visualizzazione-dei-dati-grezzi">1.1 Visualizzazione dei dati grezzi</h2>
<div class="cell" data-execution_count="6">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">raster_data <span class="op" style="color: #5E5E5E;">=</span> rio.<span class="bu" style="color: null;">open</span>(dem)</span>
<span id="cb7-2"></span>
<span id="cb7-3">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>))</span>
<span id="cb7-4">show(</span>
<span id="cb7-5">    source<span class="op" style="color: #5E5E5E;">=</span>raster_data,</span>
<span id="cb7-6">    cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'tab20c_r'</span>,</span>
<span id="cb7-7">    contour<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>,</span>
<span id="cb7-8">    ax<span class="op" style="color: #5E5E5E;">=</span>ax,</span>
<span id="cb7-9">    transform<span class="op" style="color: #5E5E5E;">=</span>raster_data.transform</span>
<span id="cb7-10">)</span>
<span id="cb7-11">show(</span>
<span id="cb7-12">    source<span class="op" style="color: #5E5E5E;">=</span>raster_data,</span>
<span id="cb7-13">    cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'terrain_r'</span>,</span>
<span id="cb7-14">    ax<span class="op" style="color: #5E5E5E;">=</span>ax,</span>
<span id="cb7-15">    transform<span class="op" style="color: #5E5E5E;">=</span>raster_data.transform</span>
<span id="cb7-16">)</span>
<span id="cb7-17"><span class="cf" style="color: #003B4F;">for</span> _index, row <span class="kw" style="color: #003B4F;">in</span> points_data.iterrows():</span>
<span id="cb7-18">    coordinates <span class="op" style="color: #5E5E5E;">=</span> row.geometry.xy</span>
<span id="cb7-19">    ax.scatter(</span>
<span id="cb7-20">        <span class="op" style="color: #5E5E5E;">*</span>coordinates,</span>
<span id="cb7-21">        s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1000</span>,</span>
<span id="cb7-22">        marker<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"*"</span>,</span>
<span id="cb7-23">        facecolor<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'red'</span>,</span>
<span id="cb7-24">        edgecolor<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'black'</span></span>
<span id="cb7-25">    )</span>
<span id="cb7-26">    plt.text(</span>
<span id="cb7-27">        x<span class="op" style="color: #5E5E5E;">=</span>coordinates[<span class="dv" style="color: #AD0000;">0</span>][<span class="dv" style="color: #AD0000;">0</span>],</span>
<span id="cb7-28">        y<span class="op" style="color: #5E5E5E;">=</span>coordinates[<span class="dv" style="color: #AD0000;">1</span>][<span class="dv" style="color: #AD0000;">0</span>],</span>
<span id="cb7-29">        s<span class="op" style="color: #5E5E5E;">=</span>row.fid,</span>
<span id="cb7-30">        fontdict<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">dict</span>(color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'black'</span>, size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>),</span>
<span id="cb7-31">        bbox<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">dict</span>(facecolor<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'white'</span>, alpha<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.75</span>)</span>
<span id="cb7-32">    )</span>
<span id="cb7-33">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://pygisblog.massimilianomoraca.me/posts/2022-04-07/analisi-di-visibilita_files/figure-html/cell-7-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
</section>
<section id="analisi-su-un-singolo-punto" class="level1">
<h1>2. Analisi su un singolo punto</h1>
<div class="cell" data-execution_count="7">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">single_point <span class="op" style="color: #5E5E5E;">=</span> points_data[points_data[<span class="st" style="color: #20794D;">'fid'</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">11</span>]</span>
<span id="cb8-2">single_point</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="7">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>fid</th>
      <th>geometry</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>10</th>
      <td>11</td>
      <td>POINT (456914.431 4498265.587)</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>Ho selezionato solo il punto con id 11, è quello che ho usato nell’articolo del mio blog. Prima di partire con l’analisi è bene sapere che il risultato di una analisi di visibilità, detta anche <em>viewshed</em>, è un raster con valori che vanno da 0 a 180. Questi sono gradi e fanno riferimento alla visuale verticale dal punto di osservazione. Un valore pari a 0° sta ad indicare che quel pixel è proprio sotto il punto di osservazione, un valore pari a 90° sta a significare che il pixel è sull’orizzonte del punto di osservazione ed un valore pari a 180°, di conseguenza, indica che il pixel è proprio sopra il punto di osservazione.</p>
<div class="cell" data-execution_count="8">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">make_hillshade <span class="op" style="color: #5E5E5E;">=</span> hillshade(raster)</span>
<span id="cb9-2"></span>
<span id="cb9-3">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">10</span>))</span>
<span id="cb9-4">imshow(</span>
<span id="cb9-5">    make_hillshade,</span>
<span id="cb9-6">    ax<span class="op" style="color: #5E5E5E;">=</span>ax,</span>
<span id="cb9-7">    cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'gist_gray'</span>,</span>
<span id="cb9-8">)</span>
<span id="cb9-9">imshow(</span>
<span id="cb9-10">    raster,</span>
<span id="cb9-11">    ax<span class="op" style="color: #5E5E5E;">=</span>ax,</span>
<span id="cb9-12">    cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'terrain'</span>,</span>
<span id="cb9-13">    vmin<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb9-14">    vmax<span class="op" style="color: #5E5E5E;">=</span>max_h,</span>
<span id="cb9-15">    levels<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>,</span>
<span id="cb9-16">    alpha<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.75</span></span>
<span id="cb9-17">)</span>
<span id="cb9-18"><span class="cf" style="color: #003B4F;">for</span> _index, row <span class="kw" style="color: #003B4F;">in</span> single_point.iterrows():</span>
<span id="cb9-19">    coordinates <span class="op" style="color: #5E5E5E;">=</span> row.geometry.xy</span>
<span id="cb9-20">    ax.scatter(</span>
<span id="cb9-21">        <span class="op" style="color: #5E5E5E;">*</span>coordinates,</span>
<span id="cb9-22">        s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1000</span>,</span>
<span id="cb9-23">        marker<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"*"</span>,</span>
<span id="cb9-24">        facecolor<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'red'</span>,</span>
<span id="cb9-25">        edgecolor<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'black'</span></span>
<span id="cb9-26">    )</span>
<span id="cb9-27">    plt.text(</span>
<span id="cb9-28">        x<span class="op" style="color: #5E5E5E;">=</span>coordinates[<span class="dv" style="color: #AD0000;">0</span>][<span class="dv" style="color: #AD0000;">0</span>],</span>
<span id="cb9-29">        y<span class="op" style="color: #5E5E5E;">=</span>coordinates[<span class="dv" style="color: #AD0000;">1</span>][<span class="dv" style="color: #AD0000;">0</span>],</span>
<span id="cb9-30">        s<span class="op" style="color: #5E5E5E;">=</span>row.fid,</span>
<span id="cb9-31">        fontdict<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">dict</span>(color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'black'</span>, size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>),</span>
<span id="cb9-32">        bbox<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">dict</span>(facecolor<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'white'</span>, alpha<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.75</span>)</span>
<span id="cb9-33">    )</span>
<span id="cb9-34"></span>
<span id="cb9-35">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://pygisblog.massimilianomoraca.me/posts/2022-04-07/analisi-di-visibilita_files/figure-html/cell-9-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Per una migliore resa visiva ho inserito la hillshade sotto al DEM tematizzato. Questa volta anzicchè usare la funzione <code>show</code> di <em>rasterio</em> ho preferito usare <code>imshow</code> di <em>xarray</em> per sperimentarla un po’ visto che non l’avevo mai usata. E’ interessante il fatto che aggiunga automaticamente la <code>colorbar</code> per ogni raster, devo capire come fare in modo che non venga visualizzata sempre e come disporla in altro modo.</p>
<section id="quota-dellosservatore" class="level2">
<h2 class="anchored" data-anchor-id="quota-dellosservatore">2.1 Quota dell’osservatore</h2>
<p>La quota dell’osservatore è un dato fondamentale per portare a termine una analisi di visibilità. Può essere la quota del punto in cui si trova l’osservatore o una quota fittizia compatibile con la topografia dell’area(l’osservatore fittizio non può essere a 100 metri di altezza se stiamo esaminando un’area in cui la quota minima è 500 metri). Quello che manca nei miei dati è proprio la quota!</p>
<p>Ma non è un problema perchè mi viene in soccorso <a href="https://maxdragonheart.github.io/PyGIS-Blog/point/2022/03/31/da-point-a-pointz.html">un’esperianza</a> già fatta di recente e che vado a riprodurre:</p>
<div class="cell" data-execution_count="9">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">x_coord <span class="op" style="color: #5E5E5E;">=</span> single_point.iloc[<span class="dv" style="color: #AD0000;">0</span>].geometry.xy[<span class="dv" style="color: #AD0000;">0</span>][<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb10-2">y_coord <span class="op" style="color: #5E5E5E;">=</span> single_point.iloc[<span class="dv" style="color: #AD0000;">0</span>].geometry.xy[<span class="dv" style="color: #AD0000;">1</span>][<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb10-3"></span>
<span id="cb10-4">dataarray_value <span class="op" style="color: #5E5E5E;">=</span> raster.sel(x<span class="op" style="color: #5E5E5E;">=</span>x_coord, y<span class="op" style="color: #5E5E5E;">=</span>y_coord, method<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"nearest"</span>)</span>
<span id="cb10-5">pixel_value <span class="op" style="color: #5E5E5E;">=</span> dataarray_value.data</span>
<span id="cb10-6"></span>
<span id="cb10-7">pixel_value</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>array(450, dtype=int16)</code></pre>
</div>
</div>
<p>Ora che ho tutto quello che mi serve posso effettuare l’analisi di visibilità.</p>
<div class="cell" data-execution_count="10">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">view <span class="op" style="color: #5E5E5E;">=</span> viewshed(raster, x<span class="op" style="color: #5E5E5E;">=</span>x_coord, y<span class="op" style="color: #5E5E5E;">=</span>y_coord, observer_elev<span class="op" style="color: #5E5E5E;">=</span>pixel_value)</span>
<span id="cb12-2">view</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="10">

<div><svg style="position: absolute; width: 0; height: 0; overflow: hidden">
<defs>
<symbol id="icon-database" viewbox="0 0 32 32">
<path d="M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z"></path>
<path d="M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
<path d="M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
</symbol>
<symbol id="icon-file-text2" viewbox="0 0 32 32">
<path d="M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z"></path>
<path d="M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
<path d="M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
<path d="M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
</symbol>
</defs>
</svg>
<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.
 *
 */

:root {
  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));
  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));
  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));
  --xr-border-color: var(--jp-border-color2, #e0e0e0);
  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);
  --xr-background-color: var(--jp-layout-color0, white);
  --xr-background-color-row-even: var(--jp-layout-color1, white);
  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);
}

html[theme=dark],
body.vscode-dark {
  --xr-font-color0: rgba(255, 255, 255, 1);
  --xr-font-color2: rgba(255, 255, 255, 0.54);
  --xr-font-color3: rgba(255, 255, 255, 0.38);
  --xr-border-color: #1F1F1F;
  --xr-disabled-color: #515151;
  --xr-background-color: #111111;
  --xr-background-color-row-even: #111111;
  --xr-background-color-row-odd: #313131;
}

.xr-wrap {
  display: block !important;
  min-width: 300px;
  max-width: 700px;
}

.xr-text-repr-fallback {
  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */
  display: none;
}

.xr-header {
  padding-top: 6px;
  padding-bottom: 6px;
  margin-bottom: 4px;
  border-bottom: solid 1px var(--xr-border-color);
}

.xr-header > div,
.xr-header > ul {
  display: inline;
  margin-top: 0;
  margin-bottom: 0;
}

.xr-obj-type,
.xr-array-name {
  margin-left: 2px;
  margin-right: 10px;
}

.xr-obj-type {
  color: var(--xr-font-color2);
}

.xr-sections {
  padding-left: 0 !important;
  display: grid;
  grid-template-columns: 150px auto auto 1fr 20px 20px;
}

.xr-section-item {
  display: contents;
}

.xr-section-item input {
  display: none;
}

.xr-section-item input + label {
  color: var(--xr-disabled-color);
}

.xr-section-item input:enabled + label {
  cursor: pointer;
  color: var(--xr-font-color2);
}

.xr-section-item input:enabled + label:hover {
  color: var(--xr-font-color0);
}

.xr-section-summary {
  grid-column: 1;
  color: var(--xr-font-color2);
  font-weight: 500;
}

.xr-section-summary > span {
  display: inline-block;
  padding-left: 0.5em;
}

.xr-section-summary-in:disabled + label {
  color: var(--xr-font-color2);
}

.xr-section-summary-in + label:before {
  display: inline-block;
  content: '►';
  font-size: 11px;
  width: 15px;
  text-align: center;
}

.xr-section-summary-in:disabled + label:before {
  color: var(--xr-disabled-color);
}

.xr-section-summary-in:checked + label:before {
  content: '▼';
}

.xr-section-summary-in:checked + label > span {
  display: none;
}

.xr-section-summary,
.xr-section-inline-details {
  padding-top: 4px;
  padding-bottom: 4px;
}

.xr-section-inline-details {
  grid-column: 2 / -1;
}

.xr-section-details {
  display: none;
  grid-column: 1 / -1;
  margin-bottom: 5px;
}

.xr-section-summary-in:checked ~ .xr-section-details {
  display: contents;
}

.xr-array-wrap {
  grid-column: 1 / -1;
  display: grid;
  grid-template-columns: 20px auto;
}

.xr-array-wrap > label {
  grid-column: 1;
  vertical-align: top;
}

.xr-preview {
  color: var(--xr-font-color3);
}

.xr-array-preview,
.xr-array-data {
  padding: 0 5px !important;
  grid-column: 2;
}

.xr-array-data,
.xr-array-in:checked ~ .xr-array-preview {
  display: none;
}

.xr-array-in:checked ~ .xr-array-data,
.xr-array-preview {
  display: inline-block;
}

.xr-dim-list {
  display: inline-block !important;
  list-style: none;
  padding: 0 !important;
  margin: 0;
}

.xr-dim-list li {
  display: inline-block;
  padding: 0;
  margin: 0;
}

.xr-dim-list:before {
  content: '(';
}

.xr-dim-list:after {
  content: ')';
}

.xr-dim-list li:not(:last-child):after {
  content: ',';
  padding-right: 5px;
}

.xr-has-index {
  font-weight: bold;
}

.xr-var-list,
.xr-var-item {
  display: contents;
}

.xr-var-item > div,
.xr-var-item label,
.xr-var-item > .xr-var-name span {
  background-color: var(--xr-background-color-row-even);
  margin-bottom: 0;
}

.xr-var-item > .xr-var-name:hover span {
  padding-right: 5px;
}

.xr-var-list > li:nth-child(odd) > div,
.xr-var-list > li:nth-child(odd) > label,
.xr-var-list > li:nth-child(odd) > .xr-var-name span {
  background-color: var(--xr-background-color-row-odd);
}

.xr-var-name {
  grid-column: 1;
}

.xr-var-dims {
  grid-column: 2;
}

.xr-var-dtype {
  grid-column: 3;
  text-align: right;
  color: var(--xr-font-color2);
}

.xr-var-preview {
  grid-column: 4;
}

.xr-var-name,
.xr-var-dims,
.xr-var-dtype,
.xr-preview,
.xr-attrs dt {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  padding-right: 10px;
}

.xr-var-name:hover,
.xr-var-dims:hover,
.xr-var-dtype:hover,
.xr-attrs dt:hover {
  overflow: visible;
  width: auto;
  z-index: 1;
}

.xr-var-attrs,
.xr-var-data {
  display: none;
  background-color: var(--xr-background-color) !important;
  padding-bottom: 5px !important;
}

.xr-var-attrs-in:checked ~ .xr-var-attrs,
.xr-var-data-in:checked ~ .xr-var-data {
  display: block;
}

.xr-var-data > table {
  float: right;
}

.xr-var-name span,
.xr-var-data,
.xr-attrs {
  padding-left: 25px !important;
}

.xr-attrs,
.xr-var-attrs,
.xr-var-data {
  grid-column: 1 / -1;
}

dl.xr-attrs {
  padding: 0;
  margin: 0;
  display: grid;
  grid-template-columns: 125px auto;
}

.xr-attrs dt,
.xr-attrs dd {
  padding: 0;
  margin: 0;
  float: left;
  padding-right: 10px;
  width: auto;
}

.xr-attrs dt {
  font-weight: normal;
  grid-column: 1;
}

.xr-attrs dt:hover span {
  display: inline-block;
  background: var(--xr-background-color);
  padding-right: 10px;
}

.xr-attrs dd {
  grid-column: 2;
  white-space: pre-wrap;
  word-break: break-all;
}

.xr-icon-database,
.xr-icon-file-text2 {
  display: inline-block;
  vertical-align: middle;
  width: 1em;
  height: 1.5em !important;
  stroke-width: 0;
  stroke: currentColor;
  fill: currentColor;
}
</style><pre class="xr-text-repr-fallback">&lt;xarray.DataArray (y: 1176, x: 1464)&gt;
array([[87.78651279, 87.78502168, 87.78352919, ..., -1.        ,
        -1.        , -1.        ],
       [87.78533465, 87.78384115, 87.78234627, ..., -1.        ,
        -1.        , -1.        ],
       [87.78415626, 87.78266038, 87.7811631 , ..., -1.        ,
        -1.        , -1.        ],
       ...,
       [87.47039509, 87.46816885, 87.46593917, ..., -1.        ,
        -1.        , -1.        ],
       [87.47149388, 87.46927054, 87.46704378, ..., -1.        ,
        -1.        , -1.        ],
       [87.47259367, 87.47037324, 87.46814939, ..., -1.        ,
        -1.        , -1.        ]])
Coordinates:
    band         int64 1
  * x            (x) float64 4.386e+05 4.387e+05 ... 4.679e+05 4.679e+05
  * y            (y) float64 4.513e+06 4.513e+06 ... 4.489e+06 4.489e+06
    spatial_ref  int64 0
Attributes:
    _FillValue:    -32768.0
    scale_factor:  1.0
    add_offset:    0.0</pre><div class="xr-wrap" style="display:none"><div class="xr-header"><div class="xr-obj-type">xarray.DataArray</div><div class="xr-array-name"></div><ul class="xr-dim-list"><li><span class="xr-has-index">y</span>: 1176</li><li><span class="xr-has-index">x</span>: 1464</li></ul></div><ul class="xr-sections"><li class="xr-section-item"><div class="xr-array-wrap"><input id="section-e77c1e50-1695-490a-8e63-469407fcc6ea" class="xr-array-in" type="checkbox" checked=""><label for="section-e77c1e50-1695-490a-8e63-469407fcc6ea" title="Show/hide data repr"><svg class="icon xr-icon-database"><use href="#icon-database"></use></svg></label><div class="xr-array-preview xr-preview"><span>87.79 87.79 87.78 87.78 87.78 87.78 ... -1.0 -1.0 -1.0 -1.0 -1.0 -1.0</span></div><div class="xr-array-data"><pre>array([[87.78651279, 87.78502168, 87.78352919, ..., -1.        ,
        -1.        , -1.        ],
       [87.78533465, 87.78384115, 87.78234627, ..., -1.        ,
        -1.        , -1.        ],
       [87.78415626, 87.78266038, 87.7811631 , ..., -1.        ,
        -1.        , -1.        ],
       ...,
       [87.47039509, 87.46816885, 87.46593917, ..., -1.        ,
        -1.        , -1.        ],
       [87.47149388, 87.46927054, 87.46704378, ..., -1.        ,
        -1.        , -1.        ],
       [87.47259367, 87.47037324, 87.46814939, ..., -1.        ,
        -1.        , -1.        ]])</pre></div></div></li><li class="xr-section-item"><input id="section-30b11ce9-d488-496a-8184-bc6a6a2e320f" class="xr-section-summary-in" type="checkbox" checked=""><label for="section-30b11ce9-d488-496a-8184-bc6a6a2e320f" class="xr-section-summary">Coordinates: <span>(4)</span></label><div class="xr-section-inline-details"></div><div class="xr-section-details"><ul class="xr-var-list"><li class="xr-var-item"><div class="xr-var-name"><span>band</span></div><div class="xr-var-dims">()</div><div class="xr-var-dtype">int64</div><div class="xr-var-preview xr-preview">1</div><input id="attrs-3fe79c7d-128b-4a73-86eb-3340a6a0ab70" class="xr-var-attrs-in" type="checkbox" disabled=""><label for="attrs-3fe79c7d-128b-4a73-86eb-3340a6a0ab70" title="Show/Hide attributes"><svg class="icon xr-icon-file-text2"><use href="#icon-file-text2"></use></svg></label><input id="data-914f1dc5-1644-4464-a072-f2a838c44d79" class="xr-var-data-in" type="checkbox"><label for="data-914f1dc5-1644-4464-a072-f2a838c44d79" title="Show/Hide data repr"><svg class="icon xr-icon-database"><use href="#icon-database"></use></svg></label><div class="xr-var-attrs"><dl class="xr-attrs"></dl></div><div class="xr-var-data"><pre>array(1)</pre></div></li><li class="xr-var-item"><div class="xr-var-name"><span class="xr-has-index">x</span></div><div class="xr-var-dims">(x)</div><div class="xr-var-dtype">float64</div><div class="xr-var-preview xr-preview">4.386e+05 4.387e+05 ... 4.679e+05</div><input id="attrs-0ade8806-5402-4f6a-8da0-60e93560e5b6" class="xr-var-attrs-in" type="checkbox" disabled=""><label for="attrs-0ade8806-5402-4f6a-8da0-60e93560e5b6" title="Show/Hide attributes"><svg class="icon xr-icon-file-text2"><use href="#icon-file-text2"></use></svg></label><input id="data-1ce98c68-154a-45e4-9203-2402cdbf51b4" class="xr-var-data-in" type="checkbox"><label for="data-1ce98c68-154a-45e4-9203-2402cdbf51b4" title="Show/Hide data repr"><svg class="icon xr-icon-database"><use href="#icon-database"></use></svg></label><div class="xr-var-attrs"><dl class="xr-attrs"></dl></div><div class="xr-var-data"><pre>array([438642.315702, 438662.322106, 438682.328509, ..., 467871.671491,
       467891.677894, 467911.684298])</pre></div></li><li class="xr-var-item"><div class="xr-var-name"><span class="xr-has-index">y</span></div><div class="xr-var-dims">(y)</div><div class="xr-var-dtype">float64</div><div class="xr-var-preview xr-preview">4.513e+06 4.513e+06 ... 4.489e+06</div><input id="attrs-8efe9ec0-f1e2-40b7-8815-e0565e227ff5" class="xr-var-attrs-in" type="checkbox" disabled=""><label for="attrs-8efe9ec0-f1e2-40b7-8815-e0565e227ff5" title="Show/Hide attributes"><svg class="icon xr-icon-file-text2"><use href="#icon-file-text2"></use></svg></label><input id="data-dec770ea-29e3-4ee8-8976-cfc2da9ff809" class="xr-var-data-in" type="checkbox"><label for="data-dec770ea-29e3-4ee8-8976-cfc2da9ff809" title="Show/Hide data repr"><svg class="icon xr-icon-database"><use href="#icon-database"></use></svg></label><div class="xr-var-attrs"><dl class="xr-attrs"></dl></div><div class="xr-var-data"><pre>array([4512700.72858, 4512680.72734, 4512660.7261 , ..., 4489239.2739 ,
       4489219.27266, 4489199.27142])</pre></div></li><li class="xr-var-item"><div class="xr-var-name"><span>spatial_ref</span></div><div class="xr-var-dims">()</div><div class="xr-var-dtype">int64</div><div class="xr-var-preview xr-preview">0</div><input id="attrs-13d399e7-dc29-4885-a10c-db8f84c2e59b" class="xr-var-attrs-in" type="checkbox"><label for="attrs-13d399e7-dc29-4885-a10c-db8f84c2e59b" title="Show/Hide attributes"><svg class="icon xr-icon-file-text2"><use href="#icon-file-text2"></use></svg></label><input id="data-0b6c748f-0687-467f-ab9f-f4b40150a9b0" class="xr-var-data-in" type="checkbox"><label for="data-0b6c748f-0687-467f-ab9f-f4b40150a9b0" title="Show/Hide data repr"><svg class="icon xr-icon-database"><use href="#icon-database"></use></svg></label><div class="xr-var-attrs"><dl class="xr-attrs"><dt><span>crs_wkt :</span></dt><dd>PROJCS["WGS 84 / UTM zone 33N",GEOGCS["WGS 84",DATUM["WGS_1984",SPHEROID["WGS 84",6378137,298.257223563,AUTHORITY["EPSG","7030"]],AUTHORITY["EPSG","6326"]],PRIMEM["Greenwich",0,AUTHORITY["EPSG","8901"]],UNIT["degree",0.0174532925199433,AUTHORITY["EPSG","9122"]],AUTHORITY["EPSG","4326"]],PROJECTION["Transverse_Mercator"],PARAMETER["latitude_of_origin",0],PARAMETER["central_meridian",15],PARAMETER["scale_factor",0.9996],PARAMETER["false_easting",500000],PARAMETER["false_northing",0],UNIT["metre",1,AUTHORITY["EPSG","9001"]],AXIS["Easting",EAST],AXIS["Northing",NORTH],AUTHORITY["EPSG","32633"]]</dd><dt><span>semi_major_axis :</span></dt><dd>6378137.0</dd><dt><span>semi_minor_axis :</span></dt><dd>6356752.314245179</dd><dt><span>inverse_flattening :</span></dt><dd>298.257223563</dd><dt><span>reference_ellipsoid_name :</span></dt><dd>WGS 84</dd><dt><span>longitude_of_prime_meridian :</span></dt><dd>0.0</dd><dt><span>prime_meridian_name :</span></dt><dd>Greenwich</dd><dt><span>geographic_crs_name :</span></dt><dd>WGS 84</dd><dt><span>horizontal_datum_name :</span></dt><dd>World Geodetic System 1984</dd><dt><span>projected_crs_name :</span></dt><dd>WGS 84 / UTM zone 33N</dd><dt><span>grid_mapping_name :</span></dt><dd>transverse_mercator</dd><dt><span>latitude_of_projection_origin :</span></dt><dd>0.0</dd><dt><span>longitude_of_central_meridian :</span></dt><dd>15.0</dd><dt><span>false_easting :</span></dt><dd>500000.0</dd><dt><span>false_northing :</span></dt><dd>0.0</dd><dt><span>scale_factor_at_central_meridian :</span></dt><dd>0.9996</dd><dt><span>spatial_ref :</span></dt><dd>PROJCS["WGS 84 / UTM zone 33N",GEOGCS["WGS 84",DATUM["WGS_1984",SPHEROID["WGS 84",6378137,298.257223563,AUTHORITY["EPSG","7030"]],AUTHORITY["EPSG","6326"]],PRIMEM["Greenwich",0,AUTHORITY["EPSG","8901"]],UNIT["degree",0.0174532925199433,AUTHORITY["EPSG","9122"]],AUTHORITY["EPSG","4326"]],PROJECTION["Transverse_Mercator"],PARAMETER["latitude_of_origin",0],PARAMETER["central_meridian",15],PARAMETER["scale_factor",0.9996],PARAMETER["false_easting",500000],PARAMETER["false_northing",0],UNIT["metre",1,AUTHORITY["EPSG","9001"]],AXIS["Easting",EAST],AXIS["Northing",NORTH],AUTHORITY["EPSG","32633"]]</dd><dt><span>GeoTransform :</span></dt><dd>438632.3125 20.00640368852459 0.0 4512710.7292 0.0 -20.001240136054324</dd></dl></div><div class="xr-var-data"><pre>array(0)</pre></div></li></ul></div></li><li class="xr-section-item"><input id="section-cce3e193-4f07-44f3-ab7b-b16720e0e21d" class="xr-section-summary-in" type="checkbox" checked=""><label for="section-cce3e193-4f07-44f3-ab7b-b16720e0e21d" class="xr-section-summary">Attributes: <span>(3)</span></label><div class="xr-section-inline-details"></div><div class="xr-section-details"><dl class="xr-attrs"><dt><span>_FillValue :</span></dt><dd>-32768.0</dd><dt><span>scale_factor :</span></dt><dd>1.0</dd><dt><span>add_offset :</span></dt><dd>0.0</dd></dl></div></li></ul></div></div>
</div>
</div>
<div class="cell" data-execution_count="11">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">view_sel <span class="op" style="color: #5E5E5E;">=</span> view.where(view <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb13-2">view_sel</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="11">

<div><svg style="position: absolute; width: 0; height: 0; overflow: hidden">
<defs>
<symbol id="icon-database" viewbox="0 0 32 32">
<path d="M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z"></path>
<path d="M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
<path d="M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
</symbol>
<symbol id="icon-file-text2" viewbox="0 0 32 32">
<path d="M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z"></path>
<path d="M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
<path d="M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
<path d="M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
</symbol>
</defs>
</svg>
<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.
 *
 */

:root {
  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));
  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));
  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));
  --xr-border-color: var(--jp-border-color2, #e0e0e0);
  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);
  --xr-background-color: var(--jp-layout-color0, white);
  --xr-background-color-row-even: var(--jp-layout-color1, white);
  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);
}

html[theme=dark],
body.vscode-dark {
  --xr-font-color0: rgba(255, 255, 255, 1);
  --xr-font-color2: rgba(255, 255, 255, 0.54);
  --xr-font-color3: rgba(255, 255, 255, 0.38);
  --xr-border-color: #1F1F1F;
  --xr-disabled-color: #515151;
  --xr-background-color: #111111;
  --xr-background-color-row-even: #111111;
  --xr-background-color-row-odd: #313131;
}

.xr-wrap {
  display: block !important;
  min-width: 300px;
  max-width: 700px;
}

.xr-text-repr-fallback {
  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */
  display: none;
}

.xr-header {
  padding-top: 6px;
  padding-bottom: 6px;
  margin-bottom: 4px;
  border-bottom: solid 1px var(--xr-border-color);
}

.xr-header > div,
.xr-header > ul {
  display: inline;
  margin-top: 0;
  margin-bottom: 0;
}

.xr-obj-type,
.xr-array-name {
  margin-left: 2px;
  margin-right: 10px;
}

.xr-obj-type {
  color: var(--xr-font-color2);
}

.xr-sections {
  padding-left: 0 !important;
  display: grid;
  grid-template-columns: 150px auto auto 1fr 20px 20px;
}

.xr-section-item {
  display: contents;
}

.xr-section-item input {
  display: none;
}

.xr-section-item input + label {
  color: var(--xr-disabled-color);
}

.xr-section-item input:enabled + label {
  cursor: pointer;
  color: var(--xr-font-color2);
}

.xr-section-item input:enabled + label:hover {
  color: var(--xr-font-color0);
}

.xr-section-summary {
  grid-column: 1;
  color: var(--xr-font-color2);
  font-weight: 500;
}

.xr-section-summary > span {
  display: inline-block;
  padding-left: 0.5em;
}

.xr-section-summary-in:disabled + label {
  color: var(--xr-font-color2);
}

.xr-section-summary-in + label:before {
  display: inline-block;
  content: '►';
  font-size: 11px;
  width: 15px;
  text-align: center;
}

.xr-section-summary-in:disabled + label:before {
  color: var(--xr-disabled-color);
}

.xr-section-summary-in:checked + label:before {
  content: '▼';
}

.xr-section-summary-in:checked + label > span {
  display: none;
}

.xr-section-summary,
.xr-section-inline-details {
  padding-top: 4px;
  padding-bottom: 4px;
}

.xr-section-inline-details {
  grid-column: 2 / -1;
}

.xr-section-details {
  display: none;
  grid-column: 1 / -1;
  margin-bottom: 5px;
}

.xr-section-summary-in:checked ~ .xr-section-details {
  display: contents;
}

.xr-array-wrap {
  grid-column: 1 / -1;
  display: grid;
  grid-template-columns: 20px auto;
}

.xr-array-wrap > label {
  grid-column: 1;
  vertical-align: top;
}

.xr-preview {
  color: var(--xr-font-color3);
}

.xr-array-preview,
.xr-array-data {
  padding: 0 5px !important;
  grid-column: 2;
}

.xr-array-data,
.xr-array-in:checked ~ .xr-array-preview {
  display: none;
}

.xr-array-in:checked ~ .xr-array-data,
.xr-array-preview {
  display: inline-block;
}

.xr-dim-list {
  display: inline-block !important;
  list-style: none;
  padding: 0 !important;
  margin: 0;
}

.xr-dim-list li {
  display: inline-block;
  padding: 0;
  margin: 0;
}

.xr-dim-list:before {
  content: '(';
}

.xr-dim-list:after {
  content: ')';
}

.xr-dim-list li:not(:last-child):after {
  content: ',';
  padding-right: 5px;
}

.xr-has-index {
  font-weight: bold;
}

.xr-var-list,
.xr-var-item {
  display: contents;
}

.xr-var-item > div,
.xr-var-item label,
.xr-var-item > .xr-var-name span {
  background-color: var(--xr-background-color-row-even);
  margin-bottom: 0;
}

.xr-var-item > .xr-var-name:hover span {
  padding-right: 5px;
}

.xr-var-list > li:nth-child(odd) > div,
.xr-var-list > li:nth-child(odd) > label,
.xr-var-list > li:nth-child(odd) > .xr-var-name span {
  background-color: var(--xr-background-color-row-odd);
}

.xr-var-name {
  grid-column: 1;
}

.xr-var-dims {
  grid-column: 2;
}

.xr-var-dtype {
  grid-column: 3;
  text-align: right;
  color: var(--xr-font-color2);
}

.xr-var-preview {
  grid-column: 4;
}

.xr-var-name,
.xr-var-dims,
.xr-var-dtype,
.xr-preview,
.xr-attrs dt {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  padding-right: 10px;
}

.xr-var-name:hover,
.xr-var-dims:hover,
.xr-var-dtype:hover,
.xr-attrs dt:hover {
  overflow: visible;
  width: auto;
  z-index: 1;
}

.xr-var-attrs,
.xr-var-data {
  display: none;
  background-color: var(--xr-background-color) !important;
  padding-bottom: 5px !important;
}

.xr-var-attrs-in:checked ~ .xr-var-attrs,
.xr-var-data-in:checked ~ .xr-var-data {
  display: block;
}

.xr-var-data > table {
  float: right;
}

.xr-var-name span,
.xr-var-data,
.xr-attrs {
  padding-left: 25px !important;
}

.xr-attrs,
.xr-var-attrs,
.xr-var-data {
  grid-column: 1 / -1;
}

dl.xr-attrs {
  padding: 0;
  margin: 0;
  display: grid;
  grid-template-columns: 125px auto;
}

.xr-attrs dt,
.xr-attrs dd {
  padding: 0;
  margin: 0;
  float: left;
  padding-right: 10px;
  width: auto;
}

.xr-attrs dt {
  font-weight: normal;
  grid-column: 1;
}

.xr-attrs dt:hover span {
  display: inline-block;
  background: var(--xr-background-color);
  padding-right: 10px;
}

.xr-attrs dd {
  grid-column: 2;
  white-space: pre-wrap;
  word-break: break-all;
}

.xr-icon-database,
.xr-icon-file-text2 {
  display: inline-block;
  vertical-align: middle;
  width: 1em;
  height: 1.5em !important;
  stroke-width: 0;
  stroke: currentColor;
  fill: currentColor;
}
</style><pre class="xr-text-repr-fallback">&lt;xarray.DataArray (y: 1176, x: 1464)&gt;
array([[87.78651279, 87.78502168, 87.78352919, ...,         nan,
                nan,         nan],
       [87.78533465, 87.78384115, 87.78234627, ...,         nan,
                nan,         nan],
       [87.78415626, 87.78266038, 87.7811631 , ...,         nan,
                nan,         nan],
       ...,
       [87.47039509, 87.46816885, 87.46593917, ...,         nan,
                nan,         nan],
       [87.47149388, 87.46927054, 87.46704378, ...,         nan,
                nan,         nan],
       [87.47259367, 87.47037324, 87.46814939, ...,         nan,
                nan,         nan]])
Coordinates:
    band         int64 1
  * x            (x) float64 4.386e+05 4.387e+05 ... 4.679e+05 4.679e+05
  * y            (y) float64 4.513e+06 4.513e+06 ... 4.489e+06 4.489e+06
    spatial_ref  int64 0
Attributes:
    _FillValue:    -32768.0
    scale_factor:  1.0
    add_offset:    0.0</pre><div class="xr-wrap" style="display:none"><div class="xr-header"><div class="xr-obj-type">xarray.DataArray</div><div class="xr-array-name"></div><ul class="xr-dim-list"><li><span class="xr-has-index">y</span>: 1176</li><li><span class="xr-has-index">x</span>: 1464</li></ul></div><ul class="xr-sections"><li class="xr-section-item"><div class="xr-array-wrap"><input id="section-31b28940-1b1e-4935-8ad8-5c13cd013318" class="xr-array-in" type="checkbox" checked=""><label for="section-31b28940-1b1e-4935-8ad8-5c13cd013318" title="Show/hide data repr"><svg class="icon xr-icon-database"><use href="#icon-database"></use></svg></label><div class="xr-array-preview xr-preview"><span>87.79 87.79 87.78 87.78 87.78 87.78 87.78 ... nan nan nan nan nan nan</span></div><div class="xr-array-data"><pre>array([[87.78651279, 87.78502168, 87.78352919, ...,         nan,
                nan,         nan],
       [87.78533465, 87.78384115, 87.78234627, ...,         nan,
                nan,         nan],
       [87.78415626, 87.78266038, 87.7811631 , ...,         nan,
                nan,         nan],
       ...,
       [87.47039509, 87.46816885, 87.46593917, ...,         nan,
                nan,         nan],
       [87.47149388, 87.46927054, 87.46704378, ...,         nan,
                nan,         nan],
       [87.47259367, 87.47037324, 87.46814939, ...,         nan,
                nan,         nan]])</pre></div></div></li><li class="xr-section-item"><input id="section-416c4edd-333c-4ce3-867e-cdd041488642" class="xr-section-summary-in" type="checkbox" checked=""><label for="section-416c4edd-333c-4ce3-867e-cdd041488642" class="xr-section-summary">Coordinates: <span>(4)</span></label><div class="xr-section-inline-details"></div><div class="xr-section-details"><ul class="xr-var-list"><li class="xr-var-item"><div class="xr-var-name"><span>band</span></div><div class="xr-var-dims">()</div><div class="xr-var-dtype">int64</div><div class="xr-var-preview xr-preview">1</div><input id="attrs-8917b30c-78af-4b34-84e7-ad69d4f8f2c9" class="xr-var-attrs-in" type="checkbox" disabled=""><label for="attrs-8917b30c-78af-4b34-84e7-ad69d4f8f2c9" title="Show/Hide attributes"><svg class="icon xr-icon-file-text2"><use href="#icon-file-text2"></use></svg></label><input id="data-76f907af-1f05-4c8b-a8e4-416ede1ba7ad" class="xr-var-data-in" type="checkbox"><label for="data-76f907af-1f05-4c8b-a8e4-416ede1ba7ad" title="Show/Hide data repr"><svg class="icon xr-icon-database"><use href="#icon-database"></use></svg></label><div class="xr-var-attrs"><dl class="xr-attrs"></dl></div><div class="xr-var-data"><pre>array(1)</pre></div></li><li class="xr-var-item"><div class="xr-var-name"><span class="xr-has-index">x</span></div><div class="xr-var-dims">(x)</div><div class="xr-var-dtype">float64</div><div class="xr-var-preview xr-preview">4.386e+05 4.387e+05 ... 4.679e+05</div><input id="attrs-e54e2482-a30d-4e30-b7f8-fcc8dd0b61c3" class="xr-var-attrs-in" type="checkbox" disabled=""><label for="attrs-e54e2482-a30d-4e30-b7f8-fcc8dd0b61c3" title="Show/Hide attributes"><svg class="icon xr-icon-file-text2"><use href="#icon-file-text2"></use></svg></label><input id="data-1a9a0380-cd66-491f-8406-586e4f297b27" class="xr-var-data-in" type="checkbox"><label for="data-1a9a0380-cd66-491f-8406-586e4f297b27" title="Show/Hide data repr"><svg class="icon xr-icon-database"><use href="#icon-database"></use></svg></label><div class="xr-var-attrs"><dl class="xr-attrs"></dl></div><div class="xr-var-data"><pre>array([438642.315702, 438662.322106, 438682.328509, ..., 467871.671491,
       467891.677894, 467911.684298])</pre></div></li><li class="xr-var-item"><div class="xr-var-name"><span class="xr-has-index">y</span></div><div class="xr-var-dims">(y)</div><div class="xr-var-dtype">float64</div><div class="xr-var-preview xr-preview">4.513e+06 4.513e+06 ... 4.489e+06</div><input id="attrs-9f2487be-f727-4534-b70f-784683711586" class="xr-var-attrs-in" type="checkbox" disabled=""><label for="attrs-9f2487be-f727-4534-b70f-784683711586" title="Show/Hide attributes"><svg class="icon xr-icon-file-text2"><use href="#icon-file-text2"></use></svg></label><input id="data-5e3e16df-e371-4ad2-83ce-7dca7d46712a" class="xr-var-data-in" type="checkbox"><label for="data-5e3e16df-e371-4ad2-83ce-7dca7d46712a" title="Show/Hide data repr"><svg class="icon xr-icon-database"><use href="#icon-database"></use></svg></label><div class="xr-var-attrs"><dl class="xr-attrs"></dl></div><div class="xr-var-data"><pre>array([4512700.72858, 4512680.72734, 4512660.7261 , ..., 4489239.2739 ,
       4489219.27266, 4489199.27142])</pre></div></li><li class="xr-var-item"><div class="xr-var-name"><span>spatial_ref</span></div><div class="xr-var-dims">()</div><div class="xr-var-dtype">int64</div><div class="xr-var-preview xr-preview">0</div><input id="attrs-a999576e-69ec-4d5c-bc6c-439e35ba270a" class="xr-var-attrs-in" type="checkbox"><label for="attrs-a999576e-69ec-4d5c-bc6c-439e35ba270a" title="Show/Hide attributes"><svg class="icon xr-icon-file-text2"><use href="#icon-file-text2"></use></svg></label><input id="data-0b60b1c2-a408-40c6-abb8-4a48e9faa6b7" class="xr-var-data-in" type="checkbox"><label for="data-0b60b1c2-a408-40c6-abb8-4a48e9faa6b7" title="Show/Hide data repr"><svg class="icon xr-icon-database"><use href="#icon-database"></use></svg></label><div class="xr-var-attrs"><dl class="xr-attrs"><dt><span>crs_wkt :</span></dt><dd>PROJCS["WGS 84 / UTM zone 33N",GEOGCS["WGS 84",DATUM["WGS_1984",SPHEROID["WGS 84",6378137,298.257223563,AUTHORITY["EPSG","7030"]],AUTHORITY["EPSG","6326"]],PRIMEM["Greenwich",0,AUTHORITY["EPSG","8901"]],UNIT["degree",0.0174532925199433,AUTHORITY["EPSG","9122"]],AUTHORITY["EPSG","4326"]],PROJECTION["Transverse_Mercator"],PARAMETER["latitude_of_origin",0],PARAMETER["central_meridian",15],PARAMETER["scale_factor",0.9996],PARAMETER["false_easting",500000],PARAMETER["false_northing",0],UNIT["metre",1,AUTHORITY["EPSG","9001"]],AXIS["Easting",EAST],AXIS["Northing",NORTH],AUTHORITY["EPSG","32633"]]</dd><dt><span>semi_major_axis :</span></dt><dd>6378137.0</dd><dt><span>semi_minor_axis :</span></dt><dd>6356752.314245179</dd><dt><span>inverse_flattening :</span></dt><dd>298.257223563</dd><dt><span>reference_ellipsoid_name :</span></dt><dd>WGS 84</dd><dt><span>longitude_of_prime_meridian :</span></dt><dd>0.0</dd><dt><span>prime_meridian_name :</span></dt><dd>Greenwich</dd><dt><span>geographic_crs_name :</span></dt><dd>WGS 84</dd><dt><span>horizontal_datum_name :</span></dt><dd>World Geodetic System 1984</dd><dt><span>projected_crs_name :</span></dt><dd>WGS 84 / UTM zone 33N</dd><dt><span>grid_mapping_name :</span></dt><dd>transverse_mercator</dd><dt><span>latitude_of_projection_origin :</span></dt><dd>0.0</dd><dt><span>longitude_of_central_meridian :</span></dt><dd>15.0</dd><dt><span>false_easting :</span></dt><dd>500000.0</dd><dt><span>false_northing :</span></dt><dd>0.0</dd><dt><span>scale_factor_at_central_meridian :</span></dt><dd>0.9996</dd><dt><span>spatial_ref :</span></dt><dd>PROJCS["WGS 84 / UTM zone 33N",GEOGCS["WGS 84",DATUM["WGS_1984",SPHEROID["WGS 84",6378137,298.257223563,AUTHORITY["EPSG","7030"]],AUTHORITY["EPSG","6326"]],PRIMEM["Greenwich",0,AUTHORITY["EPSG","8901"]],UNIT["degree",0.0174532925199433,AUTHORITY["EPSG","9122"]],AUTHORITY["EPSG","4326"]],PROJECTION["Transverse_Mercator"],PARAMETER["latitude_of_origin",0],PARAMETER["central_meridian",15],PARAMETER["scale_factor",0.9996],PARAMETER["false_easting",500000],PARAMETER["false_northing",0],UNIT["metre",1,AUTHORITY["EPSG","9001"]],AXIS["Easting",EAST],AXIS["Northing",NORTH],AUTHORITY["EPSG","32633"]]</dd><dt><span>GeoTransform :</span></dt><dd>438632.3125 20.00640368852459 0.0 4512710.7292 0.0 -20.001240136054324</dd></dl></div><div class="xr-var-data"><pre>array(0)</pre></div></li></ul></div></li><li class="xr-section-item"><input id="section-21e20e62-c7c5-4b77-b632-51fd511d4cab" class="xr-section-summary-in" type="checkbox" checked=""><label for="section-21e20e62-c7c5-4b77-b632-51fd511d4cab" class="xr-section-summary">Attributes: <span>(3)</span></label><div class="xr-section-inline-details"></div><div class="xr-section-details"><dl class="xr-attrs"><dt><span>_FillValue :</span></dt><dd>-32768.0</dd><dt><span>scale_factor :</span></dt><dd>1.0</dd><dt><span>add_offset :</span></dt><dd>0.0</dd></dl></div></li></ul></div></div>
</div>
</div>
<div class="cell" data-execution_count="12">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">10</span>))</span>
<span id="cb14-2">imshow(view_sel, ax<span class="op" style="color: #5E5E5E;">=</span>ax)</span>
<span id="cb14-3">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://pygisblog.massimilianomoraca.me/posts/2022-04-07/analisi-di-visibilita_files/figure-html/cell-13-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Analisi effettuata, ora sono curioso di vedere quali aree ricadono nel campo visivo dell’osservatore.</p>
<div class="cell" data-execution_count="13">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">10</span>))</span>
<span id="cb15-2">imshow(</span>
<span id="cb15-3">    make_hillshade,</span>
<span id="cb15-4">    ax<span class="op" style="color: #5E5E5E;">=</span>ax,</span>
<span id="cb15-5">    cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'gist_gray'</span>,</span>
<span id="cb15-6">)</span>
<span id="cb15-7">imshow(</span>
<span id="cb15-8">    raster,</span>
<span id="cb15-9">    ax<span class="op" style="color: #5E5E5E;">=</span>ax,</span>
<span id="cb15-10">    cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'terrain'</span>,</span>
<span id="cb15-11">    vmin<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb15-12">    vmax<span class="op" style="color: #5E5E5E;">=</span>max_h,</span>
<span id="cb15-13">    levels<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>,</span>
<span id="cb15-14">    alpha<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.75</span></span>
<span id="cb15-15">)</span>
<span id="cb15-16">imshow(view_sel, ax<span class="op" style="color: #5E5E5E;">=</span>ax, cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Wistia'</span>)</span>
<span id="cb15-17"></span>
<span id="cb15-18"></span>
<span id="cb15-19">ax.scatter(</span>
<span id="cb15-20">    <span class="op" style="color: #5E5E5E;">*</span>single_point.iloc[<span class="dv" style="color: #AD0000;">0</span>].geometry.xy,</span>
<span id="cb15-21">    s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1000</span>,</span>
<span id="cb15-22">    marker<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"*"</span>,</span>
<span id="cb15-23">    facecolor<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'red'</span>,</span>
<span id="cb15-24">    edgecolor<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'black'</span></span>
<span id="cb15-25">)</span>
<span id="cb15-26">plt.text(</span>
<span id="cb15-27">    x<span class="op" style="color: #5E5E5E;">=</span>coordinates[<span class="dv" style="color: #AD0000;">0</span>][<span class="dv" style="color: #AD0000;">0</span>],</span>
<span id="cb15-28">    y<span class="op" style="color: #5E5E5E;">=</span>coordinates[<span class="dv" style="color: #AD0000;">1</span>][<span class="dv" style="color: #AD0000;">0</span>],</span>
<span id="cb15-29">    s<span class="op" style="color: #5E5E5E;">=</span>row.fid,</span>
<span id="cb15-30">    fontdict<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">dict</span>(color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'black'</span>, size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>),</span>
<span id="cb15-31">    bbox<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">dict</span>(facecolor<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'white'</span>, alpha<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.75</span>)</span>
<span id="cb15-32">)</span>
<span id="cb15-33"></span>
<span id="cb15-34">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://pygisblog.massimilianomoraca.me/posts/2022-04-07/analisi-di-visibilita_files/figure-html/cell-14-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Le aree in tonalità di giallo sono quelle che vede l’osservatore, in questo caso vede benissimo Positano, gli isolotti del Gallo e di Vetara ma anche parte del Golfo di Napoli, forse anche il Vesuvio.</p>
</section>
</section>
<section id="analisi-multipla" class="level1">
<h1>3. Analisi multipla</h1>
<p>E’ arrivato il momento di usare tutti i punti!</p>
<div class="cell" data-execution_count="14">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="cf" style="color: #003B4F;">for</span> _index, row <span class="kw" style="color: #003B4F;">in</span> points_data.iterrows():</span>
<span id="cb16-2">    point_geometry <span class="op" style="color: #5E5E5E;">=</span> row.geometry.xy</span>
<span id="cb16-3">    x_coord <span class="op" style="color: #5E5E5E;">=</span> point_geometry[<span class="dv" style="color: #AD0000;">0</span>][<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb16-4">    y_coord <span class="op" style="color: #5E5E5E;">=</span> point_geometry[<span class="dv" style="color: #AD0000;">1</span>][<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb16-5"></span>
<span id="cb16-6">    dataarray_value <span class="op" style="color: #5E5E5E;">=</span> raster.sel(x<span class="op" style="color: #5E5E5E;">=</span>x_coord, y<span class="op" style="color: #5E5E5E;">=</span>y_coord, method<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"nearest"</span>)</span>
<span id="cb16-7">    pixel_value <span class="op" style="color: #5E5E5E;">=</span> dataarray_value.data</span>
<span id="cb16-8"></span>
<span id="cb16-9">    view <span class="op" style="color: #5E5E5E;">=</span> viewshed(raster, x<span class="op" style="color: #5E5E5E;">=</span>x_coord, y<span class="op" style="color: #5E5E5E;">=</span>y_coord, observer_elev<span class="op" style="color: #5E5E5E;">=</span>pixel_value)</span>
<span id="cb16-10"></span>
<span id="cb16-11">    view_sel <span class="op" style="color: #5E5E5E;">=</span> view.where(view <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb16-12">    <span class="co" style="color: #5E5E5E;"># Salvataggio dei risultati</span></span>
<span id="cb16-13">    view_sel.rio.to_raster(<span class="ss" style="color: #20794D;">f'/home/max/DEV/test-data/output-data/viewshed_point</span><span class="sc" style="color: #5E5E5E;">{</span>row<span class="sc" style="color: #5E5E5E;">.</span>fid<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">_h</span><span class="sc" style="color: #5E5E5E;">{</span>pixel_value<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">.tif'</span>)</span></code></pre></div>
</details>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<figure class="figure">
<img src="https://pygisblog.massimilianomoraca.me/posts/2022-04-07/point_1.jpg" title="Point 1 - quota 875 metri" class="img-fluid figure-img">
</figure>
<p></p><figcaption class="figure-caption">Point 1 - quota 875 metri</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<figure class="figure">
<img src="https://pygisblog.massimilianomoraca.me/posts/2022-04-07/point_2.jpg" title="Point 2 - quota 413 metri" class="img-fluid figure-img">
</figure>
<p></p><figcaption class="figure-caption">Point 2 - quota 413 metri</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<figure class="figure">
<img src="https://pygisblog.massimilianomoraca.me/posts/2022-04-07/point_3.jpg" title="Point 3 - quota 106 metri" class="img-fluid figure-img">
</figure>
<p></p><figcaption class="figure-caption">Point 3 - quota 106 metri</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<figure class="figure">
<img src="https://pygisblog.massimilianomoraca.me/posts/2022-04-07/point_4.jpg" title="Point 4 - quota 0 metri" class="img-fluid figure-img">
</figure>
<p></p><figcaption class="figure-caption">Point 4 - quota 0 metri</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<figure class="figure">
<img src="https://pygisblog.massimilianomoraca.me/posts/2022-04-07/point_5.jpg" title="Point 5 - quota 0 metri" class="img-fluid figure-img">
</figure>
<p></p><figcaption class="figure-caption">Point 5 - quota 0 metri</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<figure class="figure">
<img src="https://pygisblog.massimilianomoraca.me/posts/2022-04-07/point_6.jpg" title="Point 6 - quota 475 metri" class="img-fluid figure-img">
</figure>
<p></p><figcaption class="figure-caption">Point 6 - quota 475 metri</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<figure class="figure">
<img src="https://pygisblog.massimilianomoraca.me/posts/2022-04-07/point_7.jpg" title="Point 7 - quota 0 metri" class="img-fluid figure-img">
</figure>
<p></p><figcaption class="figure-caption">Point 7 - quota 0 metri</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<figure class="figure">
<img src="https://pygisblog.massimilianomoraca.me/posts/2022-04-07/point_8.jpg" title="Point 8 - quota 1225 metri" class="img-fluid figure-img">
</figure>
<p></p><figcaption class="figure-caption">Point 8 - quota 1225 metri</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<figure class="figure">
<img src="https://pygisblog.massimilianomoraca.me/posts/2022-04-07/point_9.jpg" title="Point 9 - quota 0 metri" class="img-fluid figure-img">
</figure>
<p></p><figcaption class="figure-caption">Point 9 - quota 0 metri</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<figure class="figure">
<img src="https://pygisblog.massimilianomoraca.me/posts/2022-04-07/point_10.jpg" title="Point 10 - quota 0 metri" class="img-fluid figure-img">
</figure>
<p></p><figcaption class="figure-caption">Point 10 - quota 0 metri</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<figure class="figure">
<img src="https://pygisblog.massimilianomoraca.me/posts/2022-04-07/point_11.jpg" title="Point 11 - quota 450 metri" class="img-fluid figure-img">
</figure>
<p></p><figcaption class="figure-caption">Point 11 - quota 450 metri</figcaption><p></p>
</figure>
</div>
</section>
<section id="conclusione" class="level1">
<h1>Conclusione</h1>
<p>L’analisi di visibilità è fortemente infuenzata dalla risoluzione del DEM, più è spinta maggiore sarà la qualità dell’output. Di contro più è spinta la risoluzione del DEM maggiore sarà il tempo necessario per il processamento di ogni singolo punto di osservazione. Nel mio caso ci ho impiegato in media 4 secondi a punto.</p>
<p>Hai commenti, indicazioni o soluzioni alternative in Python? Scrivi nella sezione <a href="https://github.com/MaxDragonheart/PyGIS-Blog/discussions">Discussioni</a>.</p>
<section id="newsletter" class="level2">
<h2 class="anchored" data-anchor-id="newsletter">Newsletter</h2>
<p>Se vuoi ricevere aggiornamenti sui prossimi articoli <a href="https://massimilianomoraca.it/newsletter/">iscriviti alla newsletter</a>!</p>
</section>
<section id="telegram" class="level2">
<h2 class="anchored" data-anchor-id="telegram">Telegram</h2>
<p>Segui il canale Telegram <strong><a href="https://t.me/caffegis">CaffèGIS - I GIS a supporto dei processi evolutivi territoriali</a></strong> per ricevere aggiornamenti su iniziative ed informazioni a tema GIS.</p>
</section>
<section id="offrimi-una-birra" class="level2">
<h2 class="anchored" data-anchor-id="offrimi-una-birra">Offrimi una birra!</h2>
<p><strong>Se trovi interessanti i miei articoli <a href="https://www.paypal.com/paypalme/MassimilianoMoraca">offrimi una birra</a>!</strong></p>
<p>Alla prossima!</p>


</section>
</section>

 ]]></description>
  <category>point</category>
  <category>raster</category>
  <guid>https://pygisblog.massimilianomoraca.me/posts/2022-04-07/analisi-di-visibilita.html</guid>
  <pubDate>Wed, 06 Apr 2022 22:00:00 GMT</pubDate>
  <media:content url="https://pygisblog.massimilianomoraca.me/project_logo.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Da Point a PointZ</title>
  <link>https://pygisblog.massimilianomoraca.me/posts/2022-03-31/da-point-a-pointz.html</link>
  <description><![CDATA[ 




<p>Un po’ di tempo fa ho affrontato in un <a href="https://massimilianomoraca.it/blog/gis/da-point-a-pointz/">mio articolo</a> il problema dell’aggiunta della coordinata altimetrica ad un dataset di punti usando QGIS. In questo JupyterNotebook affronterò il problema usando Python.</p>
<section id="prima-di-iniziare" class="level2">
<h2 class="anchored" data-anchor-id="prima-di-iniziare">Prima di iniziare</h2>
<section id="librerie" class="level3">
<h3 class="anchored" data-anchor-id="librerie">Librerie</h3>
<p>Per raggiungere l’obiettivo userò essenzialmente <code>geopandas</code>, <code>shapely</code> e <code>rasterio</code>. In verità tra gli import troverai anche <code>pathlib</code> e <code>matplotlib</code> ma non sono essenziali per la corretta riuscita del procedimento.</p>
<div class="cell" data-execution_count="1">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> pathlib</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> geopandas <span class="im" style="color: #00769E;">as</span> gpd</span>
<span id="cb1-5"><span class="im" style="color: #00769E;">import</span> rasterio <span class="im" style="color: #00769E;">as</span> rio</span>
<span id="cb1-6"><span class="im" style="color: #00769E;">from</span> rasterio.plot <span class="im" style="color: #00769E;">import</span> show, show_hist</span>
<span id="cb1-7"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-8"><span class="im" style="color: #00769E;">from</span> shapely.geometry <span class="im" style="color: #00769E;">import</span> Point</span></code></pre></div>
</details>
</div>
</section>
<section id="fonti-dati" class="level3">
<h3 class="anchored" data-anchor-id="fonti-dati">Fonti dati</h3>
<p>Come <a href="https://massimilianomoraca.it/blog/gis/3d-open-source/">DEM</a> ho usato un tile del progetto <a href="http://tinitaly.pi.ingv.it/Download_Area2.html">TIN Italy</a> a sua volta ritagliato e su cui ho generato con QGIS quattro punti random.</p>
<div class="cell" data-execution_count="2">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">sample_data <span class="op" style="color: #5E5E5E;">=</span> pathlib.Path.cwd().parent.joinpath(<span class="st" style="color: #20794D;">'sample_data/add_z'</span>)</span>
<span id="cb2-2">dem <span class="op" style="color: #5E5E5E;">=</span> sample_data.joinpath(<span class="st" style="color: #20794D;">'clip_dem.tif'</span>)</span>
<span id="cb2-3">points <span class="op" style="color: #5E5E5E;">=</span> sample_data.joinpath(<span class="st" style="color: #20794D;">'points.shp'</span>)</span></code></pre></div>
</details>
</div>
</section>
</section>
<section id="quota-altimetrica-costante" class="level1">
<h1>1. Quota altimetrica costante</h1>
<p>E’ il caso più semplice: ho un certo insieme di punti e tutti devono acquisire la stezza Z.</p>
<div class="cell" data-execution_count="3">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">point_data <span class="op" style="color: #5E5E5E;">=</span> gpd.read_file(points)</span>
<span id="cb3-2">point_data</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="3">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>fid</th>
      <th>geometry</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1.0</td>
      <td>POINT (405270.221 4512122.298)</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2.0</td>
      <td>POINT (405226.798 4512675.034)</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3.0</td>
      <td>POINT (404962.921 4512294.350)</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4.0</td>
      <td>POINT (404991.893 4512570.669)</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="4">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">point_data.plot(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>))</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>&lt;AxesSubplot:&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://pygisblog.massimilianomoraca.me/posts/2022-03-31/da-point-a-pointz_files/figure-html/cell-5-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="5">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">point_data.has_z</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>0    False
1    False
2    False
3    False
dtype: bool</code></pre>
</div>
</div>
<p>Usando <code>has_z</code> ho verificato se i quattro punti sono effettivamente piani e quel <code>False</code> per ognuno di loro mi conferma che lo sono. Non resta che aggiungere la terza quota.</p>
<div class="cell" data-execution_count="6">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">point_z_list <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="cf" style="color: #003B4F;">for</span> _index, row <span class="kw" style="color: #003B4F;">in</span> point_data.iterrows():</span>
<span id="cb8-4">    point_geometry <span class="op" style="color: #5E5E5E;">=</span> row.geometry.coords</span>
<span id="cb8-5">    <span class="co" style="color: #5E5E5E;"># Estraggo la coppia di coordinate</span></span>
<span id="cb8-6">    coordinates_plane <span class="op" style="color: #5E5E5E;">=</span> point_geometry[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb8-7">    <span class="co" style="color: #5E5E5E;"># Creo una lista con la coppia di coordinate ed aggiungo la z</span></span>
<span id="cb8-8">    coordinates_3d <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">list</span>(coordinates_plane)</span>
<span id="cb8-9">    coordinates_3d.append(<span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb8-10">    <span class="co" style="color: #5E5E5E;"># Converto la lista in PointZ ed aggiungo l'oggetto alla lista di punti</span></span>
<span id="cb8-11">    point_geometry_3d <span class="op" style="color: #5E5E5E;">=</span> Point(<span class="bu" style="color: null;">tuple</span>(coordinates_3d))</span>
<span id="cb8-12">    point_z_list.append([row.fid, point_geometry_3d])</span>
<span id="cb8-13"></span>
<span id="cb8-14"><span class="co" style="color: #5E5E5E;"># Ricostruisco il GeoDataFrame di punti</span></span>
<span id="cb8-15">df <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(point_z_list)</span>
<span id="cb8-16">df.rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="dv" style="color: #AD0000;">0</span>:<span class="st" style="color: #20794D;">'fid'</span>, <span class="dv" style="color: #AD0000;">1</span>: <span class="st" style="color: #20794D;">'geometry'</span>}, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb8-17">gdf <span class="op" style="color: #5E5E5E;">=</span> gpd.GeoDataFrame(df, geometry<span class="op" style="color: #5E5E5E;">=</span>df.geometry, crs<span class="op" style="color: #5E5E5E;">=</span>point_data.crs)</span>
<span id="cb8-18">gdf</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="6">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>fid</th>
      <th>geometry</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1.0</td>
      <td>POINT Z (405270.221 4512122.298 10.000)</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2.0</td>
      <td>POINT Z (405226.798 4512675.034 10.000)</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3.0</td>
      <td>POINT Z (404962.921 4512294.350 10.000)</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4.0</td>
      <td>POINT Z (404991.893 4512570.669 10.000)</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="7">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">gdf.has_z</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>0    True
1    True
2    True
3    True
dtype: bool</code></pre>
</div>
</div>
<p>Interrogando i dati nuovamente con <code>has_z</code> risultano essere 3D.</p>
</section>
<section id="quota-altimetrica-da-dem" class="level1">
<h1>2. Quota altimetrica da DEM</h1>
<p>Caso più complesso e sicuramente corrispondente alla realtà.</p>
<p>Il primo step è leggere la fonte dati raster. In verità dovrei leggere anche la fonte vettoriale ma siccome l’ho già fatto nell’esempio precedente evito di duplicare il passaggio.</p>
<div class="cell" data-execution_count="8">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">raster_data <span class="op" style="color: #5E5E5E;">=</span> rio.<span class="bu" style="color: null;">open</span>(dem)</span>
<span id="cb11-2">raster_data</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>&lt;open DatasetReader name='/home/max/DEV/Personal/PyGISBlog/sample_data/add_z/clip_dem.tif' mode='r'&gt;</code></pre>
</div>
</div>
<div class="cell" data-execution_count="9">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">figure, axes <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>))</span>
<span id="cb13-2">show(</span>
<span id="cb13-3">    source<span class="op" style="color: #5E5E5E;">=</span>raster_data,</span>
<span id="cb13-4">    cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'terrain'</span></span>
<span id="cb13-5">)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://pygisblog.massimilianomoraca.me/posts/2022-03-31/da-point-a-pointz_files/figure-html/cell-10-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>&lt;AxesSubplot:&gt;</code></pre>
</div>
</div>
<div class="cell" data-execution_count="10">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">show_hist(</span>
<span id="cb15-2">    source<span class="op" style="color: #5E5E5E;">=</span>raster_data,</span>
<span id="cb15-3">    title<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Distribuzione delle quote'</span>,</span>
<span id="cb15-4">    bins<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>,</span>
<span id="cb15-5">    alpha<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>,</span>
<span id="cb15-6">)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://pygisblog.massimilianomoraca.me/posts/2022-03-31/da-point-a-pointz_files/figure-html/cell-11-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>L’istogramma delle quote ci consente di capire che c’è una forte presenza di quote zero che corrispondono all’azzurro del raster precedentemente stampato.</p>
<div class="cell" data-execution_count="11">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">point_z_list <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb16-2"></span>
<span id="cb16-3"><span class="cf" style="color: #003B4F;">for</span> _index, row <span class="kw" style="color: #003B4F;">in</span> point_data.iterrows():</span>
<span id="cb16-4">    point_geometry <span class="op" style="color: #5E5E5E;">=</span> row.geometry.xy</span>
<span id="cb16-5">    <span class="co" style="color: #5E5E5E;"># Estraggo la coppia di coordinate</span></span>
<span id="cb16-6">    x_coords <span class="op" style="color: #5E5E5E;">=</span> point_geometry[<span class="dv" style="color: #AD0000;">0</span>][<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb16-7">    y_coords <span class="op" style="color: #5E5E5E;">=</span> point_geometry[<span class="dv" style="color: #AD0000;">1</span>][<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb16-8">    <span class="co" style="color: #5E5E5E;"># Individuo la riga e la colonna del raster in cui ricade</span></span>
<span id="cb16-9">    <span class="co" style="color: #5E5E5E;"># la coppia di coordinate.</span></span>
<span id="cb16-10">    line, column <span class="op" style="color: #5E5E5E;">=</span> raster_data.index(x_coords, y_coords)</span>
<span id="cb16-11">    <span class="co" style="color: #5E5E5E;"># Estraggo il valore della cella dall'intersezione della</span></span>
<span id="cb16-12">    <span class="co" style="color: #5E5E5E;"># riga e colonna individuate al passaggio precedente.</span></span>
<span id="cb16-13">    <span class="co" style="color: #5E5E5E;"># E' il valore di quota che sto cercando.</span></span>
<span id="cb16-14">    pixel_value <span class="op" style="color: #5E5E5E;">=</span> raster_data.read(<span class="dv" style="color: #AD0000;">1</span>)[line, column]</span>
<span id="cb16-15">    <span class="co" style="color: #5E5E5E;"># Creo il PointZ ed aggiungo l'oggetto alla lista di punti</span></span>
<span id="cb16-16">    point_geometry_3d <span class="op" style="color: #5E5E5E;">=</span> Point((x_coords, y_coords, pixel_value))</span>
<span id="cb16-17">    point_z_list.append([row.fid, point_geometry_3d])</span>
<span id="cb16-18"></span>
<span id="cb16-19"><span class="co" style="color: #5E5E5E;"># Ricostruisco il GeoDataFrame di punti</span></span>
<span id="cb16-20">df <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(point_z_list)</span>
<span id="cb16-21">df.rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="dv" style="color: #AD0000;">0</span>:<span class="st" style="color: #20794D;">'fid'</span>, <span class="dv" style="color: #AD0000;">1</span>: <span class="st" style="color: #20794D;">'geometry'</span>}, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb16-22">gdf <span class="op" style="color: #5E5E5E;">=</span> gpd.GeoDataFrame(df, geometry<span class="op" style="color: #5E5E5E;">=</span>df.geometry, crs<span class="op" style="color: #5E5E5E;">=</span>point_data.crs)</span>
<span id="cb16-23">gdf</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="11">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>fid</th>
      <th>geometry</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1.0</td>
      <td>POINT Z (405270.221 4512122.298 53.347)</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2.0</td>
      <td>POINT Z (405226.798 4512675.034 0.000)</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3.0</td>
      <td>POINT Z (404962.921 4512294.350 65.504)</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4.0</td>
      <td>POINT Z (404991.893 4512570.669 18.646)</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="12">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">gdf.has_z</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>0    True
1    True
2    True
3    True
dtype: bool</code></pre>
</div>
</div>
<p>Anche in questo caso la verifica sulla tridimensionalità del GeoDataFrame ha dato esito positivo.</p>
</section>
<section id="bis.-quota-altimetrica-da-dem-usando-rioxarray" class="level1">
<h1>2bis. Quota altimetrica da DEM <em>usando rioxarray</em></h1>
<p>Aggiornamento del 07-04-2022</p>
<p>Procedura simile alla precedente con la sola differenza legata al tipo di libreria con cui vado a leggere il DEM; andrò ad usare infatti <a href="https://corteva.github.io/rioxarray/stable/getting_started/getting_started.html">rioxarray</a> estensione di <a href="https://docs.xarray.dev/en/stable/">xarray</a>.</p>
<div class="cell" data-execution_count="13">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="im" style="color: #00769E;">import</span> rioxarray <span class="im" style="color: #00769E;">as</span> rxr</span>
<span id="cb19-2"></span>
<span id="cb19-3">new_raster_data <span class="op" style="color: #5E5E5E;">=</span> rxr.open_rasterio(dem).squeeze()</span>
<span id="cb19-4">new_raster_data</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="13">

<div><svg style="position: absolute; width: 0; height: 0; overflow: hidden">
<defs>
<symbol id="icon-database" viewbox="0 0 32 32">
<path d="M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z"></path>
<path d="M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
<path d="M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
</symbol>
<symbol id="icon-file-text2" viewbox="0 0 32 32">
<path d="M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z"></path>
<path d="M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
<path d="M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
<path d="M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
</symbol>
</defs>
</svg>
<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.
 *
 */

:root {
  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));
  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));
  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));
  --xr-border-color: var(--jp-border-color2, #e0e0e0);
  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);
  --xr-background-color: var(--jp-layout-color0, white);
  --xr-background-color-row-even: var(--jp-layout-color1, white);
  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);
}

html[theme=dark],
body.vscode-dark {
  --xr-font-color0: rgba(255, 255, 255, 1);
  --xr-font-color2: rgba(255, 255, 255, 0.54);
  --xr-font-color3: rgba(255, 255, 255, 0.38);
  --xr-border-color: #1F1F1F;
  --xr-disabled-color: #515151;
  --xr-background-color: #111111;
  --xr-background-color-row-even: #111111;
  --xr-background-color-row-odd: #313131;
}

.xr-wrap {
  display: block !important;
  min-width: 300px;
  max-width: 700px;
}

.xr-text-repr-fallback {
  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */
  display: none;
}

.xr-header {
  padding-top: 6px;
  padding-bottom: 6px;
  margin-bottom: 4px;
  border-bottom: solid 1px var(--xr-border-color);
}

.xr-header > div,
.xr-header > ul {
  display: inline;
  margin-top: 0;
  margin-bottom: 0;
}

.xr-obj-type,
.xr-array-name {
  margin-left: 2px;
  margin-right: 10px;
}

.xr-obj-type {
  color: var(--xr-font-color2);
}

.xr-sections {
  padding-left: 0 !important;
  display: grid;
  grid-template-columns: 150px auto auto 1fr 20px 20px;
}

.xr-section-item {
  display: contents;
}

.xr-section-item input {
  display: none;
}

.xr-section-item input + label {
  color: var(--xr-disabled-color);
}

.xr-section-item input:enabled + label {
  cursor: pointer;
  color: var(--xr-font-color2);
}

.xr-section-item input:enabled + label:hover {
  color: var(--xr-font-color0);
}

.xr-section-summary {
  grid-column: 1;
  color: var(--xr-font-color2);
  font-weight: 500;
}

.xr-section-summary > span {
  display: inline-block;
  padding-left: 0.5em;
}

.xr-section-summary-in:disabled + label {
  color: var(--xr-font-color2);
}

.xr-section-summary-in + label:before {
  display: inline-block;
  content: '►';
  font-size: 11px;
  width: 15px;
  text-align: center;
}

.xr-section-summary-in:disabled + label:before {
  color: var(--xr-disabled-color);
}

.xr-section-summary-in:checked + label:before {
  content: '▼';
}

.xr-section-summary-in:checked + label > span {
  display: none;
}

.xr-section-summary,
.xr-section-inline-details {
  padding-top: 4px;
  padding-bottom: 4px;
}

.xr-section-inline-details {
  grid-column: 2 / -1;
}

.xr-section-details {
  display: none;
  grid-column: 1 / -1;
  margin-bottom: 5px;
}

.xr-section-summary-in:checked ~ .xr-section-details {
  display: contents;
}

.xr-array-wrap {
  grid-column: 1 / -1;
  display: grid;
  grid-template-columns: 20px auto;
}

.xr-array-wrap > label {
  grid-column: 1;
  vertical-align: top;
}

.xr-preview {
  color: var(--xr-font-color3);
}

.xr-array-preview,
.xr-array-data {
  padding: 0 5px !important;
  grid-column: 2;
}

.xr-array-data,
.xr-array-in:checked ~ .xr-array-preview {
  display: none;
}

.xr-array-in:checked ~ .xr-array-data,
.xr-array-preview {
  display: inline-block;
}

.xr-dim-list {
  display: inline-block !important;
  list-style: none;
  padding: 0 !important;
  margin: 0;
}

.xr-dim-list li {
  display: inline-block;
  padding: 0;
  margin: 0;
}

.xr-dim-list:before {
  content: '(';
}

.xr-dim-list:after {
  content: ')';
}

.xr-dim-list li:not(:last-child):after {
  content: ',';
  padding-right: 5px;
}

.xr-has-index {
  font-weight: bold;
}

.xr-var-list,
.xr-var-item {
  display: contents;
}

.xr-var-item > div,
.xr-var-item label,
.xr-var-item > .xr-var-name span {
  background-color: var(--xr-background-color-row-even);
  margin-bottom: 0;
}

.xr-var-item > .xr-var-name:hover span {
  padding-right: 5px;
}

.xr-var-list > li:nth-child(odd) > div,
.xr-var-list > li:nth-child(odd) > label,
.xr-var-list > li:nth-child(odd) > .xr-var-name span {
  background-color: var(--xr-background-color-row-odd);
}

.xr-var-name {
  grid-column: 1;
}

.xr-var-dims {
  grid-column: 2;
}

.xr-var-dtype {
  grid-column: 3;
  text-align: right;
  color: var(--xr-font-color2);
}

.xr-var-preview {
  grid-column: 4;
}

.xr-var-name,
.xr-var-dims,
.xr-var-dtype,
.xr-preview,
.xr-attrs dt {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  padding-right: 10px;
}

.xr-var-name:hover,
.xr-var-dims:hover,
.xr-var-dtype:hover,
.xr-attrs dt:hover {
  overflow: visible;
  width: auto;
  z-index: 1;
}

.xr-var-attrs,
.xr-var-data {
  display: none;
  background-color: var(--xr-background-color) !important;
  padding-bottom: 5px !important;
}

.xr-var-attrs-in:checked ~ .xr-var-attrs,
.xr-var-data-in:checked ~ .xr-var-data {
  display: block;
}

.xr-var-data > table {
  float: right;
}

.xr-var-name span,
.xr-var-data,
.xr-attrs {
  padding-left: 25px !important;
}

.xr-attrs,
.xr-var-attrs,
.xr-var-data {
  grid-column: 1 / -1;
}

dl.xr-attrs {
  padding: 0;
  margin: 0;
  display: grid;
  grid-template-columns: 125px auto;
}

.xr-attrs dt,
.xr-attrs dd {
  padding: 0;
  margin: 0;
  float: left;
  padding-right: 10px;
  width: auto;
}

.xr-attrs dt {
  font-weight: normal;
  grid-column: 1;
}

.xr-attrs dt:hover span {
  display: inline-block;
  background: var(--xr-background-color);
  padding-right: 10px;
}

.xr-attrs dd {
  grid-column: 2;
  white-space: pre-wrap;
  word-break: break-all;
}

.xr-icon-database,
.xr-icon-file-text2 {
  display: inline-block;
  vertical-align: middle;
  width: 1em;
  height: 1.5em !important;
  stroke-width: 0;
  stroke: currentColor;
  fill: currentColor;
}
</style><pre class="xr-text-repr-fallback">&lt;xarray.DataArray (y: 72, x: 55)&gt;
array([[ 0.      ,  0.      ,  0.      , ...,  0.      ,  0.      ,  0.      ],
       [ 0.      ,  0.      ,  0.      , ...,  0.      ,  0.      ,  0.      ],
       [ 0.      ,  0.      ,  0.      , ...,  0.      ,  0.      ,  0.      ],
       ...,
       [69.77669 , 69.81791 , 69.8414  , ..., 15.89126 , 13.74339 ,  8.158463],
       [70.76064 , 69.98181 , 69.8414  , ..., 16.82376 , 13.96572 , 10.95792 ],
       [70.76064 , 69.98181 , 69.95621 , ..., 19.76735 , 16.77215 , 13.75869 ]],
      dtype=float32)
Coordinates:
    band         int64 1
  * x            (x) float64 4.049e+05 4.05e+05 4.05e+05 ... 4.055e+05 4.055e+05
  * y            (y) float64 4.513e+06 4.513e+06 ... 4.512e+06 4.512e+06
    spatial_ref  int64 0
Attributes:
    STATISTICS_MAXIMUM:        87.830078125
    STATISTICS_MEAN:           25.813233406838
    STATISTICS_MINIMUM:        0
    STATISTICS_STDDEV:         26.3760348731
    STATISTICS_VALID_PERCENT:  100
    _FillValue:                -9999.0
    scale_factor:              1.0
    add_offset:                0.0</pre><div class="xr-wrap" style="display:none"><div class="xr-header"><div class="xr-obj-type">xarray.DataArray</div><div class="xr-array-name"></div><ul class="xr-dim-list"><li><span class="xr-has-index">y</span>: 72</li><li><span class="xr-has-index">x</span>: 55</li></ul></div><ul class="xr-sections"><li class="xr-section-item"><div class="xr-array-wrap"><input id="section-03ae8395-92a0-4c61-bc30-516b1963912f" class="xr-array-in" type="checkbox" checked=""><label for="section-03ae8395-92a0-4c61-bc30-516b1963912f" title="Show/hide data repr"><svg class="icon xr-icon-database"><use href="#icon-database"></use></svg></label><div class="xr-array-preview xr-preview"><span>0.0 0.0 0.0 0.0 0.0 0.0 0.0 ... 28.04 24.58 22.3 19.77 16.77 13.76</span></div><div class="xr-array-data"><pre>array([[ 0.      ,  0.      ,  0.      , ...,  0.      ,  0.      ,  0.      ],
       [ 0.      ,  0.      ,  0.      , ...,  0.      ,  0.      ,  0.      ],
       [ 0.      ,  0.      ,  0.      , ...,  0.      ,  0.      ,  0.      ],
       ...,
       [69.77669 , 69.81791 , 69.8414  , ..., 15.89126 , 13.74339 ,  8.158463],
       [70.76064 , 69.98181 , 69.8414  , ..., 16.82376 , 13.96572 , 10.95792 ],
       [70.76064 , 69.98181 , 69.95621 , ..., 19.76735 , 16.77215 , 13.75869 ]],
      dtype=float32)</pre></div></div></li><li class="xr-section-item"><input id="section-30c9290e-b362-4743-aa59-a09179ea24e9" class="xr-section-summary-in" type="checkbox" checked=""><label for="section-30c9290e-b362-4743-aa59-a09179ea24e9" class="xr-section-summary">Coordinates: <span>(4)</span></label><div class="xr-section-inline-details"></div><div class="xr-section-details"><ul class="xr-var-list"><li class="xr-var-item"><div class="xr-var-name"><span>band</span></div><div class="xr-var-dims">()</div><div class="xr-var-dtype">int64</div><div class="xr-var-preview xr-preview">1</div><input id="attrs-2282032b-87cd-46cd-8d98-768fd425d499" class="xr-var-attrs-in" type="checkbox" disabled=""><label for="attrs-2282032b-87cd-46cd-8d98-768fd425d499" title="Show/Hide attributes"><svg class="icon xr-icon-file-text2"><use href="#icon-file-text2"></use></svg></label><input id="data-c0fdf273-88cc-4185-92ea-209ca98b7462" class="xr-var-data-in" type="checkbox"><label for="data-c0fdf273-88cc-4185-92ea-209ca98b7462" title="Show/Hide data repr"><svg class="icon xr-icon-database"><use href="#icon-database"></use></svg></label><div class="xr-var-attrs"><dl class="xr-attrs"></dl></div><div class="xr-var-data"><pre>array(1)</pre></div></li><li class="xr-var-item"><div class="xr-var-name"><span class="xr-has-index">x</span></div><div class="xr-var-dims">(x)</div><div class="xr-var-dtype">float64</div><div class="xr-var-preview xr-preview">4.049e+05 4.05e+05 ... 4.055e+05</div><input id="attrs-c183a537-fd18-49f6-8927-f77d684e1c33" class="xr-var-attrs-in" type="checkbox" disabled=""><label for="attrs-c183a537-fd18-49f6-8927-f77d684e1c33" title="Show/Hide attributes"><svg class="icon xr-icon-file-text2"><use href="#icon-file-text2"></use></svg></label><input id="data-b87e8106-d539-41b1-8235-e25ecd00da5a" class="xr-var-data-in" type="checkbox"><label for="data-b87e8106-d539-41b1-8235-e25ecd00da5a" title="Show/Hide data repr"><svg class="icon xr-icon-database"><use href="#icon-database"></use></svg></label><div class="xr-var-attrs"><dl class="xr-attrs"></dl></div><div class="xr-var-data"><pre>array([404941.257791, 404951.883373, 404962.508955, 404973.134536,
       404983.760118, 404994.3857  , 405005.011282, 405015.636864,
       405026.262445, 405036.888027, 405047.513609, 405058.139191,
       405068.764773, 405079.390355, 405090.015936, 405100.641518,
       405111.2671  , 405121.892682, 405132.518264, 405143.143845,
       405153.769427, 405164.395009, 405175.020591, 405185.646173,
       405196.271755, 405206.897336, 405217.522918, 405228.1485  ,
       405238.774082, 405249.399664, 405260.025245, 405270.650827,
       405281.276409, 405291.901991, 405302.527573, 405313.153155,
       405323.778736, 405334.404318, 405345.0299  , 405355.655482,
       405366.281064, 405376.906645, 405387.532227, 405398.157809,
       405408.783391, 405419.408973, 405430.034555, 405440.660136,
       405451.285718, 405461.9113  , 405472.536882, 405483.162464,
       405493.788045, 405504.413627, 405515.039209])</pre></div></li><li class="xr-var-item"><div class="xr-var-name"><span class="xr-has-index">y</span></div><div class="xr-var-dims">(y)</div><div class="xr-var-dtype">float64</div><div class="xr-var-preview xr-preview">4.513e+06 4.513e+06 ... 4.512e+06</div><input id="attrs-aea1081b-98ee-471f-91c2-2254d502683c" class="xr-var-attrs-in" type="checkbox" disabled=""><label for="attrs-aea1081b-98ee-471f-91c2-2254d502683c" title="Show/Hide attributes"><svg class="icon xr-icon-file-text2"><use href="#icon-file-text2"></use></svg></label><input id="data-abfa2dc2-66f5-4fd5-9690-443162bc1eeb" class="xr-var-data-in" type="checkbox"><label for="data-abfa2dc2-66f5-4fd5-9690-443162bc1eeb" title="Show/Hide data repr"><svg class="icon xr-icon-database"><use href="#icon-database"></use></svg></label><div class="xr-var-attrs"><dl class="xr-attrs"></dl></div><div class="xr-var-data"><pre>array([4512752.806342, 4512743.597027, 4512734.387712, 4512725.178397,
       4512715.969081, 4512706.759766, 4512697.550451, 4512688.341135,
       4512679.13182 , 4512669.922505, 4512660.71319 , 4512651.503874,
       4512642.294559, 4512633.085244, 4512623.875928, 4512614.666613,
       4512605.457298, 4512596.247983, 4512587.038667, 4512577.829352,
       4512568.620037, 4512559.410722, 4512550.201406, 4512540.992091,
       4512531.782776, 4512522.57346 , 4512513.364145, 4512504.15483 ,
       4512494.945515, 4512485.736199, 4512476.526884, 4512467.317569,
       4512458.108253, 4512448.898938, 4512439.689623, 4512430.480308,
       4512421.270992, 4512412.061677, 4512402.852362, 4512393.643047,
       4512384.433731, 4512375.224416, 4512366.015101, 4512356.805785,
       4512347.59647 , 4512338.387155, 4512329.17784 , 4512319.968524,
       4512310.759209, 4512301.549894, 4512292.340578, 4512283.131263,
       4512273.921948, 4512264.712633, 4512255.503317, 4512246.294002,
       4512237.084687, 4512227.875372, 4512218.666056, 4512209.456741,
       4512200.247426, 4512191.03811 , 4512181.828795, 4512172.61948 ,
       4512163.410165, 4512154.200849, 4512144.991534, 4512135.782219,
       4512126.572903, 4512117.363588, 4512108.154273, 4512098.944958])</pre></div></li><li class="xr-var-item"><div class="xr-var-name"><span>spatial_ref</span></div><div class="xr-var-dims">()</div><div class="xr-var-dtype">int64</div><div class="xr-var-preview xr-preview">0</div><input id="attrs-ef7c2923-7fd6-4642-93e7-e604560b90a7" class="xr-var-attrs-in" type="checkbox"><label for="attrs-ef7c2923-7fd6-4642-93e7-e604560b90a7" title="Show/Hide attributes"><svg class="icon xr-icon-file-text2"><use href="#icon-file-text2"></use></svg></label><input id="data-75b49b04-5163-4a79-86c8-189e863d20f6" class="xr-var-data-in" type="checkbox"><label for="data-75b49b04-5163-4a79-86c8-189e863d20f6" title="Show/Hide data repr"><svg class="icon xr-icon-database"><use href="#icon-database"></use></svg></label><div class="xr-var-attrs"><dl class="xr-attrs"><dt><span>crs_wkt :</span></dt><dd>PROJCS["WGS 84 / UTM zone 33N",GEOGCS["WGS 84",DATUM["WGS_1984",SPHEROID["WGS 84",6378137,298.257223563,AUTHORITY["EPSG","7030"]],AUTHORITY["EPSG","6326"]],PRIMEM["Greenwich",0,AUTHORITY["EPSG","8901"]],UNIT["degree",0.0174532925199433,AUTHORITY["EPSG","9122"]],AUTHORITY["EPSG","4326"]],PROJECTION["Transverse_Mercator"],PARAMETER["latitude_of_origin",0],PARAMETER["central_meridian",15],PARAMETER["scale_factor",0.9996],PARAMETER["false_easting",500000],PARAMETER["false_northing",0],UNIT["metre",1,AUTHORITY["EPSG","9001"]],AXIS["Easting",EAST],AXIS["Northing",NORTH],AUTHORITY["EPSG","32633"]]</dd><dt><span>semi_major_axis :</span></dt><dd>6378137.0</dd><dt><span>semi_minor_axis :</span></dt><dd>6356752.314245179</dd><dt><span>inverse_flattening :</span></dt><dd>298.257223563</dd><dt><span>reference_ellipsoid_name :</span></dt><dd>WGS 84</dd><dt><span>longitude_of_prime_meridian :</span></dt><dd>0.0</dd><dt><span>prime_meridian_name :</span></dt><dd>Greenwich</dd><dt><span>geographic_crs_name :</span></dt><dd>WGS 84</dd><dt><span>horizontal_datum_name :</span></dt><dd>World Geodetic System 1984</dd><dt><span>projected_crs_name :</span></dt><dd>WGS 84 / UTM zone 33N</dd><dt><span>grid_mapping_name :</span></dt><dd>transverse_mercator</dd><dt><span>latitude_of_projection_origin :</span></dt><dd>0.0</dd><dt><span>longitude_of_central_meridian :</span></dt><dd>15.0</dd><dt><span>false_easting :</span></dt><dd>500000.0</dd><dt><span>false_northing :</span></dt><dd>0.0</dd><dt><span>scale_factor_at_central_meridian :</span></dt><dd>0.9996</dd><dt><span>spatial_ref :</span></dt><dd>PROJCS["WGS 84 / UTM zone 33N",GEOGCS["WGS 84",DATUM["WGS_1984",SPHEROID["WGS 84",6378137,298.257223563,AUTHORITY["EPSG","7030"]],AUTHORITY["EPSG","6326"]],PRIMEM["Greenwich",0,AUTHORITY["EPSG","8901"]],UNIT["degree",0.0174532925199433,AUTHORITY["EPSG","9122"]],AUTHORITY["EPSG","4326"]],PROJECTION["Transverse_Mercator"],PARAMETER["latitude_of_origin",0],PARAMETER["central_meridian",15],PARAMETER["scale_factor",0.9996],PARAMETER["false_easting",500000],PARAMETER["false_northing",0],UNIT["metre",1,AUTHORITY["EPSG","9001"]],AXIS["Easting",EAST],AXIS["Northing",NORTH],AUTHORITY["EPSG","32633"]]</dd><dt><span>GeoTransform :</span></dt><dd>404935.945 10.625581818181937 0.0 4512757.411 0.0 -9.209315277778337</dd></dl></div><div class="xr-var-data"><pre>array(0)</pre></div></li></ul></div></li><li class="xr-section-item"><input id="section-c6d6da12-ccb1-4e51-b5d9-43d269c134db" class="xr-section-summary-in" type="checkbox" checked=""><label for="section-c6d6da12-ccb1-4e51-b5d9-43d269c134db" class="xr-section-summary">Attributes: <span>(8)</span></label><div class="xr-section-inline-details"></div><div class="xr-section-details"><dl class="xr-attrs"><dt><span>STATISTICS_MAXIMUM :</span></dt><dd>87.830078125</dd><dt><span>STATISTICS_MEAN :</span></dt><dd>25.813233406838</dd><dt><span>STATISTICS_MINIMUM :</span></dt><dd>0</dd><dt><span>STATISTICS_STDDEV :</span></dt><dd>26.3760348731</dd><dt><span>STATISTICS_VALID_PERCENT :</span></dt><dd>100</dd><dt><span>_FillValue :</span></dt><dd>-9999.0</dd><dt><span>scale_factor :</span></dt><dd>1.0</dd><dt><span>add_offset :</span></dt><dd>0.0</dd></dl></div></li></ul></div></div>
</div>
</div>
<div class="cell" data-execution_count="14">
<details>
<summary>Codice</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">new_point_z_list <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb20-2"></span>
<span id="cb20-3"><span class="cf" style="color: #003B4F;">for</span> _index, row <span class="kw" style="color: #003B4F;">in</span> point_data.iterrows():</span>
<span id="cb20-4">    point_geometry <span class="op" style="color: #5E5E5E;">=</span> row.geometry.xy</span>
<span id="cb20-5">    <span class="co" style="color: #5E5E5E;"># Estraggo la coppia di coordinate</span></span>
<span id="cb20-6">    x_coords <span class="op" style="color: #5E5E5E;">=</span> point_geometry[<span class="dv" style="color: #AD0000;">0</span>][<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb20-7">    y_coords <span class="op" style="color: #5E5E5E;">=</span> point_geometry[<span class="dv" style="color: #AD0000;">1</span>][<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb20-8"></span>
<span id="cb20-9">    <span class="co" style="color: #5E5E5E;"># Individuo la riga e la colonna del DataArray in cui ricade</span></span>
<span id="cb20-10">    <span class="co" style="color: #5E5E5E;"># la coppia di coordinate.</span></span>
<span id="cb20-11">    value <span class="op" style="color: #5E5E5E;">=</span> new_raster_data.sel(x<span class="op" style="color: #5E5E5E;">=</span>x_coords, y<span class="op" style="color: #5E5E5E;">=</span>y_coords, method<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"nearest"</span>)</span>
<span id="cb20-12">    <span class="co" style="color: #5E5E5E;"># Estraggo il valore della cella dall'intersezione della</span></span>
<span id="cb20-13">    <span class="co" style="color: #5E5E5E;"># riga e colonna individuate al passaggio precedente.</span></span>
<span id="cb20-14">    <span class="co" style="color: #5E5E5E;"># E' il valore di quota che sto cercando.</span></span>
<span id="cb20-15">    pixel_value <span class="op" style="color: #5E5E5E;">=</span> value.data</span>
<span id="cb20-16">    <span class="co" style="color: #5E5E5E;"># Creo il PointZ ed aggiungo l'oggetto alla lista di punti</span></span>
<span id="cb20-17">    point_geometry_3d <span class="op" style="color: #5E5E5E;">=</span> Point((x_coords, y_coords, pixel_value))</span>
<span id="cb20-18">    new_point_z_list.append([row.fid, point_geometry_3d])</span>
<span id="cb20-19"></span>
<span id="cb20-20"><span class="co" style="color: #5E5E5E;"># Ricostruisco il GeoDataFrame di punti</span></span>
<span id="cb20-21">new_df <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(new_point_z_list)</span>
<span id="cb20-22">new_df.rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="dv" style="color: #AD0000;">0</span>:<span class="st" style="color: #20794D;">'fid'</span>, <span class="dv" style="color: #AD0000;">1</span>: <span class="st" style="color: #20794D;">'geometry'</span>}, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb20-23">new_gdf <span class="op" style="color: #5E5E5E;">=</span> gpd.GeoDataFrame(new_df, geometry<span class="op" style="color: #5E5E5E;">=</span>new_df.geometry, crs<span class="op" style="color: #5E5E5E;">=</span>point_data.crs)</span>
<span id="cb20-24">new_gdf</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="14">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>fid</th>
      <th>geometry</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1.0</td>
      <td>POINT Z (405270.221 4512122.298 53.347)</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2.0</td>
      <td>POINT Z (405226.798 4512675.034 0.000)</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3.0</td>
      <td>POINT Z (404962.921 4512294.350 65.504)</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4.0</td>
      <td>POINT Z (404991.893 4512570.669 18.646)</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
<section id="conclusione" class="level1">
<h1>Conclusione</h1>
<p>Quelli riportati sono solo due dei metodi possibili per raggiungere l’obiettivo, sono quelli che ho individuato io. Se ne conosci altri, o se hai indicazioni da dare per migliorare il post, fallo scrivendo in <a href="https://github.com/MaxDragonheart/PyGIS-Blog/discussions">Discussioni</a>. Nota bene che per <strong>2</strong> è indispensabile che raster e punti abbiano lo stesso sistema di riferimento!</p>
<section id="newsletter" class="level2">
<h2 class="anchored" data-anchor-id="newsletter">Newsletter</h2>
<p>Se vuoi ricevere aggiornamenti sui prossimi articoli <a href="https://massimilianomoraca.it/newsletter/">iscriviti alla newsletter</a>!</p>
</section>
<section id="telegram" class="level2">
<h2 class="anchored" data-anchor-id="telegram">Telegram</h2>
<p>Segui il canale Telegram <strong><a href="https://t.me/caffegis">CaffèGIS - I GIS a supporto dei processi evolutivi territoriali</a></strong> per ricevere aggiornamenti su iniziative ed informazioni a tema GIS.</p>
</section>
<section id="offrimi-una-birra" class="level2">
<h2 class="anchored" data-anchor-id="offrimi-una-birra">Offrimi una birra!</h2>
<p><strong>Se trovi interessanti i miei articoli <a href="https://www.paypal.com/paypalme/MassimilianoMoraca">offrimi una birra</a>!</strong></p>
<p>Alla prossima!</p>


</section>
</section>

 ]]></description>
  <category>point</category>
  <guid>https://pygisblog.massimilianomoraca.me/posts/2022-03-31/da-point-a-pointz.html</guid>
  <pubDate>Wed, 30 Mar 2022 22:00:00 GMT</pubDate>
  <media:content url="https://pygisblog.massimilianomoraca.me/project_logo.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
